
DanceFloorModule3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002812  000028c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002812  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b3  0080011a  0080011a  000028e0  2**0
                  ALLOC
  3 .eeprom       00000097  00810000  00810000  000028e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002418  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000007d4  00000000  00000000  00004d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000338  00000000  00000000  00005568  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000379c  00000000  00000000  000058a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001344  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001afc  00000000  00000000  0000a380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009b4  00000000  00000000  0000be7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a6e  00000000  00000000  0000c830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001f6b  00000000  00000000  0000d29e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  0000f209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	14 e0       	ldi	r17, 0x04	; 4
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3c       	cpi	r26, 0xCD	; 205
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 07 14 	jmp	0x280e	; 0x280e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
PacketType type;
int8_t announceTimer, idleTimer, idleFrameTimer;
int main(void)
{
	//p = (PacketOverlay_t *)pbuf;
	connected = 0;
      a6:	10 92 22 03 	sts	0x0322, r1
	
	//Initialize tileNum from EEPROM
	tileNum = eeprom_read_byte(&EEtileNum);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eerd_byte_m328p>
      b2:	80 93 00 01 	sts	0x0100, r24
	
	init_net(pbuf, ETH_BUF_SIZE);
      b6:	8a e1       	ldi	r24, 0x1A	; 26
      b8:	91 e0       	ldi	r25, 0x01	; 1
      ba:	64 ef       	ldi	r22, 0xF4	; 244
      bc:	71 e0       	ldi	r23, 0x01	; 1
      be:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <init_net>
	init_enc28j60(ns.MAC);
      c2:	81 e3       	ldi	r24, 0x31	; 49
      c4:	93 e0       	ldi	r25, 0x03	; 3
      c6:	0e 94 6f 07 	call	0xede	; 0xede <init_enc28j60>
	//init_dfControl();
	init_tlc5941();
      ca:	0e 94 03 10 	call	0x2006	; 0x2006 <init_tlc5941>
	init_timer();
      ce:	0e 94 67 0c 	call	0x18ce	; 0x18ce <init_timer>
	init_temp();
      d2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <init_temp>
	sei();//Enable global interrupts
      d6:	78 94       	sei
	wdt_reset();
      d8:	a8 95       	wdr
	//init_WDT();
	
	//Configure timers
	announceTimer = timer_get();
      da:	0e 94 84 0c 	call	0x1908	; 0x1908 <timer_get>
      de:	80 93 23 03 	sts	0x0323, r24
	timer_set(announceTimer, ANNOUNCE_INTERVAL);
      e2:	68 ee       	ldi	r22, 0xE8	; 232
      e4:	73 e0       	ldi	r23, 0x03	; 3
      e6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
	idleTimer = timer_get();
      ea:	0e 94 84 0c 	call	0x1908	; 0x1908 <timer_get>
      ee:	80 93 21 03 	sts	0x0321, r24
	timer_set(idleTimer, IDLE_TIMEOUT);
      f2:	60 ed       	ldi	r22, 0xD0	; 208
      f4:	77 e0       	ldi	r23, 0x07	; 7
      f6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
	idleFrameTimer = timer_get();
      fa:	0e 94 84 0c 	call	0x1908	; 0x1908 <timer_get>
      fe:	80 93 24 03 	sts	0x0324, r24
		wdt_reset();
		
		if(enc28j60linkup())
		{
			//While we haven't obtained an IP, attempt to obtain one via dhcp
			if(ns.ipAcquired == 0)
     102:	cb e3       	ldi	r28, 0x3B	; 59
     104:	d3 e0       	ldi	r29, 0x03	; 3
					{
						if(timer_check(idleFrameTimer) == TIMER_EXPIRED)
						{
							idlePattern1_ComputeFrame();
							sendFrame();
							latchNextCycle= 1;
     106:	11 e0       	ldi	r17, 0x01	; 1

				//If a packet has been received and is in the ENC28J60's buffer
				if(enc28j60Read(EPKTCNT) > 0)
				{
					//Receive the packet
					ns.plength = enc28j60PacketReceive(ns.pbuf, ns.pbuf_size);
     108:	0f 2e       	mov	r0, r31
     10a:	fb e4       	ldi	r31, 0x4B	; 75
     10c:	ef 2e       	mov	r14, r31
     10e:	f3 e0       	ldi	r31, 0x03	; 3
     110:	ff 2e       	mov	r15, r31
     112:	f0 2d       	mov	r31, r0
     114:	cc 24       	eor	r12, r12
     116:	dd 24       	eor	r13, r13
     118:	68 94       	set
     11a:	c1 f8       	bld	r12, 1
     11c:	ce 0c       	add	r12, r14
     11e:	df 1c       	adc	r13, r15
     120:	aa 24       	eor	r10, r10
     122:	bb 24       	eor	r11, r11
     124:	68 94       	set
     126:	a2 f8       	bld	r10, 2
     128:	ae 0c       	add	r10, r14
     12a:	bf 1c       	adc	r11, r15
	//*******************************MAIN LOOP BEGIN*********************************
		
	while(1)
	{
		//sei();//Just to make sure
		wdt_reset();
     12c:	a8 95       	wdr
		
		if(enc28j60linkup())
     12e:	0e 94 4e 08 	call	0x109c	; 0x109c <enc28j60linkup>
     132:	88 23       	and	r24, r24
     134:	09 f4       	brne	.+2      	; 0x138 <main+0x92>
     136:	63 c0       	rjmp	.+198    	; 0x1fe <main+0x158>
		{
			//While we haven't obtained an IP, attempt to obtain one via dhcp
			if(ns.ipAcquired == 0)
     138:	88 81       	ld	r24, Y
     13a:	88 23       	and	r24, r24
     13c:	29 f4       	brne	.+10     	; 0x148 <main+0xa2>
			{
				dhcp_requestIP(DHCP_TIMEOUT);
     13e:	80 ed       	ldi	r24, 0xD0	; 208
     140:	97 e0       	ldi	r25, 0x07	; 7
     142:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dhcp_requestIP>
     146:	f2 cf       	rjmp	.-28     	; 0x12c <main+0x86>
			}
			else//If we have a network address
			{

				//If a packet has been received and is in the ENC28J60's buffer
				if(enc28j60Read(EPKTCNT) > 0)
     148:	89 e3       	ldi	r24, 0x39	; 57
     14a:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
     14e:	88 23       	and	r24, r24
     150:	69 f1       	breq	.+90     	; 0x1ac <main+0x106>
				{
					//Receive the packet
					ns.plength = enc28j60PacketReceive(ns.pbuf, ns.pbuf_size);
     152:	f6 01       	movw	r30, r12
     154:	60 81       	ld	r22, Z
     156:	71 81       	ldd	r23, Z+1	; 0x01
     158:	f7 01       	movw	r30, r14
     15a:	80 81       	ld	r24, Z
     15c:	91 81       	ldd	r25, Z+1	; 0x01
     15e:	0e 94 91 08 	call	0x1122	; 0x1122 <enc28j60PacketReceive>
     162:	f5 01       	movw	r30, r10
     164:	91 83       	std	Z+1, r25	; 0x01
     166:	80 83       	st	Z, r24

					if(ns.plength == 0)
     168:	00 97       	sbiw	r24, 0x00	; 0
     16a:	01 f3       	breq	.-64     	; 0x12c <main+0x86>
						continue;
					
					//Get the packet type
					type = getPacketType();
     16c:	0e 94 12 0a 	call	0x1424	; 0x1424 <getPacketType>
     170:	90 93 1e 03 	sts	0x031E, r25
     174:	80 93 1d 03 	sts	0x031D, r24
					
					switch(type)
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <main+0xde>
     17c:	83 30       	cpi	r24, 0x03	; 3
     17e:	91 05       	cpc	r25, r1
     180:	a9 f6       	brne	.-86     	; 0x12c <main+0x86>
     182:	03 c0       	rjmp	.+6      	; 0x18a <main+0xe4>
					{
						case ARP:
							arp_handlePacket();
     184:	0e 94 73 03 	call	0x6e6	; 0x6e6 <arp_handlePacket>
						break;
     188:	d1 cf       	rjmp	.-94     	; 0x12c <main+0x86>
						
						case DF:
							//Returns 1 if the packet was for us
							if(df_handlePacket())
     18a:	0e 94 42 01 	call	0x284	; 0x284 <df_handlePacket>
     18e:	88 23       	and	r24, r24
     190:	69 f2       	breq	.-102    	; 0x12c <main+0x86>
							{
								//Reset announce timer
								timer_set(announceTimer, ANNOUNCE_INTERVAL);
     192:	80 91 23 03 	lds	r24, 0x0323
     196:	68 ee       	ldi	r22, 0xE8	; 232
     198:	73 e0       	ldi	r23, 0x03	; 3
     19a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
								//Reset idle timer
								timer_set(idleTimer, IDLE_TIMEOUT);
     19e:	80 91 21 03 	lds	r24, 0x0321
     1a2:	60 ed       	ldi	r22, 0xD0	; 208
     1a4:	77 e0       	ldi	r23, 0x07	; 7
     1a6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
     1aa:	c0 cf       	rjmp	.-128    	; 0x12c <main+0x86>
								
				}
				else
				{
					//Check announce timer
					if(timer_check(announceTimer) == TIMER_EXPIRED)
     1ac:	80 91 23 03 	lds	r24, 0x0323
     1b0:	0e 94 be 0c 	call	0x197c	; 0x197c <timer_check>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	41 f4       	brne	.+16     	; 0x1c8 <main+0x122>
					{
						//Announce our presence on the network
						df_announce();
     1b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <df_announce>
						//Reset announce timer
						timer_set(announceTimer, ANNOUNCE_INTERVAL);	
     1bc:	80 91 23 03 	lds	r24, 0x0323
     1c0:	68 ee       	ldi	r22, 0xE8	; 232
     1c2:	73 e0       	ldi	r23, 0x03	; 3
     1c4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
					}
					
					if(timer_check(idleTimer) == TIMER_EXPIRED)
     1c8:	80 91 21 03 	lds	r24, 0x0321
     1cc:	0e 94 be 0c 	call	0x197c	; 0x197c <timer_check>
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <main+0x130>
     1d4:	ab cf       	rjmp	.-170    	; 0x12c <main+0x86>
					{
						if(timer_check(idleFrameTimer) == TIMER_EXPIRED)
     1d6:	80 91 24 03 	lds	r24, 0x0324
     1da:	0e 94 be 0c 	call	0x197c	; 0x197c <timer_check>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0x13e>
     1e2:	a4 cf       	rjmp	.-184    	; 0x12c <main+0x86>
						{
							idlePattern1_ComputeFrame();
     1e4:	0e 94 1d 0c 	call	0x183a	; 0x183a <idlePattern1_ComputeFrame>
							sendFrame();
     1e8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sendFrame>
							latchNextCycle= 1;
     1ec:	10 93 19 03 	sts	0x0319, r17
							timer_set(idleFrameTimer, IDLE_FRAMEDELAY);
     1f0:	80 91 24 03 	lds	r24, 0x0324
     1f4:	62 e3       	ldi	r22, 0x32	; 50
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
     1fc:	97 cf       	rjmp	.-210    	; 0x12c <main+0x86>
			}
		}
		else//If the link is detected down
		{
			//If the link goes down, invalidate our IP
			ns.ipAcquired = 0;
     1fe:	18 82       	st	Y, r1
			
			//If link is down, the only mode is idle mode
			if(timer_check(idleFrameTimer) == TIMER_EXPIRED)
     200:	80 91 24 03 	lds	r24, 0x0324
     204:	0e 94 be 0c 	call	0x197c	; 0x197c <timer_check>
     208:	81 30       	cpi	r24, 0x01	; 1
     20a:	09 f0       	breq	.+2      	; 0x20e <main+0x168>
     20c:	8f cf       	rjmp	.-226    	; 0x12c <main+0x86>
			{
				idlePattern1_ComputeFrame();
     20e:	0e 94 1d 0c 	call	0x183a	; 0x183a <idlePattern1_ComputeFrame>
				sendFrame();
     212:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sendFrame>
				latchNextCycle= 1;
     216:	10 93 19 03 	sts	0x0319, r17
				timer_set(idleFrameTimer, IDLE_FRAMEDELAY);
     21a:	80 91 24 03 	lds	r24, 0x0324
     21e:	62 e3       	ldi	r22, 0x32	; 50
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
     226:	82 cf       	rjmp	.-252    	; 0x12c <main+0x86>

00000228 <init_WDT>:

//initialize watchdog timer
void init_WDT(void)
{
	//disable interrupts
	cli();
     228:	f8 94       	cli
	//reset watchdog
	wdt_reset();
     22a:	a8 95       	wdr
	
	//Clear WDRF in MCUSR
	MCUSR &= ~(1<<WDRF);
     22c:	84 b7       	in	r24, 0x34	; 52
     22e:	87 7f       	andi	r24, 0xF7	; 247
     230:	84 bf       	out	0x34, r24	; 52
	//Enable prescaler changes
	WDTCSR |= (1<<WDCE)|(1<<WDE);
     232:	e0 e6       	ldi	r30, 0x60	; 96
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	88 61       	ori	r24, 0x18	; 24
     23a:	80 83       	st	Z, r24
	//set up WDT reset on timeout with 4s prescaler
	WDTCSR = (1<<WDE)|(1<<WDP3);
     23c:	88 e2       	ldi	r24, 0x28	; 40
     23e:	80 83       	st	Z, r24
	//Enable global interrupts
	sei();
     240:	78 94       	sei
}
     242:	08 95       	ret

00000244 <delay_ms>:
//#include <util/delay.h>


void delay_ms(uint32_t ms)
{
	ms = ms * 1136;
     244:	20 e7       	ldi	r18, 0x70	; 112
     246:	34 e0       	ldi	r19, 0x04	; 4
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	0e 94 ef 12 	call	0x25de	; 0x25de <__mulsi3>
     250:	dc 01       	movw	r26, r24
     252:	cb 01       	movw	r24, r22
	while(ms--);
     254:	ac 01       	movw	r20, r24
     256:	bd 01       	movw	r22, r26
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	a1 09       	sbc	r26, r1
     25c:	b1 09       	sbc	r27, r1
     25e:	41 15       	cp	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	61 05       	cpc	r22, r1
     264:	71 05       	cpc	r23, r1
     266:	b1 f7       	brne	.-20     	; 0x254 <delay_ms+0x10>
}
     268:	08 95       	ret

0000026a <delay_us>:

void delay_us(uint32_t us)
{
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
	while(us--);
     26e:	ac 01       	movw	r20, r24
     270:	bd 01       	movw	r22, r26
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	a1 09       	sbc	r26, r1
     276:	b1 09       	sbc	r27, r1
     278:	41 15       	cp	r20, r1
     27a:	51 05       	cpc	r21, r1
     27c:	61 05       	cpc	r22, r1
     27e:	71 05       	cpc	r23, r1
     280:	b1 f7       	brne	.-20     	; 0x26e <delay_us+0x4>
}
     282:	08 95       	ret

00000284 <df_handlePacket>:
*/

uint16_t df_temp;
uint8_t *dfd;
uint8_t df_handlePacket()
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
	//dh = (DF_Header)(ns.pbuf + DF_START);
	dfd = (ns.pbuf + DF_START);
     288:	20 91 4b 03 	lds	r18, 0x034B
     28c:	30 91 4c 03 	lds	r19, 0x034C
	
	//Make sure this is a DANCEFLOOR packet
	for(uint8_t i = 0; i < 10; i++)
		if(*(dfd++) != DF_Text[i])
     290:	f9 01       	movw	r30, r18
     292:	52 a5       	lds	r21, 0x62
     294:	40 91 01 01 	lds	r20, 0x0101
     298:	c9 01       	movw	r24, r18
     29a:	8b 96       	adiw	r24, 0x2b	; 43
     29c:	90 93 26 03 	sts	0x0326, r25
     2a0:	80 93 25 03 	sts	0x0325, r24
     2a4:	54 17       	cp	r21, r20
     2a6:	09 f0       	breq	.+2      	; 0x2aa <df_handlePacket+0x26>
     2a8:	8f c0       	rjmp	.+286    	; 0x3c8 <df_handlePacket+0x144>
     2aa:	a2 e0       	ldi	r26, 0x02	; 2
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
DF_DotCorrect ddc;
*/

uint16_t df_temp;
uint8_t *dfd;
uint8_t df_handlePacket()
     2ae:	cd 01       	movw	r24, r26
     2b0:	09 96       	adiw	r24, 0x09	; 9
	//dh = (DF_Header)(ns.pbuf + DF_START);
	dfd = (ns.pbuf + DF_START);
	
	//Make sure this is a DANCEFLOOR packet
	for(uint8_t i = 0; i < 10; i++)
		if(*(dfd++) != DF_Text[i])
     2b2:	c0 91 25 03 	lds	r28, 0x0325
     2b6:	d0 91 26 03 	lds	r29, 0x0326
     2ba:	fe 01       	movw	r30, r28
     2bc:	51 91       	ld	r21, Z+
     2be:	4d 91       	ld	r20, X+
     2c0:	f0 93 26 03 	sts	0x0326, r31
     2c4:	e0 93 25 03 	sts	0x0325, r30
     2c8:	54 17       	cp	r21, r20
     2ca:	09 f0       	breq	.+2      	; 0x2ce <df_handlePacket+0x4a>
     2cc:	7d c0       	rjmp	.+250    	; 0x3c8 <df_handlePacket+0x144>
{
	//dh = (DF_Header)(ns.pbuf + DF_START);
	dfd = (ns.pbuf + DF_START);
	
	//Make sure this is a DANCEFLOOR packet
	for(uint8_t i = 0; i < 10; i++)
     2ce:	a8 17       	cp	r26, r24
     2d0:	b9 07       	cpc	r27, r25
     2d2:	79 f7       	brne	.-34     	; 0x2b2 <df_handlePacket+0x2e>
		if(*(dfd++) != DF_Text[i])
			return;
			
		
	switch(*dfd)
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	82 30       	cpi	r24, 0x02	; 2
     2d8:	09 f4       	brne	.+2      	; 0x2dc <df_handlePacket+0x58>
     2da:	6a c0       	rjmp	.+212    	; 0x3b0 <df_handlePacket+0x12c>
     2dc:	83 30       	cpi	r24, 0x03	; 3
     2de:	30 f4       	brcc	.+12     	; 0x2ec <df_handlePacket+0x68>
     2e0:	88 23       	and	r24, r24
     2e2:	51 f0       	breq	.+20     	; 0x2f8 <df_handlePacket+0x74>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	09 f0       	breq	.+2      	; 0x2ea <df_handlePacket+0x66>
     2e8:	6d c0       	rjmp	.+218    	; 0x3c4 <df_handlePacket+0x140>
     2ea:	08 c0       	rjmp	.+16     	; 0x2fc <df_handlePacket+0x78>
     2ec:	81 31       	cpi	r24, 0x11	; 17
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <df_handlePacket+0x6e>
     2f0:	63 c0       	rjmp	.+198    	; 0x3b8 <df_handlePacket+0x134>
     2f2:	82 31       	cpi	r24, 0x12	; 18
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <df_handlePacket+0x74>
     2f6:	66 c0       	rjmp	.+204    	; 0x3c4 <df_handlePacket+0x140>
			
		default:
			return 0;
	}
	
	return 1;//The packet is for us
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	66 c0       	rjmp	.+204    	; 0x3c8 <df_handlePacket+0x144>
			//TODO
		break;
		
		case DF_SetFrame:
			//df = (DF_Frame)(ns.pbuf + DF_DATA_START);
			dfd = (ns.pbuf + DF_START + DF_DATA_P);
     2fc:	2b 5c       	subi	r18, 0xCB	; 203
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	30 93 26 03 	sts	0x0326, r19
     304:	20 93 25 03 	sts	0x0325, r18
			for(uint8_t led = 0; led < 64; led++)
     308:	c0 e0       	ldi	r28, 0x00	; 0
			{
				df_temp = *dfd;
     30a:	e0 91 25 03 	lds	r30, 0x0325
     30e:	f0 91 26 03 	lds	r31, 0x0326
     312:	41 91       	ld	r20, Z+
     314:	50 e0       	ldi	r21, 0x00	; 0
				df_temp = df_temp << 4;
     316:	42 95       	swap	r20
     318:	52 95       	swap	r21
     31a:	50 7f       	andi	r21, 0xF0	; 240
     31c:	54 27       	eor	r21, r20
     31e:	40 7f       	andi	r20, 0xF0	; 240
     320:	54 27       	eor	r21, r20
     322:	50 93 28 03 	sts	0x0328, r21
     326:	40 93 27 03 	sts	0x0327, r20
				dfd++;
     32a:	f0 93 26 03 	sts	0x0326, r31
     32e:	e0 93 25 03 	sts	0x0325, r30
				setValue(led, RED,   df_temp);
     332:	8c 2f       	mov	r24, r28
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
				df_temp = *dfd;
     33c:	e0 91 25 03 	lds	r30, 0x0325
     340:	f0 91 26 03 	lds	r31, 0x0326
     344:	41 91       	ld	r20, Z+
     346:	50 e0       	ldi	r21, 0x00	; 0
				df_temp = df_temp << 4;
     348:	42 95       	swap	r20
     34a:	52 95       	swap	r21
     34c:	50 7f       	andi	r21, 0xF0	; 240
     34e:	54 27       	eor	r21, r20
     350:	40 7f       	andi	r20, 0xF0	; 240
     352:	54 27       	eor	r21, r20
     354:	50 93 28 03 	sts	0x0328, r21
     358:	40 93 27 03 	sts	0x0327, r20
				dfd++;
     35c:	f0 93 26 03 	sts	0x0326, r31
     360:	e0 93 25 03 	sts	0x0325, r30
				setValue(led, GREEN, df_temp);
     364:	8c 2f       	mov	r24, r28
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
				df_temp = *dfd;
     36e:	e0 91 25 03 	lds	r30, 0x0325
     372:	f0 91 26 03 	lds	r31, 0x0326
     376:	41 91       	ld	r20, Z+
     378:	50 e0       	ldi	r21, 0x00	; 0
				df_temp = df_temp << 4;
     37a:	42 95       	swap	r20
     37c:	52 95       	swap	r21
     37e:	50 7f       	andi	r21, 0xF0	; 240
     380:	54 27       	eor	r21, r20
     382:	40 7f       	andi	r20, 0xF0	; 240
     384:	54 27       	eor	r21, r20
     386:	50 93 28 03 	sts	0x0328, r21
     38a:	40 93 27 03 	sts	0x0327, r20
				dfd++;
     38e:	f0 93 26 03 	sts	0x0326, r31
     392:	e0 93 25 03 	sts	0x0325, r30
				setValue(led, BLUE,  df_temp);
     396:	8c 2f       	mov	r24, r28
     398:	62 e0       	ldi	r22, 0x02	; 2
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
		break;
		
		case DF_SetFrame:
			//df = (DF_Frame)(ns.pbuf + DF_DATA_START);
			dfd = (ns.pbuf + DF_START + DF_DATA_P);
			for(uint8_t led = 0; led < 64; led++)
     3a0:	cf 5f       	subi	r28, 0xFF	; 255
     3a2:	c0 34       	cpi	r28, 0x40	; 64
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <df_handlePacket+0x124>
     3a6:	b1 cf       	rjmp	.-158    	; 0x30a <df_handlePacket+0x86>
				df_temp = *dfd;
				df_temp = df_temp << 4;
				dfd++;
				setValue(led, BLUE,  df_temp);
			}				
			sendFrame();
     3a8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sendFrame>
			
		default:
			return 0;
	}
	
	return 1;//The packet is for us
     3ac:	81 e0       	ldi	r24, 0x01	; 1
				df_temp = df_temp << 4;
				dfd++;
				setValue(led, BLUE,  df_temp);
			}				
			sendFrame();
		break;
     3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <df_handlePacket+0x144>
		
		case DF_DispFrame:
			latchNextCycle = 1;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	80 93 19 03 	sts	0x0319, r24
		break;
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <df_handlePacket+0x144>
		
		case DF_SetDotCorrect:
			setDotCorrect(ns.pbuf + DF_START + DF_DATA_P);
     3b8:	c9 01       	movw	r24, r18
     3ba:	c5 96       	adiw	r24, 0x35	; 53
     3bc:	0e 94 1d 10 	call	0x203a	; 0x203a <setDotCorrect>
			
		default:
			return 0;
	}
	
	return 1;//The packet is for us
     3c0:	81 e0       	ldi	r24, 0x01	; 1
			latchNextCycle = 1;
		break;
		
		case DF_SetDotCorrect:
			setDotCorrect(ns.pbuf + DF_START + DF_DATA_P);
		break;
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <df_handlePacket+0x144>
			//TODO
		break;
		
		
		case DF_Announce:
			return 0;//The packet wasn't for us
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <df_handlePacket+0x144>
		default:
			return 0;
	}
	
	return 1;//The packet is for us
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <df_announce>:

void df_announce()
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
	//Build ethernet header
	eth_makeHeader(ns.pbuf, ns.MAC, bcastMAC, ETH_IP);
     3d2:	c1 e3       	ldi	r28, 0x31	; 49
     3d4:	d3 e0       	ldi	r29, 0x03	; 3
     3d6:	80 91 4b 03 	lds	r24, 0x034B
     3da:	90 91 4c 03 	lds	r25, 0x034C
     3de:	be 01       	movw	r22, r28
     3e0:	4c e0       	ldi	r20, 0x0C	; 12
     3e2:	51 e0       	ldi	r21, 0x01	; 1
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	38 e0       	ldi	r19, 0x08	; 8
     3e8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eth_makeHeader>
	//Build IP header
	ip_makeHeader(ns.pbuf, IP_UDP, ns.IP, bcastIP);
     3ec:	ae 01       	movw	r20, r28
     3ee:	4a 5f       	subi	r20, 0xFA	; 250
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	80 91 4b 03 	lds	r24, 0x034B
     3f6:	90 91 4c 03 	lds	r25, 0x034C
     3fa:	61 e1       	ldi	r22, 0x11	; 17
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	22 e1       	ldi	r18, 0x12	; 18
     400:	31 e0       	ldi	r19, 0x01	; 1
     402:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ip_makeHeader>
	//Build UDP header
	udp_makeHeader(ns.pbuf, DF_PORT, DF_PORT);
     406:	80 91 4b 03 	lds	r24, 0x034B
     40a:	90 91 4c 03 	lds	r25, 0x034C
     40e:	69 e5       	ldi	r22, 0x59	; 89
     410:	73 e5       	ldi	r23, 0x53	; 83
     412:	49 e5       	ldi	r20, 0x59	; 89
     414:	53 e5       	ldi	r21, 0x53	; 83
     416:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <udp_makeHeader>

		
	//Fill in op-codes
	uint8_t *data = ns.pbuf + DF_START;
     41a:	c0 91 4b 03 	lds	r28, 0x034B
     41e:	d0 91 4c 03 	lds	r29, 0x034C
     422:	e1 e0       	ldi	r30, 0x01	; 1
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	de 01       	movw	r26, r28
     428:	9a 96       	adiw	r26, 0x2a	; 42
	}
	
	return 1;//The packet is for us
}

void df_announce()
     42a:	cf 01       	movw	r24, r30
     42c:	0a 96       	adiw	r24, 0x0a	; 10

		
	//Fill in op-codes
	uint8_t *data = ns.pbuf + DF_START;
	for(uint8_t i = 0; i < 10; i++)
		data[i] = DF_Text[i];
     42e:	21 91       	ld	r18, Z+
     430:	2d 93       	st	X+, r18
	udp_makeHeader(ns.pbuf, DF_PORT, DF_PORT);

		
	//Fill in op-codes
	uint8_t *data = ns.pbuf + DF_START;
	for(uint8_t i = 0; i < 10; i++)
     432:	e8 17       	cp	r30, r24
     434:	f9 07       	cpc	r31, r25
     436:	d9 f7       	brne	.-10     	; 0x42e <df_announce+0x60>
		data[i] = DF_Text[i];
		
	data[10] = DF_Announce;
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	8c ab       	sts	0x5c, r24
		
	data[11] = tileNum;
     43c:	80 91 00 01 	lds	r24, 0x0100
     440:	8d ab       	sts	0x5d, r24
	
	for(uint8_t i = 0; i < 4; i++)
		data[i+12] = ns.IP[i];
     442:	80 91 37 03 	lds	r24, 0x0337
     446:	8e ab       	sts	0x5e, r24
     448:	80 91 38 03 	lds	r24, 0x0338
     44c:	8f ab       	sts	0x5f, r24
     44e:	80 91 39 03 	lds	r24, 0x0339
     452:	88 af       	sts	0x78, r24
     454:	80 91 3a 03 	lds	r24, 0x033A
     458:	89 af       	sts	0x79, r24
			
	ns.plength += 16;
     45a:	80 91 4f 03 	lds	r24, 0x034F
     45e:	90 91 50 03 	lds	r25, 0x0350
     462:	40 96       	adiw	r24, 0x10	; 16
     464:	90 93 50 03 	sts	0x0350, r25
     468:	80 93 4f 03 	sts	0x034F, r24
		
	udp_setDataLength(ns.pbuf, 15);
     46c:	80 91 4b 03 	lds	r24, 0x034B
     470:	90 91 4c 03 	lds	r25, 0x034C
     474:	6f e0       	ldi	r22, 0x0F	; 15
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	0e 94 0b 0b 	call	0x1616	; 0x1616 <udp_setDataLength>
	udp_computeChecksum(ns.pbuf);
     47c:	80 91 4b 03 	lds	r24, 0x034B
     480:	90 91 4c 03 	lds	r25, 0x034C
     484:	0e 94 17 0b 	call	0x162e	; 0x162e <udp_computeChecksum>
		
	ip_setDataLength(ns.pbuf, sizeof(UDP_Data_t)+15);
     488:	80 91 4b 03 	lds	r24, 0x034B
     48c:	90 91 4c 03 	lds	r25, 0x034C
     490:	67 e1       	ldi	r22, 0x17	; 23
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	0e 94 b4 09 	call	0x1368	; 0x1368 <ip_setDataLength>
	ip_computeChecksum(ns.pbuf);
     498:	80 91 4b 03 	lds	r24, 0x034B
     49c:	90 91 4c 03 	lds	r25, 0x034C
     4a0:	0e 94 c0 09 	call	0x1380	; 0x1380 <ip_computeChecksum>
		
	enc28j60PacketSend(ns.pbuf, ns.plength);
     4a4:	60 91 4f 03 	lds	r22, 0x034F
     4a8:	70 91 50 03 	lds	r23, 0x0350
     4ac:	80 91 4b 03 	lds	r24, 0x034B
     4b0:	90 91 4c 03 	lds	r25, 0x034C
     4b4:	0e 94 57 08 	call	0x10ae	; 0x10ae <enc28j60PacketSend>
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <arp_sendRequest>:
void arp_sendReply();
ARP_Data ad;

//Documentation in header file
void arp_sendRequest(uint8_t *ip)
{
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	d8 2e       	mov	r13, r24
     4d0:	c9 2e       	mov	r12, r25
	eth_makeHeader(ns.pbuf, ns.MAC, bcastMAC, ETH_ARP);	
     4d2:	0f 2e       	mov	r0, r31
     4d4:	fb e4       	ldi	r31, 0x4B	; 75
     4d6:	ef 2e       	mov	r14, r31
     4d8:	f3 e0       	ldi	r31, 0x03	; 3
     4da:	ff 2e       	mov	r15, r31
     4dc:	f0 2d       	mov	r31, r0
     4de:	87 01       	movw	r16, r14
     4e0:	0a 51       	subi	r16, 0x1A	; 26
     4e2:	10 40       	sbci	r17, 0x00	; 0
     4e4:	80 91 4b 03 	lds	r24, 0x034B
     4e8:	90 91 4c 03 	lds	r25, 0x034C
     4ec:	b8 01       	movw	r22, r16
     4ee:	4c e0       	ldi	r20, 0x0C	; 12
     4f0:	51 e0       	ldi	r21, 0x01	; 1
     4f2:	26 e0       	ldi	r18, 0x06	; 6
     4f4:	38 e0       	ldi	r19, 0x08	; 8
     4f6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eth_makeHeader>
	
	ad = (ARP_Data)(ns.pbuf + sizeof(ETH_Data_t));
     4fa:	c0 91 4b 03 	lds	r28, 0x034B
     4fe:	d0 91 4c 03 	lds	r29, 0x034C
     502:	ce 01       	movw	r24, r28
     504:	0e 96       	adiw	r24, 0x0e	; 14
     506:	90 93 2a 03 	sts	0x032A, r25
     50a:	80 93 29 03 	sts	0x0329, r24
	
	ad->htype = htons(ARP_HTYPE_ETH);
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
     516:	9f 87       	std	Y+15, r25	; 0x0f
     518:	8e 87       	std	Y+14, r24	; 0x0e
	ad->ptype = htons(ARP_PTYPE_IPV4);
     51a:	c0 91 29 03 	lds	r28, 0x0329
     51e:	d0 91 2a 03 	lds	r29, 0x032A
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	98 e0       	ldi	r25, 0x08	; 8
     526:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
     52a:	9b 83       	std	Y+3, r25	; 0x03
     52c:	8a 83       	std	Y+2, r24	; 0x02
	ad->hlen  = ARP_HLEN;
     52e:	c0 91 29 03 	lds	r28, 0x0329
     532:	d0 91 2a 03 	lds	r29, 0x032A
     536:	86 e0       	ldi	r24, 0x06	; 6
     538:	8c 83       	std	Y+4, r24	; 0x04
	ad->plen  = ARP_PLEN;
     53a:	84 e0       	ldi	r24, 0x04	; 4
     53c:	8d 83       	std	Y+5, r24	; 0x05
	ad->oper  = htons(ARP_OP_REQUEST);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
     546:	9f 83       	std	Y+7, r25	; 0x07
     548:	8e 83       	std	Y+6, r24	; 0x06
	//Fill MAC Addresses
	for(uint8_t i = 0; i < 6; i++)
	{
		ad->senderMAC[i] = ns.MAC[i];
     54a:	80 91 29 03 	lds	r24, 0x0329
     54e:	90 91 2a 03 	lds	r25, 0x032A
     552:	f8 01       	movw	r30, r16
 */
void arp_sendReply();
ARP_Data ad;

//Documentation in header file
void arp_sendRequest(uint8_t *ip)
     554:	ec 01       	movw	r28, r24
     556:	28 96       	adiw	r28, 0x08	; 8
     558:	dc 01       	movw	r26, r24
     55a:	52 96       	adiw	r26, 0x12	; 18
     55c:	c7 01       	movw	r24, r14
     55e:	44 97       	sbiw	r24, 0x14	; 20
	ad->plen  = ARP_PLEN;
	ad->oper  = htons(ARP_OP_REQUEST);
	//Fill MAC Addresses
	for(uint8_t i = 0; i < 6; i++)
	{
		ad->senderMAC[i] = ns.MAC[i];
     560:	21 91       	ld	r18, Z+
     562:	29 93       	st	Y+, r18
		ad->targetMAC[i] = 0x00;//We want to find this address
     564:	1d 92       	st	X+, r1
	ad->ptype = htons(ARP_PTYPE_IPV4);
	ad->hlen  = ARP_HLEN;
	ad->plen  = ARP_PLEN;
	ad->oper  = htons(ARP_OP_REQUEST);
	//Fill MAC Addresses
	for(uint8_t i = 0; i < 6; i++)
     566:	e8 17       	cp	r30, r24
     568:	f9 07       	cpc	r31, r25
     56a:	d1 f7       	brne	.-12     	; 0x560 <arp_sendRequest+0xa2>
     56c:	c7 e3       	ldi	r28, 0x37	; 55
     56e:	d3 e0       	ldi	r29, 0x03	; 3
     570:	8d 2d       	mov	r24, r13
     572:	9c 2d       	mov	r25, r12
 */
void arp_sendReply();
ARP_Data ad;

//Documentation in header file
void arp_sendRequest(uint8_t *ip)
     574:	a0 91 29 03 	lds	r26, 0x0329
     578:	b0 91 2a 03 	lds	r27, 0x032A
     57c:	58 96       	adiw	r26, 0x18	; 24
     57e:	98 01       	movw	r18, r16
     580:	26 5f       	subi	r18, 0xF6	; 246
     582:	3f 4f       	sbci	r19, 0xFF	; 255
		ad->targetMAC[i] = 0x00;//We want to find this address
	}
	//Fill IP Addresses
	for(uint8_t i = 0; i < 4; i++)
	{
		ad->senderIP[i] = ns.IP[i];
     584:	49 91       	ld	r20, Y+
 */
void arp_sendReply();
ARP_Data ad;

//Documentation in header file
void arp_sendRequest(uint8_t *ip)
     586:	fd 01       	movw	r30, r26
     588:	3a 97       	sbiw	r30, 0x0a	; 10
		ad->targetMAC[i] = 0x00;//We want to find this address
	}
	//Fill IP Addresses
	for(uint8_t i = 0; i < 4; i++)
	{
		ad->senderIP[i] = ns.IP[i];
     58a:	40 83       	st	Z, r20
		ad->targetIP[i] = ip[i];
     58c:	fc 01       	movw	r30, r24
     58e:	41 91       	ld	r20, Z+
     590:	cf 01       	movw	r24, r30
     592:	4d 93       	st	X+, r20
	{
		ad->senderMAC[i] = ns.MAC[i];
		ad->targetMAC[i] = 0x00;//We want to find this address
	}
	//Fill IP Addresses
	for(uint8_t i = 0; i < 4; i++)
     594:	c2 17       	cp	r28, r18
     596:	d3 07       	cpc	r29, r19
     598:	a9 f7       	brne	.-22     	; 0x584 <arp_sendRequest+0xc6>
	{
		ad->senderIP[i] = ns.IP[i];
		ad->targetIP[i] = ip[i];
	}		
	//Set packet size
	ns.plength += sizeof(ARP_Data_t);
     59a:	60 91 4f 03 	lds	r22, 0x034F
     59e:	70 91 50 03 	lds	r23, 0x0350
     5a2:	64 5e       	subi	r22, 0xE4	; 228
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	70 93 50 03 	sts	0x0350, r23
     5aa:	60 93 4f 03 	sts	0x034F, r22
	//Send packet
	enc28j60PacketSend(ns.pbuf, ns.plength); 	
     5ae:	80 91 4b 03 	lds	r24, 0x034B
     5b2:	90 91 4c 03 	lds	r25, 0x034C
     5b6:	0e 94 57 08 	call	0x10ae	; 0x10ae <enc28j60PacketSend>
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	08 95       	ret

000005cc <arp_sendReply>:

//Documentation in header file
void arp_sendReply()
{
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
	ad = (ARP_Data)(ns.pbuf + sizeof(ETH_Data_t));
     5d0:	80 91 4b 03 	lds	r24, 0x034B
     5d4:	90 91 4c 03 	lds	r25, 0x034C
     5d8:	9c 01       	movw	r18, r24
     5da:	22 5f       	subi	r18, 0xF2	; 242
     5dc:	3f 4f       	sbci	r19, 0xFF	; 255
     5de:	30 93 2a 03 	sts	0x032A, r19
     5e2:	20 93 29 03 	sts	0x0329, r18
	
	eth_makeHeader(ns.pbuf, ns.MAC, ad->senderMAC, ETH_ARP);	
     5e6:	ac 01       	movw	r20, r24
     5e8:	4a 5e       	subi	r20, 0xEA	; 234
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	61 e3       	ldi	r22, 0x31	; 49
     5ee:	73 e0       	ldi	r23, 0x03	; 3
     5f0:	26 e0       	ldi	r18, 0x06	; 6
     5f2:	38 e0       	ldi	r19, 0x08	; 8
     5f4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eth_makeHeader>
		
	//The request packet would not have my MAC but would have my IP
	//Copy the sender addresses into the target address for a reply
	//Fill in this system's data for the sender address
		
	ad->htype = htons(ARP_HTYPE_ETH);
     5f8:	c0 91 29 03 	lds	r28, 0x0329
     5fc:	d0 91 2a 03 	lds	r29, 0x032A
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
     608:	99 83       	std	Y+1, r25	; 0x01
     60a:	88 83       	st	Y, r24
	ad->ptype = htons(ARP_PTYPE_IPV4); //0x0800 (remember, little endian)
     60c:	c0 91 29 03 	lds	r28, 0x0329
     610:	d0 91 2a 03 	lds	r29, 0x032A
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	98 e0       	ldi	r25, 0x08	; 8
     618:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
     61c:	9b 83       	std	Y+3, r25	; 0x03
     61e:	8a 83       	std	Y+2, r24	; 0x02
	ad->hlen  = ARP_HLEN;
     620:	c0 91 29 03 	lds	r28, 0x0329
     624:	d0 91 2a 03 	lds	r29, 0x032A
     628:	86 e0       	ldi	r24, 0x06	; 6
     62a:	8c 83       	std	Y+4, r24	; 0x04
	ad->plen  = ARP_PLEN;
     62c:	84 e0       	ldi	r24, 0x04	; 4
     62e:	8d 83       	std	Y+5, r24	; 0x05
	ad->oper  = htons(ARP_OP_REPLY);
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
     638:	9f 83       	std	Y+7, r25	; 0x07
     63a:	8e 83       	std	Y+6, r24	; 0x06

	//Fill MAC Address of target
	for(uint8_t i = 0; i < 6; i++)
	{
		//We want to send a reply back to the sender
		ad->targetMAC[i] = ad->senderMAC[i];
     63c:	e0 91 29 03 	lds	r30, 0x0329
     640:	f0 91 2a 03 	lds	r31, 0x032A
	//Send packet
	enc28j60PacketSend(ns.pbuf, ns.plength); 	
}

//Documentation in header file
void arp_sendReply()
     644:	df 01       	movw	r26, r30
     646:	18 96       	adiw	r26, 0x08	; 8
     648:	72 96       	adiw	r30, 0x12	; 18
     64a:	86 e0       	ldi	r24, 0x06	; 6

	//Fill MAC Address of target
	for(uint8_t i = 0; i < 6; i++)
	{
		//We want to send a reply back to the sender
		ad->targetMAC[i] = ad->senderMAC[i];
     64c:	9d 91       	ld	r25, X+
     64e:	91 93       	st	Z+, r25
     650:	81 50       	subi	r24, 0x01	; 1
	ad->hlen  = ARP_HLEN;
	ad->plen  = ARP_PLEN;
	ad->oper  = htons(ARP_OP_REPLY);

	//Fill MAC Address of target
	for(uint8_t i = 0; i < 6; i++)
     652:	e1 f7       	brne	.-8      	; 0x64c <arp_sendReply+0x80>
		ad->targetMAC[i] = ad->senderMAC[i];
	}
	//Fill IP Address of target
	for(uint8_t i = 0; i < 4; i++)
	{
		ad->targetIP[i] = ad->senderIP[i];
     654:	a0 91 29 03 	lds	r26, 0x0329
     658:	b0 91 2a 03 	lds	r27, 0x032A
     65c:	1e 96       	adiw	r26, 0x0e	; 14
     65e:	8c 91       	ld	r24, X
     660:	1e 97       	sbiw	r26, 0x0e	; 14
     662:	58 96       	adiw	r26, 0x18	; 24
     664:	8c 93       	st	X, r24
     666:	58 97       	sbiw	r26, 0x18	; 24
     668:	1f 96       	adiw	r26, 0x0f	; 15
     66a:	8c 91       	ld	r24, X
     66c:	1f 97       	sbiw	r26, 0x0f	; 15
     66e:	59 96       	adiw	r26, 0x19	; 25
     670:	8c 93       	st	X, r24
     672:	59 97       	sbiw	r26, 0x19	; 25
     674:	50 96       	adiw	r26, 0x10	; 16
     676:	8c 91       	ld	r24, X
     678:	50 97       	sbiw	r26, 0x10	; 16
     67a:	5a 96       	adiw	r26, 0x1a	; 26
     67c:	8c 93       	st	X, r24
     67e:	5a 97       	sbiw	r26, 0x1a	; 26
     680:	51 96       	adiw	r26, 0x11	; 17
     682:	8c 91       	ld	r24, X
     684:	51 97       	sbiw	r26, 0x11	; 17
     686:	5b 96       	adiw	r26, 0x1b	; 27
     688:	8c 93       	st	X, r24
     68a:	5b 97       	sbiw	r26, 0x1b	; 27
     68c:	e1 e3       	ldi	r30, 0x31	; 49
     68e:	f3 e0       	ldi	r31, 0x03	; 3
	//Send packet
	enc28j60PacketSend(ns.pbuf, ns.plength); 	
}

//Documentation in header file
void arp_sendReply()
     690:	18 96       	adiw	r26, 0x08	; 8
     692:	cf 01       	movw	r24, r30
     694:	06 96       	adiw	r24, 0x06	; 6
	}
	
	//Fill MAC Address of sender (this)
	for(uint8_t i = 0; i < 6; i++)
	{
		ad->senderMAC[i] = ns.MAC[i];
     696:	21 91       	ld	r18, Z+
     698:	2d 93       	st	X+, r18
	{
		ad->targetIP[i] = ad->senderIP[i];
	}
	
	//Fill MAC Address of sender (this)
	for(uint8_t i = 0; i < 6; i++)
     69a:	e8 17       	cp	r30, r24
     69c:	f9 07       	cpc	r31, r25
     69e:	d9 f7       	brne	.-10     	; 0x696 <arp_sendReply+0xca>
		ad->senderMAC[i] = ns.MAC[i];
	}
	//Fill IP Address of sender (this)
	for(uint8_t i = 0; i < 4; i++)
	{
		ad->senderIP[i] = ns.IP[i];
     6a0:	e0 91 29 03 	lds	r30, 0x0329
     6a4:	f0 91 2a 03 	lds	r31, 0x032A
     6a8:	80 91 37 03 	lds	r24, 0x0337
     6ac:	86 87       	std	Z+14, r24	; 0x0e
     6ae:	80 91 38 03 	lds	r24, 0x0338
     6b2:	87 87       	std	Z+15, r24	; 0x0f
     6b4:	80 91 39 03 	lds	r24, 0x0339
     6b8:	80 8b       	std	Z+16, r24	; 0x10
     6ba:	80 91 3a 03 	lds	r24, 0x033A
     6be:	81 8b       	std	Z+17, r24	; 0x11
	}
	
	//Set packet size
	ns.plength += sizeof(ARP_Data_t);
     6c0:	60 91 4f 03 	lds	r22, 0x034F
     6c4:	70 91 50 03 	lds	r23, 0x0350
     6c8:	64 5e       	subi	r22, 0xE4	; 228
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	70 93 50 03 	sts	0x0350, r23
     6d0:	60 93 4f 03 	sts	0x034F, r22
	//Send packet
	enc28j60PacketSend(ns.pbuf, ns.plength);
     6d4:	80 91 4b 03 	lds	r24, 0x034B
     6d8:	90 91 4c 03 	lds	r25, 0x034C
     6dc:	0e 94 57 08 	call	0x10ae	; 0x10ae <enc28j60PacketSend>
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <arp_handlePacket>:

//Documentation in header file
void arp_handlePacket()
{
	ad = (ARP_Data)(ns.pbuf + sizeof(ETH_Data_t));
     6e6:	e0 91 4b 03 	lds	r30, 0x034B
     6ea:	f0 91 4c 03 	lds	r31, 0x034C
     6ee:	cf 01       	movw	r24, r30
     6f0:	0e 96       	adiw	r24, 0x0e	; 14
     6f2:	90 93 2a 03 	sts	0x032A, r25
     6f6:	80 93 29 03 	sts	0x0329, r24
	
	//Determine if the arp request is for this machine
	for(uint8_t i = 0; i < 4; i++)
	{
		if(ad->targetIP[i] != ns.IP[i])
     6fa:	96 a1       	lds	r25, 0x46
     6fc:	80 91 37 03 	lds	r24, 0x0337
     700:	98 17       	cp	r25, r24
     702:	89 f4       	brne	.+34     	; 0x726 <arp_handlePacket+0x40>
     704:	97 a1       	lds	r25, 0x47
     706:	80 91 38 03 	lds	r24, 0x0338
     70a:	98 17       	cp	r25, r24
     70c:	61 f4       	brne	.+24     	; 0x726 <arp_handlePacket+0x40>
     70e:	90 a5       	lds	r25, 0x60
     710:	80 91 39 03 	lds	r24, 0x0339
     714:	98 17       	cp	r25, r24
     716:	39 f4       	brne	.+14     	; 0x726 <arp_handlePacket+0x40>
     718:	91 a5       	lds	r25, 0x61
     71a:	80 91 3a 03 	lds	r24, 0x033A
     71e:	98 17       	cp	r25, r24
     720:	11 f4       	brne	.+4      	; 0x726 <arp_handlePacket+0x40>
			return; //If it's not a match for this machine's IP, return. The packet is not for us
	}
	
	//If it is a match for our IP, send a reply
	arp_sendReply();
     722:	0e 94 e6 02 	call	0x5cc	; 0x5cc <arp_sendReply>
     726:	08 95       	ret

00000728 <dhcp_buildPacket>:
/*! \fn void dhcp_buildPacket(uint8_t *pbuf)
 *  \brief Builds a DHCP packet WITHOUT any option codes
 *  \param pbuf  A pointer to the buffer to build the packet in. The pointer should point to the start of DHCP data.
 */
void dhcp_buildPacket(uint8_t *pbuf)
{
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
	DHCP_Data d = (DHCP_Data)(pbuf + DHCP_START);
	
	d->op = DHCP_REQUEST;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	8a a7       	lds	r24, 0x7a
	d->htype = 1;//Ethernet
     732:	8b a7       	lds	r24, 0x7b
	d->hlen = 6;//Length of MAC Address
     734:	86 e0       	ldi	r24, 0x06	; 6
     736:	8c a7       	lds	r24, 0x7c
	d->hops = 0;//We should be talking directly to the server, no proxy needed.
     738:	1d a6       	lds	r17, 0xbd
	d->XID = ns.MAC[5];//Transaction ID is always the last number in the MAC address
     73a:	80 91 36 03 	lds	r24, 0x0336
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	8e a7       	lds	r24, 0x7e
     746:	9f a7       	lds	r25, 0x7f
     748:	a8 ab       	sts	0x58, r26
     74a:	b9 ab       	sts	0x59, r27
	d->secs = 0;
     74c:	1b aa       	sts	0x9b, r17
     74e:	1a aa       	sts	0x9a, r17
	d->flags = 0;
     750:	1d aa       	sts	0x9d, r17
     752:	1c aa       	sts	0x9c, r17

/*! \fn void dhcp_buildPacket(uint8_t *pbuf)
 *  \brief Builds a DHCP packet WITHOUT any option codes
 *  \param pbuf  A pointer to the buffer to build the packet in. The pointer should point to the start of DHCP data.
 */
void dhcp_buildPacket(uint8_t *pbuf)
     754:	fe 01       	movw	r30, r28
     756:	ee 5b       	subi	r30, 0xBE	; 190
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	84 e0       	ldi	r24, 0x04	; 4
     75c:	df 01       	movw	r26, r30
     75e:	1c 97       	sbiw	r26, 0x0c	; 12
	d->secs = 0;
	d->flags = 0;
	//Zero IP Addresses
	for(uint8_t i = 0; i < 4; i++)
	{
		d->clientIP[i] = 0x00;
     760:	1c 92       	st	X, r1

/*! \fn void dhcp_buildPacket(uint8_t *pbuf)
 *  \brief Builds a DHCP packet WITHOUT any option codes
 *  \param pbuf  A pointer to the buffer to build the packet in. The pointer should point to the start of DHCP data.
 */
void dhcp_buildPacket(uint8_t *pbuf)
     762:	df 01       	movw	r26, r30
     764:	18 97       	sbiw	r26, 0x08	; 8
	d->flags = 0;
	//Zero IP Addresses
	for(uint8_t i = 0; i < 4; i++)
	{
		d->clientIP[i] = 0x00;
		d->yourIP[i] = 0x00;
     766:	1c 92       	st	X, r1

/*! \fn void dhcp_buildPacket(uint8_t *pbuf)
 *  \brief Builds a DHCP packet WITHOUT any option codes
 *  \param pbuf  A pointer to the buffer to build the packet in. The pointer should point to the start of DHCP data.
 */
void dhcp_buildPacket(uint8_t *pbuf)
     768:	df 01       	movw	r26, r30
     76a:	14 97       	sbiw	r26, 0x04	; 4
	//Zero IP Addresses
	for(uint8_t i = 0; i < 4; i++)
	{
		d->clientIP[i] = 0x00;
		d->yourIP[i] = 0x00;
		d->serverIP[i] = 0x00;
     76c:	1c 92       	st	X, r1
		d->gatewayIP[i] = 0x00;		
     76e:	11 92       	st	Z+, r1
     770:	81 50       	subi	r24, 0x01	; 1
	d->hops = 0;//We should be talking directly to the server, no proxy needed.
	d->XID = ns.MAC[5];//Transaction ID is always the last number in the MAC address
	d->secs = 0;
	d->flags = 0;
	//Zero IP Addresses
	for(uint8_t i = 0; i < 4; i++)
     772:	a1 f7       	brne	.-24     	; 0x75c <dhcp_buildPacket+0x34>
     774:	e1 e3       	ldi	r30, 0x31	; 49
     776:	f3 e0       	ldi	r31, 0x03	; 3

/*! \fn void dhcp_buildPacket(uint8_t *pbuf)
 *  \brief Builds a DHCP packet WITHOUT any option codes
 *  \param pbuf  A pointer to the buffer to build the packet in. The pointer should point to the start of DHCP data.
 */
void dhcp_buildPacket(uint8_t *pbuf)
     778:	de 01       	movw	r26, r28
     77a:	aa 5b       	subi	r26, 0xBA	; 186
     77c:	bf 4f       	sbci	r27, 0xFF	; 255
     77e:	cf 01       	movw	r24, r30
     780:	06 96       	adiw	r24, 0x06	; 6
		d->gatewayIP[i] = 0x00;		
	}
	//Send client MAC address
	for(uint8_t i = 0; i < 6; i++)
	{
		d->clientMAC[i] = ns.MAC[i];
     782:	21 91       	ld	r18, Z+
     784:	2d 93       	st	X+, r18
		d->yourIP[i] = 0x00;
		d->serverIP[i] = 0x00;
		d->gatewayIP[i] = 0x00;		
	}
	//Send client MAC address
	for(uint8_t i = 0; i < 6; i++)
     786:	e8 17       	cp	r30, r24
     788:	f9 07       	cpc	r31, r25
     78a:	d9 f7       	brne	.-10     	; 0x782 <dhcp_buildPacket+0x5a>

/*! \fn void dhcp_buildPacket(uint8_t *pbuf)
 *  \brief Builds a DHCP packet WITHOUT any option codes
 *  \param pbuf  A pointer to the buffer to build the packet in. The pointer should point to the start of DHCP data.
 */
void dhcp_buildPacket(uint8_t *pbuf)
     78c:	fe 01       	movw	r30, r28
     78e:	e4 5b       	subi	r30, 0xB4	; 180
     790:	ff 4f       	sbci	r31, 0xFF	; 255
     792:	8a e0       	ldi	r24, 0x0A	; 10
		d->clientMAC[i] = ns.MAC[i];
	}
	//Zero hardware address padding
	for(uint8_t i = 6; i < 16; i++)
	{
		d->clientMAC[i] = 0x00;
     794:	11 92       	st	Z+, r1
     796:	81 50       	subi	r24, 0x01	; 1
	for(uint8_t i = 0; i < 6; i++)
	{
		d->clientMAC[i] = ns.MAC[i];
	}
	//Zero hardware address padding
	for(uint8_t i = 6; i < 16; i++)
     798:	e9 f7       	brne	.-6      	; 0x794 <dhcp_buildPacket+0x6c>

/*! \fn void dhcp_buildPacket(uint8_t *pbuf)
 *  \brief Builds a DHCP packet WITHOUT any option codes
 *  \param pbuf  A pointer to the buffer to build the packet in. The pointer should point to the start of DHCP data.
 */
void dhcp_buildPacket(uint8_t *pbuf)
     79a:	fe 01       	movw	r30, r28
     79c:	ea 5a       	subi	r30, 0xAA	; 170
     79e:	ff 4f       	sbci	r31, 0xFF	; 255
     7a0:	80 e4       	ldi	r24, 0x40	; 64
		d->clientMAC[i] = 0x00;
	}
	//Zero server name
	for(uint8_t i = 0; i < 64; i++)
	{
		d->serverName[i] = 0x00;
     7a2:	11 92       	st	Z+, r1
     7a4:	81 50       	subi	r24, 0x01	; 1
	for(uint8_t i = 6; i < 16; i++)
	{
		d->clientMAC[i] = 0x00;
	}
	//Zero server name
	for(uint8_t i = 0; i < 64; i++)
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <dhcp_buildPacket+0x7a>
		d->serverName[i] = 0x00;
	}
	//Zero boot file name
	for(uint8_t i = 0; i < 128; i++)
	{
		d->bootFilename[i] = 0x00;
     7a8:	fe 01       	movw	r30, r28
     7aa:	e8 0f       	add	r30, r24
     7ac:	f1 1d       	adc	r31, r1
     7ae:	ea 56       	subi	r30, 0x6A	; 106
     7b0:	ff 4f       	sbci	r31, 0xFF	; 255
     7b2:	10 82       	st	Z, r1
	for(uint8_t i = 0; i < 64; i++)
	{
		d->serverName[i] = 0x00;
	}
	//Zero boot file name
	for(uint8_t i = 0; i < 128; i++)
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	80 38       	cpi	r24, 0x80	; 128
     7b8:	b9 f7       	brne	.-18     	; 0x7a8 <dhcp_buildPacket+0x80>
	{
		d->bootFilename[i] = 0x00;
	}
	//d->magicCookie = 0x63825363;
	d->magicCookie = 0x63538263;//The above number in little endian
     7ba:	ca 5e       	subi	r28, 0xEA	; 234
     7bc:	de 4f       	sbci	r29, 0xFE	; 254
     7be:	83 e6       	ldi	r24, 0x63	; 99
     7c0:	92 e8       	ldi	r25, 0x82	; 130
     7c2:	a3 e5       	ldi	r26, 0x53	; 83
     7c4:	b3 e6       	ldi	r27, 0x63	; 99
     7c6:	88 83       	st	Y, r24
     7c8:	99 83       	std	Y+1, r25	; 0x01
     7ca:	aa 83       	std	Y+2, r26	; 0x02
     7cc:	bb 83       	std	Y+3, r27	; 0x03
	
	ns.plength += sizeof(DHCP_Data_t);
     7ce:	80 91 4f 03 	lds	r24, 0x034F
     7d2:	90 91 50 03 	lds	r25, 0x0350
     7d6:	80 51       	subi	r24, 0x10	; 16
     7d8:	9f 4f       	sbci	r25, 0xFF	; 255
     7da:	90 93 50 03 	sts	0x0350, r25
     7de:	80 93 4f 03 	sts	0x034F, r24
	
	//OP Codes follow...
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <dhcp_sendRequest>:
	enc28j60PacketSend(ns.pbuf, ns.plength); 
}

//Documentation in header file
void dhcp_sendRequest()
{
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
	//Get the IP of the DHCP server from the OFFER packet in the buffer
	ipd = (IPv4_Data)(ns.pbuf + IP_START);
     7f0:	e0 91 4b 03 	lds	r30, 0x034B
     7f4:	f0 91 4c 03 	lds	r31, 0x034C
     7f8:	cf 01       	movw	r24, r30
     7fa:	0e 96       	adiw	r24, 0x0e	; 14
     7fc:	90 93 2c 03 	sts	0x032C, r25
     800:	80 93 2b 03 	sts	0x032B, r24
	for(uint8_t i = 0; i < 4; i++)
		ns.dhcpServerIP[i] = ipd->senderIP[i];
     804:	82 8d       	ldd	r24, Z+26	; 0x1a
     806:	80 93 47 03 	sts	0x0347, r24
     80a:	83 8d       	ldd	r24, Z+27	; 0x1b
     80c:	80 93 48 03 	sts	0x0348, r24
     810:	84 8d       	ldd	r24, Z+28	; 0x1c
     812:	80 93 49 03 	sts	0x0349, r24
     816:	0b e4       	ldi	r16, 0x4B	; 75
     818:	13 e0       	ldi	r17, 0x03	; 3
     81a:	85 8d       	ldd	r24, Z+29	; 0x1d
     81c:	80 93 4a 03 	sts	0x034A, r24
	
	
	//dhcpState = DHCP_STATE_REQUEST;
	//Build ethernet header
	eth_makeHeader(ns.pbuf, ns.MAC, bcastMAC, ETH_IP);
     820:	e8 01       	movw	r28, r16
     822:	6a 97       	sbiw	r28, 0x1a	; 26
     824:	cf 01       	movw	r24, r30
     826:	be 01       	movw	r22, r28
     828:	4c e0       	ldi	r20, 0x0C	; 12
     82a:	51 e0       	ldi	r21, 0x01	; 1
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	38 e0       	ldi	r19, 0x08	; 8
     830:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eth_makeHeader>
	//Build IP header
	ip_makeHeader(ns.pbuf, IP_UDP, zeroIP, bcastIP);
     834:	80 91 4b 03 	lds	r24, 0x034B
     838:	90 91 4c 03 	lds	r25, 0x034C
     83c:	61 e1       	ldi	r22, 0x11	; 17
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	42 e1       	ldi	r20, 0x12	; 18
     842:	53 e0       	ldi	r21, 0x03	; 3
     844:	22 e1       	ldi	r18, 0x12	; 18
     846:	31 e0       	ldi	r19, 0x01	; 1
     848:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ip_makeHeader>
	//Build UDP header
	udp_makeHeader(ns.pbuf, DHCP_CLIENT_PORT, DHCP_SERVER_PORT);
     84c:	80 91 4b 03 	lds	r24, 0x034B
     850:	90 91 4c 03 	lds	r25, 0x034C
     854:	64 e4       	ldi	r22, 0x44	; 68
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	43 e4       	ldi	r20, 0x43	; 67
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <udp_makeHeader>
	//Build DHCP Packet
	dhcp_buildPacket(ns.pbuf);
     860:	80 91 4b 03 	lds	r24, 0x034B
     864:	90 91 4c 03 	lds	r25, 0x034C
     868:	0e 94 94 03 	call	0x728	; 0x728 <dhcp_buildPacket>
	
	//Fill in op-codes
	uint8_t *dhcp_op = ns.pbuf+DHCP_OP_START;
     86c:	20 91 4b 03 	lds	r18, 0x034B
     870:	30 91 4c 03 	lds	r19, 0x034C
	//Set message type to DHCP_REQUEST
	dhcp_op[0] = DHCP_OP_MESSAGETYPE;
     874:	f9 01       	movw	r30, r18
     876:	e6 5e       	subi	r30, 0xE6	; 230
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	85 e3       	ldi	r24, 0x35	; 53
     87c:	80 83       	st	Z, r24
	dhcp_op[1] = 1;
     87e:	f9 01       	movw	r30, r18
     880:	e5 5e       	subi	r30, 0xE5	; 229
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 83       	st	Z, r24
	dhcp_op[2] = DHCP_STATE_REQUEST;
     888:	f9 01       	movw	r30, r18
     88a:	e4 5e       	subi	r30, 0xE4	; 228
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	90 83       	st	Z, r25
	
	dhcp_op[3] = DHCP_OP_CLIENTID;
     892:	f9 01       	movw	r30, r18
     894:	e3 5e       	subi	r30, 0xE3	; 227
     896:	fe 4f       	sbci	r31, 0xFE	; 254
     898:	9d e3       	ldi	r25, 0x3D	; 61
     89a:	90 83       	st	Z, r25
	dhcp_op[4] = 7;//Length
     89c:	f9 01       	movw	r30, r18
     89e:	e2 5e       	subi	r30, 0xE2	; 226
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	97 e0       	ldi	r25, 0x07	; 7
     8a4:	90 83       	st	Z, r25
	dhcp_op[5] = 0x01;//Hardware type: ethernet
     8a6:	f9 01       	movw	r30, r18
     8a8:	e1 5e       	subi	r30, 0xE1	; 225
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	80 83       	st	Z, r24
     8ae:	de 01       	movw	r26, r28
	
	enc28j60PacketSend(ns.pbuf, ns.plength); 
}

//Documentation in header file
void dhcp_sendRequest()
     8b0:	f9 01       	movw	r30, r18
     8b2:	e0 5e       	subi	r30, 0xE0	; 224
     8b4:	fe 4f       	sbci	r31, 0xFE	; 254
     8b6:	c8 01       	movw	r24, r16
     8b8:	44 97       	sbiw	r24, 0x14	; 20
	
	dhcp_op[3] = DHCP_OP_CLIENTID;
	dhcp_op[4] = 7;//Length
	dhcp_op[5] = 0x01;//Hardware type: ethernet
	for(uint8_t i = 0; i < 6; i++)//Copy MAC
		dhcp_op[i+6] = ns.MAC[i];
     8ba:	4d 91       	ld	r20, X+
     8bc:	41 93       	st	Z+, r20
	dhcp_op[2] = DHCP_STATE_REQUEST;
	
	dhcp_op[3] = DHCP_OP_CLIENTID;
	dhcp_op[4] = 7;//Length
	dhcp_op[5] = 0x01;//Hardware type: ethernet
	for(uint8_t i = 0; i < 6; i++)//Copy MAC
     8be:	a8 17       	cp	r26, r24
     8c0:	b9 07       	cpc	r27, r25
     8c2:	d9 f7       	brne	.-10     	; 0x8ba <dhcp_sendRequest+0xd2>
		dhcp_op[i+6] = ns.MAC[i];
	
	dhcp_op[12] = DHCP_OP_REQIPADDR;
     8c4:	f9 01       	movw	r30, r18
     8c6:	ea 5d       	subi	r30, 0xDA	; 218
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	82 e3       	ldi	r24, 0x32	; 50
     8cc:	80 83       	st	Z, r24
	dhcp_op[13] = 4;//IP Length
     8ce:	f9 01       	movw	r30, r18
     8d0:	e9 5d       	subi	r30, 0xD9	; 217
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	80 83       	st	Z, r24
	dhcp_op[14] = offeredIP[0];
     8d8:	f9 01       	movw	r30, r18
     8da:	e8 5d       	subi	r30, 0xD8	; 216
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	90 91 2d 03 	lds	r25, 0x032D
     8e2:	90 83       	st	Z, r25
	dhcp_op[15] = offeredIP[1];
     8e4:	f9 01       	movw	r30, r18
     8e6:	e7 5d       	subi	r30, 0xD7	; 215
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	90 91 2e 03 	lds	r25, 0x032E
     8ee:	90 83       	st	Z, r25
	dhcp_op[16] = offeredIP[2];
     8f0:	f9 01       	movw	r30, r18
     8f2:	e6 5d       	subi	r30, 0xD6	; 214
     8f4:	fe 4f       	sbci	r31, 0xFE	; 254
     8f6:	90 91 2f 03 	lds	r25, 0x032F
     8fa:	90 83       	st	Z, r25
	dhcp_op[17] = offeredIP[3];
     8fc:	f9 01       	movw	r30, r18
     8fe:	e5 5d       	subi	r30, 0xD5	; 213
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	90 91 30 03 	lds	r25, 0x0330
     906:	90 83       	st	Z, r25
	
	dhcp_op[18] = DHCP_OP_SERVERIP;
     908:	f9 01       	movw	r30, r18
     90a:	e4 5d       	subi	r30, 0xD4	; 212
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	96 e3       	ldi	r25, 0x36	; 54
     910:	90 83       	st	Z, r25
	dhcp_op[19] = 4;//IP Length
     912:	f9 01       	movw	r30, r18
     914:	e3 5d       	subi	r30, 0xD3	; 211
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	80 83       	st	Z, r24
	dhcp_op[20] = ns.dhcpServerIP[0];
     91a:	f9 01       	movw	r30, r18
     91c:	e2 5d       	subi	r30, 0xD2	; 210
     91e:	fe 4f       	sbci	r31, 0xFE	; 254
     920:	80 91 47 03 	lds	r24, 0x0347
     924:	80 83       	st	Z, r24
	dhcp_op[21] = ns.dhcpServerIP[1];
     926:	f9 01       	movw	r30, r18
     928:	e1 5d       	subi	r30, 0xD1	; 209
     92a:	fe 4f       	sbci	r31, 0xFE	; 254
     92c:	80 91 48 03 	lds	r24, 0x0348
     930:	80 83       	st	Z, r24
	dhcp_op[22] = ns.dhcpServerIP[2];
     932:	f9 01       	movw	r30, r18
     934:	e0 5d       	subi	r30, 0xD0	; 208
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	80 91 49 03 	lds	r24, 0x0349
     93c:	80 83       	st	Z, r24
	dhcp_op[23] = ns.dhcpServerIP[3];
     93e:	f9 01       	movw	r30, r18
     940:	ef 5c       	subi	r30, 0xCF	; 207
     942:	fe 4f       	sbci	r31, 0xFE	; 254
     944:	80 91 4a 03 	lds	r24, 0x034A
     948:	80 83       	st	Z, r24
	
	dhcp_op[24] = DHCP_OP_HOSTNAME;
     94a:	f9 01       	movw	r30, r18
     94c:	ee 5c       	subi	r30, 0xCE	; 206
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	8c e0       	ldi	r24, 0x0C	; 12
     952:	80 83       	st	Z, r24
	dhcp_op[25] = 3;//Length
     954:	f9 01       	movw	r30, r18
     956:	ed 5c       	subi	r30, 0xCD	; 205
     958:	fe 4f       	sbci	r31, 0xFE	; 254
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	80 83       	st	Z, r24
	dhcp_op[26] = 'D';
     95e:	f9 01       	movw	r30, r18
     960:	ec 5c       	subi	r30, 0xCC	; 204
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	84 e4       	ldi	r24, 0x44	; 68
     966:	80 83       	st	Z, r24
	dhcp_op[27] = 'F';
     968:	f9 01       	movw	r30, r18
     96a:	eb 5c       	subi	r30, 0xCB	; 203
     96c:	fe 4f       	sbci	r31, 0xFE	; 254
     96e:	86 e4       	ldi	r24, 0x46	; 70
     970:	80 83       	st	Z, r24
	dhcp_op[28] = ns.MAC[5];
     972:	f9 01       	movw	r30, r18
     974:	ea 5c       	subi	r30, 0xCA	; 202
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	80 91 36 03 	lds	r24, 0x0336
     97c:	80 83       	st	Z, r24
		
	dhcp_op[29] = DHCP_END;
     97e:	29 5c       	subi	r18, 0xC9	; 201
     980:	3e 4f       	sbci	r19, 0xFE	; 254
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	f9 01       	movw	r30, r18
     986:	80 83       	st	Z, r24
	ns.plength += 30;
     988:	80 91 4f 03 	lds	r24, 0x034F
     98c:	90 91 50 03 	lds	r25, 0x0350
     990:	4e 96       	adiw	r24, 0x1e	; 30
     992:	90 93 50 03 	sts	0x0350, r25
     996:	80 93 4f 03 	sts	0x034F, r24
	
	udp_setDataLength(ns.pbuf, sizeof(DHCP_Data_t)+30);
     99a:	80 91 4b 03 	lds	r24, 0x034B
     99e:	90 91 4c 03 	lds	r25, 0x034C
     9a2:	6e e0       	ldi	r22, 0x0E	; 14
     9a4:	71 e0       	ldi	r23, 0x01	; 1
     9a6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <udp_setDataLength>
	udp_computeChecksum(ns.pbuf);
     9aa:	80 91 4b 03 	lds	r24, 0x034B
     9ae:	90 91 4c 03 	lds	r25, 0x034C
     9b2:	0e 94 17 0b 	call	0x162e	; 0x162e <udp_computeChecksum>
	
	ip_setDataLength(ns.pbuf, sizeof(UDP_Data_t)+sizeof(DHCP_Data_t)+30);
     9b6:	80 91 4b 03 	lds	r24, 0x034B
     9ba:	90 91 4c 03 	lds	r25, 0x034C
     9be:	66 e1       	ldi	r22, 0x16	; 22
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	0e 94 b4 09 	call	0x1368	; 0x1368 <ip_setDataLength>
	ip_computeChecksum(ns.pbuf);
     9c6:	80 91 4b 03 	lds	r24, 0x034B
     9ca:	90 91 4c 03 	lds	r25, 0x034C
     9ce:	0e 94 c0 09 	call	0x1380	; 0x1380 <ip_computeChecksum>
	
	enc28j60PacketSend(ns.pbuf, ns.plength);
     9d2:	60 91 4f 03 	lds	r22, 0x034F
     9d6:	70 91 50 03 	lds	r23, 0x0350
     9da:	80 91 4b 03 	lds	r24, 0x034B
     9de:	90 91 4c 03 	lds	r25, 0x034C
     9e2:	0e 94 57 08 	call	0x10ae	; 0x10ae <enc28j60PacketSend>
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret

000009f0 <dhcp_handlePacket>:

//Documentation in header file
void dhcp_handlePacket()
{
	DHCP_Data d = (DHCP_Data)(ns.pbuf+DHCP_START);
     9f0:	a0 91 4b 03 	lds	r26, 0x034B
     9f4:	b0 91 4c 03 	lds	r27, 0x034C
	//	return;
	
	uint8_t i = 0, messageType = 0;
	
	//Get DHCP message type
	while(dhcp_op[i] != 0xFF)
     9f8:	fd 01       	movw	r30, r26
     9fa:	e6 5e       	subi	r30, 0xE6	; 230
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	80 81       	ld	r24, Z
     a00:	8f 3f       	cpi	r24, 0xFF	; 255
     a02:	09 f4       	brne	.+2      	; 0xa06 <dhcp_handlePacket+0x16>
     a04:	4d c0       	rjmp	.+154    	; 0xaa0 <dhcp_handlePacket+0xb0>
//Documentation in header file
void dhcp_handlePacket()
{
	DHCP_Data d = (DHCP_Data)(ns.pbuf+DHCP_START);
	
	uint8_t *dhcp_op = ns.pbuf+DHCP_START+sizeof(DHCP_Data_t);
     a06:	9f 01       	movw	r18, r30
	uint8_t i = 0, messageType = 0;
	
	//Get DHCP message type
	while(dhcp_op[i] != 0xFF)
	{
		if(dhcp_op[i] == DHCP_OP_MESSAGETYPE)
     a08:	85 33       	cpi	r24, 0x35	; 53
     a0a:	39 f0       	breq	.+14     	; 0xa1a <dhcp_handlePacket+0x2a>
	//	return;
	
	uint8_t i = 0, messageType = 0;
	
	//Get DHCP message type
	while(dhcp_op[i] != 0xFF)
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
	
	//If the transaction ID isn't the last byte of our mac then the DHCP packet isn't for us
	//if(d->XID != ns.MAC[0])
	//	return;
	
	uint8_t i = 0, messageType = 0;
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	0e c0       	rjmp	.+28     	; 0xa30 <dhcp_handlePacket+0x40>
	
	//Get DHCP message type
	while(dhcp_op[i] != 0xFF)
	{
		if(dhcp_op[i] == DHCP_OP_MESSAGETYPE)
     a14:	55 33       	cpi	r21, 0x35	; 53
     a16:	61 f4       	brne	.+24     	; 0xa30 <dhcp_handlePacket+0x40>
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <dhcp_handlePacket+0x2e>
	//	return;
	
	uint8_t i = 0, messageType = 0;
	
	//Get DHCP message type
	while(dhcp_op[i] != 0xFF)
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(dhcp_op[i] == DHCP_OP_MESSAGETYPE)
		{
			messageType = dhcp_op[i+2];
     a1e:	82 0f       	add	r24, r18
     a20:	93 1f       	adc	r25, r19
			i += dhcp_op[i+1] + 1;
		}			
	}
	
	//Handle the message depending on its type
	switch(messageType)
     a22:	fc 01       	movw	r30, r24
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	91 f0       	breq	.+36     	; 0xa4e <dhcp_handlePacket+0x5e>
     a2a:	85 30       	cpi	r24, 0x05	; 5
     a2c:	c9 f5       	brne	.+114    	; 0xaa0 <dhcp_handlePacket+0xb0>
     a2e:	25 c0       	rjmp	.+74     	; 0xa7a <dhcp_handlePacket+0x8a>
			break;
		}
		else
		{
			//Move to next op code
			i += dhcp_op[i+1] + 1;
     a30:	82 0f       	add	r24, r18
     a32:	93 1f       	adc	r25, r19
     a34:	fc 01       	movw	r30, r24
     a36:	81 81       	ldd	r24, Z+1	; 0x01
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	48 0f       	add	r20, r24
	//	return;
	
	uint8_t i = 0, messageType = 0;
	
	//Get DHCP message type
	while(dhcp_op[i] != 0xFF)
     a3c:	84 2f       	mov	r24, r20
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	f9 01       	movw	r30, r18
     a42:	e8 0f       	add	r30, r24
     a44:	f9 1f       	adc	r31, r25
     a46:	50 81       	ld	r21, Z
     a48:	5f 3f       	cpi	r21, 0xFF	; 255
     a4a:	21 f7       	brne	.-56     	; 0xa14 <dhcp_handlePacket+0x24>
     a4c:	08 95       	ret
	{
		case DHCP_STATE_OFFER:
			//Save the IP the DHCP server offered
			for(uint8_t i = 0; i < 4; i++)
			{
				offeredIP[i] = d->yourIP[i];
     a4e:	da 96       	adiw	r26, 0x3a	; 58
     a50:	8c 91       	ld	r24, X
     a52:	da 97       	sbiw	r26, 0x3a	; 58
     a54:	80 93 2d 03 	sts	0x032D, r24
     a58:	db 96       	adiw	r26, 0x3b	; 59
     a5a:	8c 91       	ld	r24, X
     a5c:	db 97       	sbiw	r26, 0x3b	; 59
     a5e:	80 93 2e 03 	sts	0x032E, r24
     a62:	dc 96       	adiw	r26, 0x3c	; 60
     a64:	8c 91       	ld	r24, X
     a66:	dc 97       	sbiw	r26, 0x3c	; 60
     a68:	80 93 2f 03 	sts	0x032F, r24
     a6c:	dd 96       	adiw	r26, 0x3d	; 61
     a6e:	8c 91       	ld	r24, X
     a70:	80 93 30 03 	sts	0x0330, r24
			}
			
			dhcp_sendRequest();
     a74:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dhcp_sendRequest>
		break;
     a78:	08 95       	ret
		
		case DHCP_STATE_ACK:
			//Set out IP as the one ack'd by the DHCP server
			for(uint8_t i = 0; i < 4; i++)
			{
				ns.IP[i] = offeredIP[i];
     a7a:	80 91 2d 03 	lds	r24, 0x032D
     a7e:	80 93 37 03 	sts	0x0337, r24
     a82:	80 91 2e 03 	lds	r24, 0x032E
     a86:	80 93 38 03 	sts	0x0338, r24
     a8a:	80 91 2f 03 	lds	r24, 0x032F
     a8e:	80 93 39 03 	sts	0x0339, r24
     a92:	80 91 30 03 	lds	r24, 0x0330
     a96:	80 93 3a 03 	sts	0x033A, r24
			}
			//Set ipAcquired flag
			ns.ipAcquired = 1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 3b 03 	sts	0x033B, r24
     aa0:	08 95       	ret

00000aa2 <dhcp_sendDiscover>:

IPv4_Data ipd;

//Documentation in header file
void dhcp_sendDiscover()
{
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
	//dhcpState = DHCP_STATE_DISCOVER;
	//Build ethernet header
	eth_makeHeader(ns.pbuf, ns.MAC, bcastMAC, ETH_IP);
     aaa:	0b e4       	ldi	r16, 0x4B	; 75
     aac:	13 e0       	ldi	r17, 0x03	; 3
     aae:	e8 01       	movw	r28, r16
     ab0:	6a 97       	sbiw	r28, 0x1a	; 26
     ab2:	80 91 4b 03 	lds	r24, 0x034B
     ab6:	90 91 4c 03 	lds	r25, 0x034C
     aba:	be 01       	movw	r22, r28
     abc:	4c e0       	ldi	r20, 0x0C	; 12
     abe:	51 e0       	ldi	r21, 0x01	; 1
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	38 e0       	ldi	r19, 0x08	; 8
     ac4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <eth_makeHeader>
	//Build IP header
	ip_makeHeader(ns.pbuf, IP_UDP, zeroIP, bcastIP);
     ac8:	80 91 4b 03 	lds	r24, 0x034B
     acc:	90 91 4c 03 	lds	r25, 0x034C
     ad0:	61 e1       	ldi	r22, 0x11	; 17
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	42 e1       	ldi	r20, 0x12	; 18
     ad6:	53 e0       	ldi	r21, 0x03	; 3
     ad8:	22 e1       	ldi	r18, 0x12	; 18
     ada:	31 e0       	ldi	r19, 0x01	; 1
     adc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <ip_makeHeader>
	//Build UDP header
	udp_makeHeader(ns.pbuf, DHCP_CLIENT_PORT, DHCP_SERVER_PORT);
     ae0:	80 91 4b 03 	lds	r24, 0x034B
     ae4:	90 91 4c 03 	lds	r25, 0x034C
     ae8:	64 e4       	ldi	r22, 0x44	; 68
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	43 e4       	ldi	r20, 0x43	; 67
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <udp_makeHeader>
	//Build DHCP Packet
	dhcp_buildPacket(ns.pbuf);
     af4:	80 91 4b 03 	lds	r24, 0x034B
     af8:	90 91 4c 03 	lds	r25, 0x034C
     afc:	0e 94 94 03 	call	0x728	; 0x728 <dhcp_buildPacket>
	
	//Fill in op-codes
	uint8_t *dhcp_op = ns.pbuf+DHCP_OP_START;
     b00:	20 91 4b 03 	lds	r18, 0x034B
     b04:	30 91 4c 03 	lds	r19, 0x034C
		//Set message type to DHCP_DISCOVER
		dhcp_op[0] = DHCP_OP_MESSAGETYPE;
     b08:	f9 01       	movw	r30, r18
     b0a:	e6 5e       	subi	r30, 0xE6	; 230
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	85 e3       	ldi	r24, 0x35	; 53
     b10:	80 83       	st	Z, r24
		dhcp_op[1] = 1;//Length
     b12:	f9 01       	movw	r30, r18
     b14:	e5 5e       	subi	r30, 0xE5	; 229
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 83       	st	Z, r24
		dhcp_op[2] = DHCP_STATE_DISCOVER;
     b1c:	f9 01       	movw	r30, r18
     b1e:	e4 5e       	subi	r30, 0xE4	; 228
     b20:	fe 4f       	sbci	r31, 0xFE	; 254
     b22:	80 83       	st	Z, r24
		
		dhcp_op[3] = DHCP_OP_CLIENTID;
     b24:	f9 01       	movw	r30, r18
     b26:	e3 5e       	subi	r30, 0xE3	; 227
     b28:	fe 4f       	sbci	r31, 0xFE	; 254
     b2a:	9d e3       	ldi	r25, 0x3D	; 61
     b2c:	90 83       	st	Z, r25
		dhcp_op[4] = 7;//Length
     b2e:	f9 01       	movw	r30, r18
     b30:	e2 5e       	subi	r30, 0xE2	; 226
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	97 e0       	ldi	r25, 0x07	; 7
     b36:	90 83       	st	Z, r25
		dhcp_op[5] = 0x01;//Hardware type: ethernet
     b38:	f9 01       	movw	r30, r18
     b3a:	e1 5e       	subi	r30, 0xE1	; 225
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 83       	st	Z, r24
     b40:	de 01       	movw	r26, r28
//uint8_t dhcpServerIP[4];

IPv4_Data ipd;

//Documentation in header file
void dhcp_sendDiscover()
     b42:	f9 01       	movw	r30, r18
     b44:	e0 5e       	subi	r30, 0xE0	; 224
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	c8 01       	movw	r24, r16
     b4a:	44 97       	sbiw	r24, 0x14	; 20
		
		dhcp_op[3] = DHCP_OP_CLIENTID;
		dhcp_op[4] = 7;//Length
		dhcp_op[5] = 0x01;//Hardware type: ethernet
		for(uint8_t i = 0; i < 6; i++)//Copy MAC
			dhcp_op[i+6] = ns.MAC[i];
     b4c:	4d 91       	ld	r20, X+
     b4e:	41 93       	st	Z+, r20
		dhcp_op[2] = DHCP_STATE_DISCOVER;
		
		dhcp_op[3] = DHCP_OP_CLIENTID;
		dhcp_op[4] = 7;//Length
		dhcp_op[5] = 0x01;//Hardware type: ethernet
		for(uint8_t i = 0; i < 6; i++)//Copy MAC
     b50:	a8 17       	cp	r26, r24
     b52:	b9 07       	cpc	r27, r25
     b54:	d9 f7       	brne	.-10     	; 0xb4c <dhcp_sendDiscover+0xaa>
		dhcp_op[12] = 192;
		dhcp_op[13] = 168;
		dhcp_op[14] = 1;
		dhcp_op[15] = IP_BASE + tileNum;
#else
		dhcp_op[12] = 0;
     b56:	f9 01       	movw	r30, r18
     b58:	ea 5d       	subi	r30, 0xDA	; 218
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	10 82       	st	Z, r1
		dhcp_op[13] = 0;
     b5e:	f9 01       	movw	r30, r18
     b60:	e9 5d       	subi	r30, 0xD9	; 217
     b62:	fe 4f       	sbci	r31, 0xFE	; 254
     b64:	10 82       	st	Z, r1
		dhcp_op[14] = 0;
     b66:	f9 01       	movw	r30, r18
     b68:	e8 5d       	subi	r30, 0xD8	; 216
     b6a:	fe 4f       	sbci	r31, 0xFE	; 254
     b6c:	10 82       	st	Z, r1
		dhcp_op[15] = 0;
     b6e:	f9 01       	movw	r30, r18
     b70:	e7 5d       	subi	r30, 0xD7	; 215
     b72:	fe 4f       	sbci	r31, 0xFE	; 254
     b74:	10 82       	st	Z, r1
#endif
			
		dhcp_op[16] = DHCP_OP_HOSTNAME;
     b76:	f9 01       	movw	r30, r18
     b78:	e6 5d       	subi	r30, 0xD6	; 214
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	8c e0       	ldi	r24, 0x0C	; 12
     b7e:	80 83       	st	Z, r24
		dhcp_op[17] = 3;//Length
     b80:	f9 01       	movw	r30, r18
     b82:	e5 5d       	subi	r30, 0xD5	; 213
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	80 83       	st	Z, r24
		dhcp_op[18] = 'D';
     b8a:	f9 01       	movw	r30, r18
     b8c:	e4 5d       	subi	r30, 0xD4	; 212
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	84 e4       	ldi	r24, 0x44	; 68
     b92:	80 83       	st	Z, r24
		dhcp_op[19] = 'F';
     b94:	f9 01       	movw	r30, r18
     b96:	e3 5d       	subi	r30, 0xD3	; 211
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	86 e4       	ldi	r24, 0x46	; 70
     b9c:	80 83       	st	Z, r24
		dhcp_op[20] = ns.MAC[5];
     b9e:	f9 01       	movw	r30, r18
     ba0:	e2 5d       	subi	r30, 0xD2	; 210
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	80 91 36 03 	lds	r24, 0x0336
     ba8:	80 83       	st	Z, r24
		
		dhcp_op[21] = DHCP_END;
     baa:	21 5d       	subi	r18, 0xD1	; 209
     bac:	3e 4f       	sbci	r19, 0xFE	; 254
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	f9 01       	movw	r30, r18
     bb2:	80 83       	st	Z, r24
		
		
	ns.plength += 22;
     bb4:	80 91 4f 03 	lds	r24, 0x034F
     bb8:	90 91 50 03 	lds	r25, 0x0350
     bbc:	46 96       	adiw	r24, 0x16	; 22
     bbe:	90 93 50 03 	sts	0x0350, r25
     bc2:	80 93 4f 03 	sts	0x034F, r24
		
	udp_setDataLength(ns.pbuf, sizeof(DHCP_Data_t)+22);
     bc6:	80 91 4b 03 	lds	r24, 0x034B
     bca:	90 91 4c 03 	lds	r25, 0x034C
     bce:	66 e0       	ldi	r22, 0x06	; 6
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <udp_setDataLength>
	udp_computeChecksum(ns.pbuf);
     bd6:	80 91 4b 03 	lds	r24, 0x034B
     bda:	90 91 4c 03 	lds	r25, 0x034C
     bde:	0e 94 17 0b 	call	0x162e	; 0x162e <udp_computeChecksum>
	
	ip_setDataLength(ns.pbuf, sizeof(UDP_Data_t)+sizeof(DHCP_Data_t)+22);
     be2:	80 91 4b 03 	lds	r24, 0x034B
     be6:	90 91 4c 03 	lds	r25, 0x034C
     bea:	6e e0       	ldi	r22, 0x0E	; 14
     bec:	71 e0       	ldi	r23, 0x01	; 1
     bee:	0e 94 b4 09 	call	0x1368	; 0x1368 <ip_setDataLength>
	ip_computeChecksum(ns.pbuf);	
     bf2:	80 91 4b 03 	lds	r24, 0x034B
     bf6:	90 91 4c 03 	lds	r25, 0x034C
     bfa:	0e 94 c0 09 	call	0x1380	; 0x1380 <ip_computeChecksum>
	
	enc28j60PacketSend(ns.pbuf, ns.plength); 
     bfe:	60 91 4f 03 	lds	r22, 0x034F
     c02:	70 91 50 03 	lds	r23, 0x0350
     c06:	80 91 4b 03 	lds	r24, 0x034B
     c0a:	90 91 4c 03 	lds	r25, 0x034C
     c0e:	0e 94 57 08 	call	0x10ae	; 0x10ae <enc28j60PacketSend>
}
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <dhcp_requestIP>:
	//OP Codes follow...
}

//Documentation in header file
uint8_t dhcp_requestIP(uint16_t timeout_ms)
{
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
	//Get a timer
	int8_t timer = timer_get();
     c32:	0e 94 84 0c 	call	0x1908	; 0x1908 <timer_get>
     c36:	08 2f       	mov	r16, r24
	timer_set(timer,timeout_ms);
     c38:	18 2f       	mov	r17, r24
     c3a:	be 01       	movw	r22, r28
     c3c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <timer_set>
	
	//Send dhcp discover packet
	dhcp_sendDiscover();
     c40:	0e 94 51 05 	call	0xaa2	; 0xaa2 <dhcp_sendDiscover>
				timer_release(timer);
				return 0;
			}				
				
		//Receive packet
		ns.plength = enc28j60PacketReceive(ns.pbuf, ns.pbuf_size);
     c44:	cb e4       	ldi	r28, 0x4B	; 75
     c46:	d3 e0       	ldi	r29, 0x03	; 3
     c48:	ee 24       	eor	r14, r14
     c4a:	ff 24       	eor	r15, r15
     c4c:	68 94       	set
     c4e:	e1 f8       	bld	r14, 1
     c50:	ec 0e       	add	r14, r28
     c52:	fd 1e       	adc	r15, r29
     c54:	cc 24       	eor	r12, r12
     c56:	dd 24       	eor	r13, r13
     c58:	68 94       	set
     c5a:	c2 f8       	bld	r12, 2
     c5c:	cc 0e       	add	r12, r28
     c5e:	dd 1e       	adc	r13, r29
		if(ns.plength > 0)
			if(getPacketType() == DHCP)
				dhcp_handlePacket();
						
	}
	while(ns.ipAcquired == 0);	
     c60:	0f 2e       	mov	r0, r31
     c62:	fb e3       	ldi	r31, 0x3B	; 59
     c64:	af 2e       	mov	r10, r31
     c66:	f3 e0       	ldi	r31, 0x03	; 3
     c68:	bf 2e       	mov	r11, r31
     c6a:	f0 2d       	mov	r31, r0
     c6c:	0a c0       	rjmp	.+20     	; 0xc82 <dhcp_requestIP+0x66>
	do
	{
		//Wait for a packet to arrive
		//If no packets arrive in time, return 0
		while(enc28j60Read(EPKTCNT) == 0)
			if(timer_check(timer) == TIMER_EXPIRED)
     c6e:	81 2f       	mov	r24, r17
     c70:	0e 94 be 0c 	call	0x197c	; 0x197c <timer_check>
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	29 f4       	brne	.+10     	; 0xc82 <dhcp_requestIP+0x66>
			{
				//Release the timer
				timer_release(timer);
     c78:	80 2f       	mov	r24, r16
     c7a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <timer_release>
				return 0;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	21 c0       	rjmp	.+66     	; 0xcc4 <dhcp_requestIP+0xa8>

	do
	{
		//Wait for a packet to arrive
		//If no packets arrive in time, return 0
		while(enc28j60Read(EPKTCNT) == 0)
     c82:	89 e3       	ldi	r24, 0x39	; 57
     c84:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
     c88:	88 23       	and	r24, r24
     c8a:	89 f3       	breq	.-30     	; 0xc6e <dhcp_requestIP+0x52>
				timer_release(timer);
				return 0;
			}				
				
		//Receive packet
		ns.plength = enc28j60PacketReceive(ns.pbuf, ns.pbuf_size);
     c8c:	f7 01       	movw	r30, r14
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	88 81       	ld	r24, Y
     c94:	99 81       	ldd	r25, Y+1	; 0x01
     c96:	0e 94 91 08 	call	0x1122	; 0x1122 <enc28j60PacketReceive>
     c9a:	f6 01       	movw	r30, r12
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
		
		//Check if packet is DHCP!
		if(ns.plength > 0)
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <dhcp_requestIP+0x96>
			if(getPacketType() == DHCP)
     ca4:	0e 94 12 0a 	call	0x1424	; 0x1424 <getPacketType>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	11 f4       	brne	.+4      	; 0xcb2 <dhcp_requestIP+0x96>
				dhcp_handlePacket();
     cae:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dhcp_handlePacket>
						
	}
	while(ns.ipAcquired == 0);	
     cb2:	f5 01       	movw	r30, r10
     cb4:	80 81       	ld	r24, Z
     cb6:	88 23       	and	r24, r24
     cb8:	21 f3       	breq	.-56     	; 0xc82 <dhcp_requestIP+0x66>
	
	//Release the timer
	timer_release(timer);	
     cba:	80 2f       	mov	r24, r16
     cbc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <timer_release>
	
	//Return success		
	return ns.ipAcquired;
     cc0:	80 91 3b 03 	lds	r24, 0x033B
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	08 95       	ret

00000cda <sendSPI>:
    //sei();
}
*/

static void sendSPI(uint8_t data) {
    SPDR = data;
     cda:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR&(1<<SPIF)));
     cdc:	0d b4       	in	r0, 0x2d	; 45
     cde:	07 fe       	sbrs	r0, 7
     ce0:	fd cf       	rjmp	.-6      	; 0xcdc <sendSPI+0x2>
}
     ce2:	08 95       	ret

00000ce4 <enc28j60SpiInit>:
void enc28j60WriteWord(uint8_t address, uint16_t data);


void enc28j60SpiInit() {
	// Initialize I/O Pins
	ENC28J60_CONTROL_CS_DDR   |= 1<<ENC28J60_CONTROL_CS_PIN;		//Output
     ce4:	22 9a       	sbi	0x04, 2	; 4
	ENC28J60_CONTROL_SCLK_DDR |= 1<<ENC28J60_CONTROL_SCLK_PIN;		//Output
     ce6:	25 9a       	sbi	0x04, 5	; 4
	ENC28J60_CONTROL_MOSI_DDR |= 1<<ENC28J60_CONTROL_MOSI_PIN;		//Output
     ce8:	23 9a       	sbi	0x04, 3	; 4
	ENC28J60_CONTROL_MISO_DDR &= ~(1<<ENC28J60_CONTROL_MISO_PIN);	//Input
     cea:	24 98       	cbi	0x04, 4	; 4
	ENC28J60_CONTROL_INT_DDR  &= ~(1<<ENC28J60_CONTROL_INT_PIN);	//Input
     cec:	53 98       	cbi	0x0a, 3	; 10
	
	//Start with the chip deselected
	DESELECT_ENC28J60;
     cee:	2a 9a       	sbi	0x05, 2	; 5
	
	//Dunno why this was here but it was
	ENC28J60_CONTROL_MOSI_PORT |= 1 << ENC28J60_CONTROL_MOSI_PIN;
     cf0:	2b 9a       	sbi	0x05, 3	; 5
	ENC28J60_CONTROL_MOSI_PORT &= ~(1 << ENC28J60_CONTROL_MOSI_PIN);
     cf2:	2b 98       	cbi	0x05, 3	; 5
	ENC28J60_CONTROL_SCLK_PORT &= ~(1 << ENC28J60_CONTROL_SCLK_PIN);
     cf4:	2d 98       	cbi	0x05, 5	; 5
    //   	digitalWrite(SPI_MOSI, HIGH);
    //   	digitalWrite(SPI_MOSI, LOW);
	//digitalWrite(SPI_SCK, LOW);
		
	
    SPCR = _BV(SPE) | _BV(MSTR);// | _BV(SPR0); Want FULL SPEED SPI
     cf6:	80 e5       	ldi	r24, 0x50	; 80
     cf8:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
     cfa:	8d b5       	in	r24, 0x2d	; 45
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	8d bd       	out	0x2d, r24	; 45
}
     d00:	08 95       	ret

00000d02 <enc28j60ReadOp>:
    while (!(SPSR&(1<<SPIF)));
}


uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
     d02:	cf 93       	push	r28
     d04:	c6 2f       	mov	r28, r22
        SELECT_ENC28J60;
     d06:	2a 98       	cbi	0x05, 2	; 5
        // issue read command
        sendSPI(op | (address & ADDR_MASK));
     d08:	96 2f       	mov	r25, r22
     d0a:	9f 71       	andi	r25, 0x1F	; 31
     d0c:	89 2b       	or	r24, r25
     d0e:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
        sendSPI(0x00);
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
        if (address & 0x80)
     d18:	cc 23       	and	r28, r28
     d1a:	1c f4       	brge	.+6      	; 0xd22 <enc28j60ReadOp+0x20>
            sendSPI(0x00);
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>

        uint8_t result = SPDR;
     d22:	8e b5       	in	r24, 0x2e	; 46
        // release CS
        DESELECT_ENC28J60;
     d24:	2a 9a       	sbi	0x05, 2	; 5
        return result;
}
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
     d2a:	cf 93       	push	r28
     d2c:	c4 2f       	mov	r28, r20
    SELECT_ENC28J60;
     d2e:	2a 98       	cbi	0x05, 2	; 5
    sendSPI(op | (address & ADDR_MASK));
     d30:	6f 71       	andi	r22, 0x1F	; 31
     d32:	86 2b       	or	r24, r22
     d34:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
    sendSPI(data);
     d38:	8c 2f       	mov	r24, r28
     d3a:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
    DESELECT_ENC28J60;
     d3e:	2a 9a       	sbi	0x05, 2	; 5
}
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <enc28j60ReadBuffer>:
 while(!enc28j60Read(ESTAT) & ESTAT_CLKRDY);
}
*/

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
     d4e:	8b 01       	movw	r16, r22
    SELECT_ENC28J60;
     d50:	2a 98       	cbi	0x05, 2	; 5
    sendSPI(ENC28J60_READ_BUF_MEM);
     d52:	8a e3       	ldi	r24, 0x3A	; 58
     d54:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
    while (len--) {
     d58:	20 97       	sbiw	r28, 0x00	; 0
     d5a:	49 f0       	breq	.+18     	; 0xd6e <enc28j60ReadBuffer+0x2a>
        sendSPI(0x00);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
        *data++ = SPDR;
     d62:	8e b5       	in	r24, 0x2e	; 46
     d64:	f8 01       	movw	r30, r16
     d66:	81 93       	st	Z+, r24
     d68:	8f 01       	movw	r16, r30
     d6a:	21 97       	sbiw	r28, 0x01	; 1

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
    SELECT_ENC28J60;
    sendSPI(ENC28J60_READ_BUF_MEM);
    while (len--) {
     d6c:	b9 f7       	brne	.-18     	; 0xd5c <enc28j60ReadBuffer+0x18>
        sendSPI(0x00);
        *data++ = SPDR;
    }
    DESELECT_ENC28J60;
     d6e:	2a 9a       	sbi	0x05, 2	; 5
    // Remove next line suggested by user epam - not needed
//    *data='\0';
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <enc28j60ReadBufferWord>:

static uint16_t enc28j60ReadBufferWord() {
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <enc28j60ReadBufferWord+0x6>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
    uint16_t result;
    enc28j60ReadBuffer(2, (uint8_t*) &result);
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	be 01       	movw	r22, r28
     d8a:	6f 5f       	subi	r22, 0xFF	; 255
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	0e 94 a2 06 	call	0xd44	; 0xd44 <enc28j60ReadBuffer>
    return result;
}
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <enc28j60WriteBuffer>:


void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ec 01       	movw	r28, r24
     daa:	8b 01       	movw	r16, r22
    SELECT_ENC28J60;
     dac:	2a 98       	cbi	0x05, 2	; 5
    sendSPI(ENC28J60_WRITE_BUF_MEM);
     dae:	8a e7       	ldi	r24, 0x7A	; 122
     db0:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
    while (len--)
     db4:	20 97       	sbiw	r28, 0x00	; 0
     db6:	39 f0       	breq	.+14     	; 0xdc6 <enc28j60WriteBuffer+0x26>
        sendSPI(*data++);
     db8:	f8 01       	movw	r30, r16
     dba:	81 91       	ld	r24, Z+
     dbc:	8f 01       	movw	r16, r30
     dbe:	0e 94 6d 06 	call	0xcda	; 0xcda <sendSPI>
     dc2:	21 97       	sbiw	r28, 0x01	; 1

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
    SELECT_ENC28J60;
    sendSPI(ENC28J60_WRITE_BUF_MEM);
    while (len--)
     dc4:	c9 f7       	brne	.-14     	; 0xdb8 <enc28j60WriteBuffer+0x18>
        sendSPI(*data++);

    DESELECT_ENC28J60;
     dc6:	2a 9a       	sbi	0x05, 2	; 5
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     dd2:	cf 93       	push	r28
     dd4:	c8 2f       	mov	r28, r24
    if ((address & BANK_MASK) != Enc28j60Bank) {
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	20 76       	andi	r18, 0x60	; 96
     ddc:	30 70       	andi	r19, 0x00	; 0
     dde:	80 91 11 03 	lds	r24, 0x0311
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	28 17       	cp	r18, r24
     de6:	39 07       	cpc	r19, r25
     de8:	81 f0       	breq	.+32     	; 0xe0a <enc28j60SetBank+0x38>
        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     dea:	80 ea       	ldi	r24, 0xA0	; 160
     dec:	6f e1       	ldi	r22, 0x1F	; 31
     dee:	43 e0       	ldi	r20, 0x03	; 3
     df0:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
        Enc28j60Bank = address & BANK_MASK;
     df4:	c0 76       	andi	r28, 0x60	; 96
     df6:	c0 93 11 03 	sts	0x0311, r28
        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     dfa:	4c 2f       	mov	r20, r28
     dfc:	42 95       	swap	r20
     dfe:	46 95       	lsr	r20
     e00:	47 70       	andi	r20, 0x07	; 7
     e02:	80 e8       	ldi	r24, 0x80	; 128
     e04:	6f e1       	ldi	r22, 0x1F	; 31
     e06:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
    }
}
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
     e0e:	cf 93       	push	r28
     e10:	c8 2f       	mov	r28, r24
    // set the bank
    enc28j60SetBank(address);
     e12:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <enc28j60SetBank>
    // do the read
    return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	6c 2f       	mov	r22, r28
     e1a:	0e 94 81 06 	call	0xd02	; 0xd02 <enc28j60ReadOp>
}
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <enc28j60Write>:
	return (enc28j60Read(MIRDH));
}


void enc28j60Write(uint8_t address, uint8_t data)
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	c8 2f       	mov	r28, r24
     e28:	d6 2f       	mov	r29, r22
        // set the bank
        enc28j60SetBank(address);
     e2a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     e2e:	80 e4       	ldi	r24, 0x40	; 64
     e30:	6c 2f       	mov	r22, r28
     e32:	4d 2f       	mov	r20, r29
     e34:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <enc28j60PhyReadH>:
    enc28j60Write(address + 1, data >> 8);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     e3e:	68 2f       	mov	r22, r24
	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     e40:	84 ed       	ldi	r24, 0xD4	; 212
     e42:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     e46:	82 ed       	ldi	r24, 0xD2	; 210
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        delay_us(15);
     e4e:	6f e0       	ldi	r22, 0x0F	; 15
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 35 01 	call	0x26a	; 0x26a <delay_us>

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     e5a:	8a ee       	ldi	r24, 0xEA	; 234
     e5c:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
     e60:	80 fd       	sbrc	r24, 0
     e62:	fb cf       	rjmp	.-10     	; 0xe5a <enc28j60PhyReadH+0x1c>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     e64:	82 ed       	ldi	r24, 0xD2	; 210
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     e6c:	89 ed       	ldi	r24, 0xD9	; 217
     e6e:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
}
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	08 95       	ret

00000e76 <enc28j60WriteWord>:
    enc28j60SetBank(address);
    // do the read
    return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

void enc28j60WriteWord(uint8_t address, uint16_t data) {
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	c8 2f       	mov	r28, r24
     e7c:	d7 2f       	mov	r29, r23
    enc28j60Write(address, data & 0xff);
     e7e:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
    enc28j60Write(address + 1, data >> 8);
     e82:	8c 2f       	mov	r24, r28
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	6d 2f       	mov	r22, r29
     e88:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <enc28j60PhyWrite>:
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}


void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	98 2f       	mov	r25, r24
     e98:	d6 2f       	mov	r29, r22
     e9a:	c7 2f       	mov	r28, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     e9c:	84 ed       	ldi	r24, 0xD4	; 212
     e9e:	69 2f       	mov	r22, r25
     ea0:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     ea4:	86 ed       	ldi	r24, 0xD6	; 214
     ea6:	6d 2f       	mov	r22, r29
     ea8:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     eac:	87 ed       	ldi	r24, 0xD7	; 215
     eae:	6c 2f       	mov	r22, r28
     eb0:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <enc28j60PhyWrite+0x30>
                delay_us(15);
     eb6:	6f e0       	ldi	r22, 0x0F	; 15
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 35 01 	call	0x26a	; 0x26a <delay_us>
        enc28j60Write(MIREGADR, address);
        // write the PHY data
        enc28j60Write(MIWRL, data);
        enc28j60Write(MIWRH, data>>8);
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     ec2:	8a ee       	ldi	r24, 0xEA	; 234
     ec4:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
     ec8:	80 fd       	sbrc	r24, 0
     eca:	f5 cf       	rjmp	.-22     	; 0xeb6 <enc28j60PhyWrite+0x24>
                delay_us(15);
        }
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <enc28j60clkout>:
}
*/
void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     ed2:	68 2f       	mov	r22, r24
     ed4:	67 70       	andi	r22, 0x07	; 7
     ed6:	85 e7       	ldi	r24, 0x75	; 117
     ed8:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
}
     edc:	08 95       	ret

00000ede <init_enc28j60>:
    SPSR |= _BV(SPI2X);
}


void init_enc28j60(uint8_t* macaddr)
{
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
	//encFlags = 0;
	// initialize I/O
	enc28j60SpiInit();
     ee4:	0e 94 72 06 	call	0xce4	; 0xce4 <enc28j60SpiInit>

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	4f ef       	ldi	r20, 0xFF	; 255
     eee:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
	delay_ms(50);
     ef2:	62 e3       	ldi	r22, 0x32	; 50
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
	
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     efe:	10 92 0f 03 	sts	0x030F, r1
     f02:	10 92 0e 03 	sts	0x030E, r1
        // Rx start
	enc28j60WriteWord(ERXSTL, RXSTART_INIT);
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	// set receive pointer address
	enc28j60WriteWord(ERXRDPTL, RXSTART_INIT);
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	// RX end
	enc28j60WriteWord(ERXNDL, RXSTOP_INIT);
     f1a:	8a e0       	ldi	r24, 0x0A	; 10
     f1c:	6e ef       	ldi	r22, 0xFE	; 254
     f1e:	79 e1       	ldi	r23, 0x19	; 25
     f20:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	// TX start
	enc28j60WriteWord(ETXSTL, TXSTART_INIT);
     f24:	84 e0       	ldi	r24, 0x04	; 4
     f26:	6f ef       	ldi	r22, 0xFF	; 255
     f28:	79 e1       	ldi	r23, 0x19	; 25
     f2a:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	// TX end
	enc28j60WriteWord(ETXNDL, TXSTOP_INIT);
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	6f ef       	ldi	r22, 0xFF	; 255
     f32:	7f e1       	ldi	r23, 0x1F	; 31
     f34:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	//enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
	
	//OR Mode:      Unicast, Correct CRC, Pattern-Match, Multicast, Broadcast
    //erxfcon =  ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_MCEN|ERXFCON_BCEN;
	//OR Mode:      Unicast, Broadcast, Correct CRC
	erxfcon =  ERXFCON_UCEN|ERXFCON_BCEN|ERXFCON_CRCEN;
     f38:	81 ea       	ldi	r24, 0xA1	; 161
     f3a:	80 93 10 03 	sts	0x0310, r24
	enc28j60Write(ERXFCON, erxfcon );
     f3e:	88 e3       	ldi	r24, 0x38	; 56
     f40:	61 ea       	ldi	r22, 0xA1	; 161
     f42:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
	enc28j60WriteWord(EPMM0, 0x303f);
     f46:	88 e2       	ldi	r24, 0x28	; 40
     f48:	6f e3       	ldi	r22, 0x3F	; 63
     f4a:	70 e3       	ldi	r23, 0x30	; 48
     f4c:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	enc28j60WriteWord(EPMCSL, 0xf7f9);
     f50:	80 e3       	ldi	r24, 0x30	; 48
     f52:	69 ef       	ldi	r22, 0xF9	; 249
     f54:	77 ef       	ldi	r23, 0xF7	; 247
     f56:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
    
	
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	6d e0       	ldi	r22, 0x0D	; 13
     f5e:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     f62:	81 ec       	ldi	r24, 0xC1	; 193
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);  //|MACON3_FULDPX);
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	62 ec       	ldi	r22, 0xC2	; 194
     f6e:	42 e3       	ldi	r20, 0x32	; 50
     f70:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60WriteWord(MAIPGL, 0x0C12);
     f74:	86 ec       	ldi	r24, 0xC6	; 198
     f76:	62 e1       	ldi	r22, 0x12	; 18
     f78:	7c e0       	ldi	r23, 0x0C	; 12
     f7a:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     f7e:	84 ec       	ldi	r24, 0xC4	; 196
     f80:	62 e1       	ldi	r22, 0x12	; 18
     f82:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60WriteWord(MAMXFLL, MAX_FRAMELEN);
     f86:	8a ec       	ldi	r24, 0xCA	; 202
     f88:	6e ee       	ldi	r22, 0xEE	; 238
     f8a:	75 e0       	ldi	r23, 0x05	; 5
     f8c:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	
		
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     f90:	84 ee       	ldi	r24, 0xE4	; 228
     f92:	68 81       	ld	r22, Y
     f94:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     f98:	85 ee       	ldi	r24, 0xE5	; 229
     f9a:	69 81       	ldd	r22, Y+1	; 0x01
     f9c:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     fa0:	82 ee       	ldi	r24, 0xE2	; 226
     fa2:	6a 81       	ldd	r22, Y+2	; 0x02
     fa4:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     fa8:	83 ee       	ldi	r24, 0xE3	; 227
     faa:	6b 81       	ldd	r22, Y+3	; 0x03
     fac:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     fb0:	80 ee       	ldi	r24, 0xE0	; 224
     fb2:	6c 81       	ldd	r22, Y+4	; 0x04
     fb4:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     fb8:	81 ee       	ldi	r24, 0xE1	; 225
     fba:	6d 81       	ldd	r22, Y+5	; 0x05
     fbc:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     fc0:	80 e1       	ldi	r24, 0x10	; 16
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	71 e0       	ldi	r23, 0x01	; 1
     fc6:	0e 94 49 07 	call	0xe92	; 0xe92 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     fca:	8f e1       	ldi	r24, 0x1F	; 31
     fcc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	6b e1       	ldi	r22, 0x1B	; 27
     fd4:	40 ec       	ldi	r20, 0xC0	; 192
     fd6:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     fda:	80 e8       	ldi	r24, 0x80	; 128
     fdc:	6f e1       	ldi	r22, 0x1F	; 31
     fde:	44 e0       	ldi	r20, 0x04	; 4
     fe0:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
	
	
	
	enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	0e 94 69 07 	call	0xed2	; 0xed2 <enc28j60clkout>
	delay_ms(10);
     fea:	6a e0       	ldi	r22, 0x0A	; 10
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
     ff6:	c3 e0       	ldi	r28, 0x03	; 3
     ff8:	d0 e0       	ldi	r29, 0x00	; 0

	for( int f=0; f<3; f++ ) {
		// 0x880 is PHLCON LEDB=on, LEDA=on
		// enc28j60PhyWrite(PHLCON,0b0011 1000 1000 00 00);
		enc28j60PhyWrite(PHLCON,0x3880);
     ffa:	84 e1       	ldi	r24, 0x14	; 20
     ffc:	60 e8       	ldi	r22, 0x80	; 128
     ffe:	78 e3       	ldi	r23, 0x38	; 56
    1000:	0e 94 49 07 	call	0xe92	; 0xe92 <enc28j60PhyWrite>
		delay_ms(500);
    1004:	64 ef       	ldi	r22, 0xF4	; 244
    1006:	71 e0       	ldi	r23, 0x01	; 1
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>

		// 0x990 is PHLCON LEDB=off, LEDA=off
		// enc28j60PhyWrite(PHLCON,0b0011 1001 1001 00 00);
		enc28j60PhyWrite(PHLCON,0x3990);
    1010:	84 e1       	ldi	r24, 0x14	; 20
    1012:	60 e9       	ldi	r22, 0x90	; 144
    1014:	79 e3       	ldi	r23, 0x39	; 57
    1016:	0e 94 49 07 	call	0xe92	; 0xe92 <enc28j60PhyWrite>
		delay_ms(500);
    101a:	64 ef       	ldi	r22, 0xF4	; 244
    101c:	71 e0       	ldi	r23, 0x01	; 1
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
    1026:	21 97       	sbiw	r28, 0x01	; 1
	
	
	enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
	delay_ms(10);

	for( int f=0; f<3; f++ ) {
    1028:	41 f7       	brne	.-48     	; 0xffa <init_enc28j60+0x11c>
		delay_ms(500);
	}

	// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	// enc28j60PhyWrite(PHLCON,0b0011 0100 0111 01 10);
	enc28j60PhyWrite(PHLCON,0x3476);
    102a:	84 e1       	ldi	r24, 0x14	; 20
    102c:	66 e7       	ldi	r22, 0x76	; 118
    102e:	74 e3       	ldi	r23, 0x34	; 52
    1030:	0e 94 49 07 	call	0xe92	; 0xe92 <enc28j60PhyWrite>
	delay_ms(100);
    1034:	64 e6       	ldi	r22, 0x64	; 100
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
        uint8_t rev;
        rev=enc28j60Read(EREVID);
    1046:	82 e7       	ldi	r24, 0x72	; 114
    1048:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
        // microchip forgot to step the number on the silicon when they
        // released the revision B7. 6 is now rev B7. We still have
        // to see what they do when they release B8. At the moment
        // there is no B8
        if (rev>5) rev++;
    104c:	86 30       	cpi	r24, 0x06	; 6
    104e:	08 f0       	brcs	.+2      	; 0x1052 <enc28j60getrev+0xc>
    1050:	8f 5f       	subi	r24, 0xFF	; 255
	return(rev);
}
    1052:	08 95       	ret

00001054 <enc28j60EnableBroadcast>:

// A number of utility functions to enable/disable broadcast and multicast bits
void enc28j60EnableBroadcast( void ) {
	erxfcon |= ERXFCON_BCEN;
    1054:	60 91 10 03 	lds	r22, 0x0310
    1058:	61 60       	ori	r22, 0x01	; 1
    105a:	60 93 10 03 	sts	0x0310, r22
	enc28j60Write(ERXFCON, erxfcon);
    105e:	88 e3       	ldi	r24, 0x38	; 56
    1060:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
}
    1064:	08 95       	ret

00001066 <enc28j60DisableBroadcast>:

void enc28j60DisableBroadcast( void ) {
	erxfcon &= (0xff ^ ERXFCON_BCEN);
    1066:	60 91 10 03 	lds	r22, 0x0310
    106a:	6e 7f       	andi	r22, 0xFE	; 254
    106c:	60 93 10 03 	sts	0x0310, r22
	enc28j60Write(ERXFCON, erxfcon);
    1070:	88 e3       	ldi	r24, 0x38	; 56
    1072:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
}
    1076:	08 95       	ret

00001078 <enc28j60EnableMulticast>:

void enc28j60EnableMulticast( void ) {
	erxfcon |= ERXFCON_MCEN;
    1078:	60 91 10 03 	lds	r22, 0x0310
    107c:	62 60       	ori	r22, 0x02	; 2
    107e:	60 93 10 03 	sts	0x0310, r22
	enc28j60Write(ERXFCON, erxfcon);
    1082:	88 e3       	ldi	r24, 0x38	; 56
    1084:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
}
    1088:	08 95       	ret

0000108a <enc28j60DisableMulticast>:

void enc28j60DisableMulticast( void ) {
	erxfcon &= (0xff ^ ERXFCON_MCEN);
    108a:	60 91 10 03 	lds	r22, 0x0310
    108e:	6d 7f       	andi	r22, 0xFD	; 253
    1090:	60 93 10 03 	sts	0x0310, r22
	enc28j60Write(ERXFCON, erxfcon);
    1094:	88 e3       	ldi	r24, 0x38	; 56
    1096:	0e 94 11 07 	call	0xe22	; 0xe22 <enc28j60Write>
}
    109a:	08 95       	ret

0000109c <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
     // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
    109c:	81 e1       	ldi	r24, 0x11	; 17
    109e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <enc28j60PhyReadH>
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	09 f4       	brne	.+2      	; 0x10aa <enc28j60linkup+0xe>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
}
    10aa:	82 2f       	mov	r24, r18
    10ac:	08 95       	ret

000010ae <enc28j60PacketSend>:

void enc28j60PacketSend(uint8_t* packet, uint16_t len)
{
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	8c 01       	movw	r16, r24
    10b8:	eb 01       	movw	r28, r22

    // Check no transmit in progress
    while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <enc28j60PacketSend+0x2c>
    {
            // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
            if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
    10bc:	8c e1       	ldi	r24, 0x1C	; 28
    10be:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
    10c2:	81 ff       	sbrs	r24, 1
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <enc28j60PacketSend+0x2c>
                    enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
    10c6:	80 e8       	ldi	r24, 0x80	; 128
    10c8:	6f e1       	ldi	r22, 0x1F	; 31
    10ca:	40 e8       	ldi	r20, 0x80	; 128
    10cc:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
                    enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
    10d0:	80 ea       	ldi	r24, 0xA0	; 160
    10d2:	6f e1       	ldi	r22, 0x1F	; 31
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>

void enc28j60PacketSend(uint8_t* packet, uint16_t len)
{

    // Check no transmit in progress
    while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	6f e1       	ldi	r22, 0x1F	; 31
    10de:	0e 94 81 06 	call	0xd02	; 0xd02 <enc28j60ReadOp>
    10e2:	83 fd       	sbrc	r24, 3
    10e4:	eb cf       	rjmp	.-42     	; 0x10bc <enc28j60PacketSend+0xe>
                    enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
            }
    }

	// Set the write pointer to start of transmit buffer area
	enc28j60WriteWord(EWRPTL, TXSTART_INIT);
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	6f ef       	ldi	r22, 0xFF	; 255
    10ea:	79 e1       	ldi	r23, 0x19	; 25
    10ec:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60WriteWord(ETXNDL, (TXSTART_INIT+len));
    10f0:	be 01       	movw	r22, r28
    10f2:	61 50       	subi	r22, 0x01	; 1
    10f4:	76 4e       	sbci	r23, 0xE6	; 230
    10f6:	86 e0       	ldi	r24, 0x06	; 6
    10f8:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    10fc:	8a e7       	ldi	r24, 0x7A	; 122
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
    1106:	ce 01       	movw	r24, r28
    1108:	b8 01       	movw	r22, r16
    110a:	0e 94 d0 06 	call	0xda0	; 0xda0 <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    110e:	80 e8       	ldi	r24, 0x80	; 128
    1110:	6f e1       	ldi	r22, 0x1F	; 31
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint8_t* packet, uint16_t maxlen)
{
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	7c 01       	movw	r14, r24
    1134:	eb 01       	movw	r28, r22
    uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) == 0 ){
    1136:	89 e3       	ldi	r24, 0x39	; 57
    1138:	0e 94 07 07 	call	0xe0e	; 0xe0e <enc28j60Read>
    113c:	88 23       	and	r24, r24
    113e:	f1 f1       	breq	.+124    	; 0x11bc <enc28j60PacketReceive+0x9a>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60WriteWord(ERDPTL, gNextPacketPtr);
    1140:	60 91 0e 03 	lds	r22, 0x030E
    1144:	70 91 0f 03 	lds	r23, 0x030F
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	//enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadBufferWord();
    114e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <enc28j60ReadBufferWord>
    1152:	8c 01       	movw	r16, r24
    1154:	90 93 0f 03 	sts	0x030F, r25
    1158:	80 93 0e 03 	sts	0x030E, r24
	//gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len = enc28j60ReadBufferWord() - 4;
    115c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <enc28j60ReadBufferWord>
    1160:	6c 01       	movw	r12, r24
	//len = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
        //len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadBufferWord();
    1162:	0e 94 bd 06 	call	0xd7a	; 0xd7a <enc28j60ReadBufferWord>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
    1166:	87 ff       	sbrs	r24, 7
    1168:	0d c0       	rjmp	.+26     	; 0x1184 <enc28j60PacketReceive+0x62>
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadBufferWord();
	//rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
    116a:	ce 01       	movw	r24, r28
    116c:	01 97       	sbiw	r24, 0x01	; 1
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadBufferWord();
	//gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len = enc28j60ReadBufferWord() - 4;
    116e:	e6 01       	movw	r28, r12
    1170:	24 97       	sbiw	r28, 0x04	; 4
    1172:	8c 17       	cp	r24, r28
    1174:	9d 07       	cpc	r25, r29
    1176:	08 f4       	brcc	.+2      	; 0x117a <enc28j60PacketReceive+0x58>
    1178:	ec 01       	movw	r28, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
    117a:	ce 01       	movw	r24, r28
    117c:	b7 01       	movw	r22, r14
    117e:	0e 94 a2 06 	call	0xd44	; 0xd44 <enc28j60ReadBuffer>
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <enc28j60PacketReceive+0x66>
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
    1184:	c0 e0       	ldi	r28, 0x00	; 0
    1186:	d0 e0       	ldi	r29, 0x00	; 0
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60WriteWord(ERXRDPTL, gNextPacketPtr );
    1188:	8c e0       	ldi	r24, 0x0C	; 12
    118a:	b8 01       	movw	r22, r16
    118c:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
	//enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
    1190:	01 50       	subi	r16, 0x01	; 1
    1192:	10 40       	sbci	r17, 0x00	; 0
	// This frees the memory we just read out
	enc28j60WriteWord(ERXRDPTL, gNextPacketPtr );
	//enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
    1194:	89 e1       	ldi	r24, 0x19	; 25
    1196:	0f 3f       	cpi	r16, 0xFF	; 255
    1198:	18 07       	cpc	r17, r24
    119a:	30 f0       	brcs	.+12     	; 0x11a8 <enc28j60PacketReceive+0x86>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60WriteWord(ERXRDPTL, RXSTOP_INIT);
    119c:	8c e0       	ldi	r24, 0x0C	; 12
    119e:	6e ef       	ldi	r22, 0xFE	; 254
    11a0:	79 e1       	ldi	r23, 0x19	; 25
    11a2:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <enc28j60PacketReceive+0x8e>
                //enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
                //enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
        } else {
                enc28j60WriteWord(ERXRDPTL, (gNextPacketPtr-1));
    11a8:	8c e0       	ldi	r24, 0x0C	; 12
    11aa:	b8 01       	movw	r22, r16
    11ac:	0e 94 3b 07 	call	0xe76	; 0xe76 <enc28j60WriteWord>
                //enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
                //enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    11b0:	80 e8       	ldi	r24, 0x80	; 128
    11b2:	6e e1       	ldi	r22, 0x1E	; 30
    11b4:	40 e4       	ldi	r20, 0x40	; 64
    11b6:	0e 94 95 06 	call	0xd2a	; 0xd2a <enc28j60WriteOp>
	return(len);
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <enc28j60PacketReceive+0x9e>
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) == 0 ){
		return(0);
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    11be:	d0 e0       	ldi	r29, 0x00	; 0
                //enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
    11c0:	8c 2f       	mov	r24, r28
    11c2:	9d 2f       	mov	r25, r29
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	08 95       	ret

000011d6 <eth_getPacketType>:

//Documentation in header file
ETH_PTYPE eth_getPacketType(uint8_t *pbuf)
{
	ETH_Data d = (ETH_Data)pbuf;
	return ntohs(d->ptype);
    11d6:	fc 01       	movw	r30, r24
    11d8:	84 85       	ldd	r24, Z+12	; 0x0c
    11da:	95 85       	ldd	r25, Z+13	; 0x0d
    11dc:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
}
    11e0:	08 95       	ret

000011e2 <eth_makeHeader>:

//Documentation in header file
void eth_makeHeader(uint8_t *pbuf, uint8_t *srcMAC, uint8_t *destMAC, ETH_PTYPE ptype)
{
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	8c 01       	movw	r16, r24
	ETH_Data d = (ETH_Data)pbuf;
	
	for(uint8_t i = 0; i < 6; i++)
    11f0:	e6 2e       	mov	r14, r22
    11f2:	f7 2e       	mov	r15, r23
	ETH_Data d = (ETH_Data)pbuf;
	return ntohs(d->ptype);
}

//Documentation in header file
void eth_makeHeader(uint8_t *pbuf, uint8_t *srcMAC, uint8_t *destMAC, ETH_PTYPE ptype)
    11f4:	dc 01       	movw	r26, r24
    11f6:	16 96       	adiw	r26, 0x06	; 6
{
	ETH_Data d = (ETH_Data)pbuf;
	
	for(uint8_t i = 0; i < 6; i++)
    11f8:	c4 2f       	mov	r28, r20
    11fa:	d5 2f       	mov	r29, r21
    11fc:	40 e0       	ldi	r20, 0x00	; 0
	{
		d->srcMAC[i] = srcMAC[i];
    11fe:	f7 01       	movw	r30, r14
    1200:	51 91       	ld	r21, Z+
    1202:	7f 01       	movw	r14, r30
    1204:	5d 93       	st	X+, r21
		d->destMAC[i] = destMAC[i];
    1206:	59 91       	ld	r21, Y+
    1208:	fc 01       	movw	r30, r24
    120a:	51 93       	st	Z+, r21
    120c:	cf 01       	movw	r24, r30
//Documentation in header file
void eth_makeHeader(uint8_t *pbuf, uint8_t *srcMAC, uint8_t *destMAC, ETH_PTYPE ptype)
{
	ETH_Data d = (ETH_Data)pbuf;
	
	for(uint8_t i = 0; i < 6; i++)
    120e:	4f 5f       	subi	r20, 0xFF	; 255
    1210:	46 30       	cpi	r20, 0x06	; 6
    1212:	a9 f7       	brne	.-22     	; 0x11fe <eth_makeHeader+0x1c>
	{
		d->srcMAC[i] = srcMAC[i];
		d->destMAC[i] = destMAC[i];
	}
	
	d->ptype = htons(ptype);
    1214:	c9 01       	movw	r24, r18
    1216:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
    121a:	f8 01       	movw	r30, r16
    121c:	95 87       	std	Z+13, r25	; 0x0d
    121e:	84 87       	std	Z+12, r24	; 0x0c
	
	ns.plength = sizeof(ETH_Data_t);
    1220:	8e e0       	ldi	r24, 0x0E	; 14
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	90 93 50 03 	sts	0x0350, r25
    1228:	80 93 4f 03 	sts	0x034F, r24
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	08 95       	ret

0000123a <htonl>:

#include "in.h"
#include <avr/io.h>

uint32_t htonl(uint32_t hostlong)
{
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
	return (hostlong << 24) | ((hostlong << 8) & 0x00FF0000) | ((hostlong >> 8) & 0x0000FF00) | (hostlong >> 24);
    1242:	0b 2f       	mov	r16, r27
    1244:	11 27       	eor	r17, r17
    1246:	22 27       	eor	r18, r18
    1248:	33 27       	eor	r19, r19
    124a:	78 2f       	mov	r23, r24
    124c:	66 27       	eor	r22, r22
    124e:	55 27       	eor	r21, r21
    1250:	44 27       	eor	r20, r20
    1252:	04 2b       	or	r16, r20
    1254:	15 2b       	or	r17, r21
    1256:	26 2b       	or	r18, r22
    1258:	37 2b       	or	r19, r23
    125a:	44 27       	eor	r20, r20
    125c:	58 2f       	mov	r21, r24
    125e:	69 2f       	mov	r22, r25
    1260:	7a 2f       	mov	r23, r26
    1262:	40 70       	andi	r20, 0x00	; 0
    1264:	50 70       	andi	r21, 0x00	; 0
    1266:	70 70       	andi	r23, 0x00	; 0
    1268:	04 2b       	or	r16, r20
    126a:	15 2b       	or	r17, r21
    126c:	26 2b       	or	r18, r22
    126e:	37 2b       	or	r19, r23
    1270:	89 2f       	mov	r24, r25
    1272:	9a 2f       	mov	r25, r26
    1274:	ab 2f       	mov	r26, r27
    1276:	bb 27       	eor	r27, r27
    1278:	80 70       	andi	r24, 0x00	; 0
    127a:	a0 70       	andi	r26, 0x00	; 0
    127c:	b0 70       	andi	r27, 0x00	; 0
    127e:	08 2b       	or	r16, r24
    1280:	19 2b       	or	r17, r25
    1282:	2a 2b       	or	r18, r26
    1284:	3b 2b       	or	r19, r27
}
    1286:	60 2f       	mov	r22, r16
    1288:	71 2f       	mov	r23, r17
    128a:	82 2f       	mov	r24, r18
    128c:	93 2f       	mov	r25, r19
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <htons>:

uint16_t htons(uint16_t hostshort)
{
	return (hostshort << 8) | (hostshort >> 8);
    1294:	98 27       	eor	r25, r24
    1296:	89 27       	eor	r24, r25
    1298:	98 27       	eor	r25, r24
}
    129a:	08 95       	ret

0000129c <ntohl>:

uint32_t ntohl(uint32_t netlong)
{
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
	return (netlong << 24) | ((netlong << 8) & 0x00FF0000) | ((netlong >> 8) & 0x0000FF00) | (netlong >> 24);
    12a4:	0b 2f       	mov	r16, r27
    12a6:	11 27       	eor	r17, r17
    12a8:	22 27       	eor	r18, r18
    12aa:	33 27       	eor	r19, r19
    12ac:	78 2f       	mov	r23, r24
    12ae:	66 27       	eor	r22, r22
    12b0:	55 27       	eor	r21, r21
    12b2:	44 27       	eor	r20, r20
    12b4:	04 2b       	or	r16, r20
    12b6:	15 2b       	or	r17, r21
    12b8:	26 2b       	or	r18, r22
    12ba:	37 2b       	or	r19, r23
    12bc:	44 27       	eor	r20, r20
    12be:	58 2f       	mov	r21, r24
    12c0:	69 2f       	mov	r22, r25
    12c2:	7a 2f       	mov	r23, r26
    12c4:	40 70       	andi	r20, 0x00	; 0
    12c6:	50 70       	andi	r21, 0x00	; 0
    12c8:	70 70       	andi	r23, 0x00	; 0
    12ca:	04 2b       	or	r16, r20
    12cc:	15 2b       	or	r17, r21
    12ce:	26 2b       	or	r18, r22
    12d0:	37 2b       	or	r19, r23
    12d2:	89 2f       	mov	r24, r25
    12d4:	9a 2f       	mov	r25, r26
    12d6:	ab 2f       	mov	r26, r27
    12d8:	bb 27       	eor	r27, r27
    12da:	80 70       	andi	r24, 0x00	; 0
    12dc:	a0 70       	andi	r26, 0x00	; 0
    12de:	b0 70       	andi	r27, 0x00	; 0
    12e0:	08 2b       	or	r16, r24
    12e2:	19 2b       	or	r17, r25
    12e4:	2a 2b       	or	r18, r26
    12e6:	3b 2b       	or	r19, r27
}
    12e8:	60 2f       	mov	r22, r16
    12ea:	71 2f       	mov	r23, r17
    12ec:	82 2f       	mov	r24, r18
    12ee:	93 2f       	mov	r25, r19
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <ntohs>:

uint16_t ntohs(uint16_t netshort)
{
	return (netshort << 8) | (netshort >> 8);
    12f6:	98 27       	eor	r25, r24
    12f8:	89 27       	eor	r24, r25
    12fa:	98 27       	eor	r25, r24
}
    12fc:	08 95       	ret

000012fe <ip_makeHeader>:
uint8_t zeroIP[] = {0,0,0,0};
uint8_t bcastIP[] = {255,255,255,255};

//Documentation in header file
void ip_makeHeader(uint8_t *pbuf, IP_PROTOCOL protocol, uint8_t *senderIP, uint8_t *targetIP)
{
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	8c 01       	movw	r16, r24
	IPv4_Data d = (IPv4_Data)(pbuf + IP_START);
	
	d->IPver4_Length4 = IPVER_HDRLEN;
    1308:	85 e4       	ldi	r24, 0x45	; 69
    130a:	f8 01       	movw	r30, r16
    130c:	86 87       	std	Z+14, r24	; 0x0e
	//d->IPversion = 0x5;//
	//d->hdrLength = 0x4;//Swapped, it writes it backwards for some reason
	d->typeOfService = 0x00;
    130e:	17 86       	std	Z+15, r1	; 0x0f
	d->totalLength = 0x0000; //THIS MUST BE UPDATED! (data size + 20)
    1310:	11 8a       	std	Z+17, r1	; 0x11
    1312:	10 8a       	std	Z+16, r1	; 0x10
	d->identification = 0x0000; //Since we don't want fragmentation this will be zero unless otherwise.
    1314:	13 8a       	std	Z+19, r1	; 0x13
    1316:	12 8a       	std	Z+18, r1	; 0x12
	d->flags3_offset13 = 0x0000;//No flags
    1318:	15 8a       	std	Z+21, r1	; 0x15
    131a:	14 8a       	std	Z+20, r1	; 0x14
	d->ttl = 128;
    131c:	80 e8       	ldi	r24, 0x80	; 128
    131e:	86 8b       	std	Z+22, r24	; 0x16
	d->protocol = protocol;
    1320:	67 8b       	std	Z+23, r22	; 0x17
    1322:	c4 2f       	mov	r28, r20
    1324:	d5 2f       	mov	r29, r21
    1326:	82 2f       	mov	r24, r18
    1328:	93 2f       	mov	r25, r19

uint8_t zeroIP[] = {0,0,0,0};
uint8_t bcastIP[] = {255,255,255,255};

//Documentation in header file
void ip_makeHeader(uint8_t *pbuf, IP_PROTOCOL protocol, uint8_t *senderIP, uint8_t *targetIP)
    132a:	d8 01       	movw	r26, r16
    132c:	5e 96       	adiw	r26, 0x1e	; 30
	d->totalLength = 0x0000; //THIS MUST BE UPDATED! (data size + 20)
	d->identification = 0x0000; //Since we don't want fragmentation this will be zero unless otherwise.
	d->flags3_offset13 = 0x0000;//No flags
	d->ttl = 128;
	d->protocol = protocol;
	for(uint8_t i = 0; i < 4; i++)
    132e:	20 e0       	ldi	r18, 0x00	; 0
	{
		d->senderIP[i] = senderIP[i]; //Sender IP
    1330:	39 91       	ld	r19, Y+

uint8_t zeroIP[] = {0,0,0,0};
uint8_t bcastIP[] = {255,255,255,255};

//Documentation in header file
void ip_makeHeader(uint8_t *pbuf, IP_PROTOCOL protocol, uint8_t *senderIP, uint8_t *targetIP)
    1332:	fd 01       	movw	r30, r26
    1334:	34 97       	sbiw	r30, 0x04	; 4
	d->flags3_offset13 = 0x0000;//No flags
	d->ttl = 128;
	d->protocol = protocol;
	for(uint8_t i = 0; i < 4; i++)
	{
		d->senderIP[i] = senderIP[i]; //Sender IP
    1336:	30 83       	st	Z, r19
		d->targetIP[i] = targetIP[i]; //Target IP
    1338:	fc 01       	movw	r30, r24
    133a:	31 91       	ld	r19, Z+
    133c:	cf 01       	movw	r24, r30
    133e:	3d 93       	st	X+, r19
	d->totalLength = 0x0000; //THIS MUST BE UPDATED! (data size + 20)
	d->identification = 0x0000; //Since we don't want fragmentation this will be zero unless otherwise.
	d->flags3_offset13 = 0x0000;//No flags
	d->ttl = 128;
	d->protocol = protocol;
	for(uint8_t i = 0; i < 4; i++)
    1340:	2f 5f       	subi	r18, 0xFF	; 255
    1342:	24 30       	cpi	r18, 0x04	; 4
    1344:	a9 f7       	brne	.-22     	; 0x1330 <ip_makeHeader+0x32>
	{
		d->senderIP[i] = senderIP[i]; //Sender IP
		d->targetIP[i] = targetIP[i]; //Target IP
	}
	
	d->checksum = 0x0000; //MUST BE UPDATED!
    1346:	f8 01       	movw	r30, r16
    1348:	11 8e       	std	Z+25, r1	; 0x19
    134a:	10 8e       	std	Z+24, r1	; 0x18
	
	ns.plength += sizeof(IPv4_Data_t);
    134c:	80 91 4f 03 	lds	r24, 0x034F
    1350:	90 91 50 03 	lds	r25, 0x0350
    1354:	44 96       	adiw	r24, 0x14	; 20
    1356:	90 93 50 03 	sts	0x0350, r25
    135a:	80 93 4f 03 	sts	0x034F, r24
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <ip_setDataLength>:

//Documentation in header file
void ip_setDataLength(uint8_t *pbuf, uint16_t dataLength)
{
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
    136e:	cb 01       	movw	r24, r22
	IPv4_Data d = (IPv4_Data)(pbuf + IP_START);
	
	d->totalLength = htons(dataLength + sizeof(IPv4_Data_t));
    1370:	44 96       	adiw	r24, 0x14	; 20
    1372:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
    1376:	99 8b       	std	Y+17, r25	; 0x11
    1378:	88 8b       	std	Y+16, r24	; 0x10
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <ip_computeChecksum>:

//Documentation in header file
void ip_computeChecksum(uint8_t *pbuf)
{
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	ec 01       	movw	r28, r24
	
	//Temporary 32-bit checksum starts at zero
	uint32_t checksum = 0;
	
	//Make sure checksum in pbuf is zero
	d->checksum = 0x0000;	
    1386:	19 8e       	std	Y+25, r1	; 0x19
    1388:	18 8e       	std	Y+24, r1	; 0x18

//Documentation in header file
void ip_computeChecksum(uint8_t *pbuf)
{
	IPv4_Data d = (IPv4_Data)(pbuf + IP_START);
	uint16_t *p = (uint16_t*)(pbuf + IP_START);
    138a:	fc 01       	movw	r30, r24
    138c:	3e 96       	adiw	r30, 0x0e	; 14
	
	d->totalLength = htons(dataLength + sizeof(IPv4_Data_t));
}

//Documentation in header file
void ip_computeChecksum(uint8_t *pbuf)
    138e:	9c 01       	movw	r18, r24
    1390:	2e 5d       	subi	r18, 0xDE	; 222
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
{
	IPv4_Data d = (IPv4_Data)(pbuf + IP_START);
	uint16_t *p = (uint16_t*)(pbuf + IP_START);
	
	//Temporary 32-bit checksum starts at zero
	uint32_t checksum = 0;
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	ba 01       	movw	r22, r20
	//Make sure checksum in pbuf is zero
	d->checksum = 0x0000;	
	
	//Interestingly, a little endian summation works correctly on big-endian data
	for(uint8_t i = 0; i < sizeof(IPv4_Data_t)/2; i++)
		checksum += p[i];
    139a:	81 91       	ld	r24, Z+
    139c:	91 91       	ld	r25, Z+
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	48 0f       	add	r20, r24
    13a4:	59 1f       	adc	r21, r25
    13a6:	6a 1f       	adc	r22, r26
    13a8:	7b 1f       	adc	r23, r27
	
	//Make sure checksum in pbuf is zero
	d->checksum = 0x0000;	
	
	//Interestingly, a little endian summation works correctly on big-endian data
	for(uint8_t i = 0; i < sizeof(IPv4_Data_t)/2; i++)
    13aa:	e2 17       	cp	r30, r18
    13ac:	f3 07       	cpc	r31, r19
    13ae:	a9 f7       	brne	.-22     	; 0x139a <ip_computeChecksum+0x1a>
		checksum += p[i];
	
	//Add carry bits back to checksum
	while(checksum & 0xFFFF0000)//While checksum is larger than 16 bits
    13b0:	db 01       	movw	r26, r22
    13b2:	ca 01       	movw	r24, r20
    13b4:	80 70       	andi	r24, 0x00	; 0
    13b6:	90 70       	andi	r25, 0x00	; 0
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	a1 05       	cpc	r26, r1
    13bc:	b1 05       	cpc	r27, r1
    13be:	89 f0       	breq	.+34     	; 0x13e2 <ip_computeChecksum+0x62>
		checksum = (checksum >> 16) + (checksum & 0x0000FFFF);
    13c0:	cb 01       	movw	r24, r22
    13c2:	aa 27       	eor	r26, r26
    13c4:	bb 27       	eor	r27, r27
    13c6:	60 70       	andi	r22, 0x00	; 0
    13c8:	70 70       	andi	r23, 0x00	; 0
    13ca:	48 0f       	add	r20, r24
    13cc:	59 1f       	adc	r21, r25
    13ce:	6a 1f       	adc	r22, r26
    13d0:	7b 1f       	adc	r23, r27
	//Interestingly, a little endian summation works correctly on big-endian data
	for(uint8_t i = 0; i < sizeof(IPv4_Data_t)/2; i++)
		checksum += p[i];
	
	//Add carry bits back to checksum
	while(checksum & 0xFFFF0000)//While checksum is larger than 16 bits
    13d2:	db 01       	movw	r26, r22
    13d4:	ca 01       	movw	r24, r20
    13d6:	80 70       	andi	r24, 0x00	; 0
    13d8:	90 70       	andi	r25, 0x00	; 0
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	a1 05       	cpc	r26, r1
    13de:	b1 05       	cpc	r27, r1
    13e0:	79 f7       	brne	.-34     	; 0x13c0 <ip_computeChecksum+0x40>
		checksum = (checksum >> 16) + (checksum & 0x0000FFFF);
	
	//Save checksum as 1's complement 16-bit value	
	d->checksum = ~((uint16_t)checksum);
    13e2:	40 95       	com	r20
    13e4:	50 95       	com	r21
    13e6:	59 8f       	std	Y+25, r21	; 0x19
    13e8:	48 8f       	std	Y+24, r20	; 0x18
	
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <init_net>:

//                           T    U    X    D    F    0
uint8_t EEMEM EEmac[6] = {0x54,0x55,0x58,0x44,0x46,0x30 + DF_TILENUM};

void init_net(uint8_t *pbuf, uint16_t pbuf_size)
{
    13f0:	9c 01       	movw	r18, r24
    13f2:	e1 e3       	ldi	r30, 0x31	; 49
    13f4:	f3 e0       	ldi	r31, 0x03	; 3
NET_State ns;

//                           T    U    X    D    F    0
uint8_t EEMEM EEmac[6] = {0x54,0x55,0x58,0x44,0x46,0x30 + DF_TILENUM};

void init_net(uint8_t *pbuf, uint16_t pbuf_size)
    13f6:	cf 01       	movw	r24, r30
    13f8:	80 96       	adiw	r24, 0x20	; 32
{
	//Initialize all fields to zero
	uint8_t *ptr = (uint8_t *)&ns;
	for(uint8_t i = 0; i < sizeof(NET_State); i++)
	{
		ptr[i] = 0x00;
    13fa:	11 92       	st	Z+, r1

void init_net(uint8_t *pbuf, uint16_t pbuf_size)
{
	//Initialize all fields to zero
	uint8_t *ptr = (uint8_t *)&ns;
	for(uint8_t i = 0; i < sizeof(NET_State); i++)
    13fc:	e8 17       	cp	r30, r24
    13fe:	f9 07       	cpc	r31, r25
    1400:	e1 f7       	brne	.-8      	; 0x13fa <init_net+0xa>
	{
		ptr[i] = 0x00;
	}	

	ns.pbuf = pbuf;
    1402:	30 93 4c 03 	sts	0x034C, r19
    1406:	20 93 4b 03 	sts	0x034B, r18
	ns.pbuf_size = pbuf_size;
    140a:	70 93 4e 03 	sts	0x034E, r23
    140e:	60 93 4d 03 	sts	0x034D, r22
	
	//Initialize MAC Address from EEPROM
	eeprom_read_block(&ns.MAC, &EEmac, 6);	
    1412:	81 e3       	ldi	r24, 0x31	; 49
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	46 e0       	ldi	r20, 0x06	; 6
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	0e 94 9a 13 	call	0x2734	; 0x2734 <__eerd_block_m328p>
    1422:	08 95       	ret

00001424 <getPacketType>:
uint16_t targetPort;
DHCP_Data d;

//Documentation in header file
PacketType getPacketType()
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
	//First, make sure the packet type is ethernet and the packet is for this machine
	ed = (ETH_Data)ns.pbuf;
    1428:	e0 91 4b 03 	lds	r30, 0x034B
    142c:	f0 91 4c 03 	lds	r31, 0x034C
    1430:	f0 93 5a 03 	sts	0x035A, r31
    1434:	e0 93 59 03 	sts	0x0359, r30
	
	{
		uint16_t ptype = ntohs(ed->ptype);
    1438:	84 85       	ldd	r24, Z+12	; 0x0c
    143a:	95 85       	ldd	r25, Z+13	; 0x0d
    143c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
    1440:	9c 01       	movw	r18, r24
		//Check that the ethernet protocol is either ARP or IPv4
		if((ptype != ETH_IP) && (ptype != ETH_ARP))
    1442:	88 e0       	ldi	r24, 0x08	; 8
    1444:	20 30       	cpi	r18, 0x00	; 0
    1446:	38 07       	cpc	r19, r24
    1448:	29 f0       	breq	.+10     	; 0x1454 <getPacketType+0x30>
    144a:	e8 e0       	ldi	r30, 0x08	; 8
    144c:	26 30       	cpi	r18, 0x06	; 6
    144e:	3e 07       	cpc	r19, r30
    1450:	09 f0       	breq	.+2      	; 0x1454 <getPacketType+0x30>
    1452:	a7 c0       	rjmp	.+334    	; 0x15a2 <getPacketType+0x17e>
			return Unknown;
			
	
	//Check for bcast MAC Address
	bcastm = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	80 93 56 03 	sts	0x0356, r24
    145a:	e0 91 59 03 	lds	r30, 0x0359
    145e:	f0 91 5a 03 	lds	r31, 0x035A
	for(uint8_t i = 0; i < 6; i++)
		if(ed->destMAC[i] != 0xFF)
    1462:	86 e0       	ldi	r24, 0x06	; 6
    1464:	91 91       	ld	r25, Z+
    1466:	9f 3f       	cpi	r25, 0xFF	; 255
    1468:	11 f0       	breq	.+4      	; 0x146e <getPacketType+0x4a>
			bcastm = 0;
    146a:	10 92 56 03 	sts	0x0356, r1
    146e:	81 50       	subi	r24, 0x01	; 1
			return Unknown;
			
	
	//Check for bcast MAC Address
	bcastm = 1;
	for(uint8_t i = 0; i < 6; i++)
    1470:	c9 f7       	brne	.-14     	; 0x1464 <getPacketType+0x40>
		if(ed->destMAC[i] != 0xFF)
			bcastm = 0;
			
	//Check if this packet is for our MAC
	ourm = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 93 5c 03 	sts	0x035C, r24
    1478:	a0 91 59 03 	lds	r26, 0x0359
    147c:	b0 91 5a 03 	lds	r27, 0x035A
    1480:	e1 e3       	ldi	r30, 0x31	; 49
    1482:	f3 e0       	ldi	r31, 0x03	; 3
UDP_Data u;
uint16_t targetPort;
DHCP_Data d;

//Documentation in header file
PacketType getPacketType()
    1484:	af 01       	movw	r20, r30
    1486:	cf 01       	movw	r24, r30
    1488:	06 96       	adiw	r24, 0x06	; 6
			bcastm = 0;
			
	//Check if this packet is for our MAC
	ourm = 1;
	for(uint8_t i = 0; i < 6; i++)
		if(ed->destMAC[i] != ns.MAC[i])
    148a:	7d 91       	ld	r23, X+
    148c:	61 91       	ld	r22, Z+
    148e:	76 17       	cp	r23, r22
    1490:	11 f0       	breq	.+4      	; 0x1496 <getPacketType+0x72>
			ourm = 0;
    1492:	10 92 5c 03 	sts	0x035C, r1
		if(ed->destMAC[i] != 0xFF)
			bcastm = 0;
			
	//Check if this packet is for our MAC
	ourm = 1;
	for(uint8_t i = 0; i < 6; i++)
    1496:	e8 17       	cp	r30, r24
    1498:	f9 07       	cpc	r31, r25
    149a:	b9 f7       	brne	.-18     	; 0x148a <getPacketType+0x66>
		if(ed->destMAC[i] != ns.MAC[i])
			ourm = 0;
	
	//If it isn't a broadcast and isn't for us then return Unknown
	if((bcastm | ourm)==0)
    149c:	90 91 5c 03 	lds	r25, 0x035C
    14a0:	80 91 56 03 	lds	r24, 0x0356
    14a4:	89 2b       	or	r24, r25
    14a6:	09 f4       	brne	.+2      	; 0x14aa <getPacketType+0x86>
    14a8:	7f c0       	rjmp	.+254    	; 0x15a8 <getPacketType+0x184>
		return Unknown;
	
	//Here, we have an ethernet frame that's either bcast or for us
	
	//Check for ARP
	if(ptype == ETH_ARP)
    14aa:	f8 e0       	ldi	r31, 0x08	; 8
    14ac:	26 30       	cpi	r18, 0x06	; 6
    14ae:	3f 07       	cpc	r19, r31
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <getPacketType+0x90>
    14b2:	7d c0       	rjmp	.+250    	; 0x15ae <getPacketType+0x18a>
		return ARP;
	}	
	
	//At this point, there should be an IPv4 header if it is a packet we can handle
	ip = (IPv4_Data)(ns.pbuf + sizeof(ETH_Data_t));
    14b4:	20 91 4b 03 	lds	r18, 0x034B
    14b8:	30 91 4c 03 	lds	r19, 0x034C
    14bc:	c9 01       	movw	r24, r18
    14be:	0e 96       	adiw	r24, 0x0e	; 14
    14c0:	90 93 52 03 	sts	0x0352, r25
    14c4:	80 93 51 03 	sts	0x0351, r24
	

	//Check if this packet is for our IP
	myip = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 53 03 	sts	0x0353, r24
UDP_Data u;
uint16_t targetPort;
DHCP_Data d;

//Documentation in header file
PacketType getPacketType()
    14ce:	e9 01       	movw	r28, r18
    14d0:	6e 96       	adiw	r28, 0x1e	; 30
	//At this point, there should be an IPv4 header if it is a packet we can handle
	ip = (IPv4_Data)(ns.pbuf + sizeof(ETH_Data_t));
	

	//Check if this packet is for our IP
	myip = 1;
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f3 e0       	ldi	r31, 0x03	; 3
UDP_Data u;
uint16_t targetPort;
DHCP_Data d;

//Documentation in header file
PacketType getPacketType()
    14d6:	ca 01       	movw	r24, r20
    14d8:	0a 96       	adiw	r24, 0x0a	; 10
    14da:	de 01       	movw	r26, r28
    14dc:	61 e0       	ldi	r22, 0x01	; 1

	//Check if this packet is for our IP
	myip = 1;
	for(uint8_t i = 0; i < 4; i++)
		if(ip->targetIP[i] != ns.IP[i])
			myip = 0;
    14de:	70 e0       	ldi	r23, 0x00	; 0
	

	//Check if this packet is for our IP
	myip = 1;
	for(uint8_t i = 0; i < 4; i++)
		if(ip->targetIP[i] != ns.IP[i])
    14e0:	5d 91       	ld	r21, X+
    14e2:	41 91       	ld	r20, Z+
    14e4:	54 13       	cpse	r21, r20
			myip = 0;
    14e6:	67 2f       	mov	r22, r23
	ip = (IPv4_Data)(ns.pbuf + sizeof(ETH_Data_t));
	

	//Check if this packet is for our IP
	myip = 1;
	for(uint8_t i = 0; i < 4; i++)
    14e8:	e8 17       	cp	r30, r24
    14ea:	f9 07       	cpc	r31, r25
    14ec:	c9 f7       	brne	.-14     	; 0x14e0 <getPacketType+0xbc>
    14ee:	60 93 53 03 	sts	0x0353, r22
		if(ip->targetIP[i] != ns.IP[i])
			myip = 0;
	
	//Check if this packet's destination IP is broadcast
	bcastip = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	80 93 5b 03 	sts	0x035B, r24
    14f8:	41 e0       	ldi	r20, 0x01	; 1
	for(uint8_t i = 0; i < 4; i++)
    14fa:	80 e0       	ldi	r24, 0x00	; 0
		if(ip->targetIP[i] != 255)
			bcastip = 0;
    14fc:	50 e0       	ldi	r21, 0x00	; 0
			myip = 0;
	
	//Check if this packet's destination IP is broadcast
	bcastip = 1;
	for(uint8_t i = 0; i < 4; i++)
		if(ip->targetIP[i] != 255)
    14fe:	99 91       	ld	r25, Y+
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	09 f0       	breq	.+2      	; 0x1506 <getPacketType+0xe2>
			bcastip = 0;
    1504:	45 2f       	mov	r20, r21
		if(ip->targetIP[i] != ns.IP[i])
			myip = 0;
	
	//Check if this packet's destination IP is broadcast
	bcastip = 1;
	for(uint8_t i = 0; i < 4; i++)
    1506:	8f 5f       	subi	r24, 0xFF	; 255
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	c9 f7       	brne	.-14     	; 0x14fe <getPacketType+0xda>
    150c:	40 93 5b 03 	sts	0x035B, r20
	
	//At this point, we have an IP packet that is either bcast or for us
	
	
	//Check for ICMP and our IP
	if((ip->protocol == IP_ICMP) && ((myip | bcastip) > 0))
    1510:	f9 01       	movw	r30, r18
    1512:	87 89       	ldd	r24, Z+23	; 0x17
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	41 f4       	brne	.+16     	; 0x1528 <getPacketType+0x104>
    1518:	80 91 53 03 	lds	r24, 0x0353
    151c:	48 2b       	or	r20, r24
    151e:	09 f0       	breq	.+2      	; 0x1522 <getPacketType+0xfe>
    1520:	49 c0       	rjmp	.+146    	; 0x15b4 <getPacketType+0x190>
		if((targetPort == DF_PORT) && ((myip | bcastip) > 0))
			return DF;
	}

	//If the packet isn't ICMP or UDP, return Unknown
	return Unknown;	
    1522:	84 e0       	ldi	r24, 0x04	; 4
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	54 c0       	rjmp	.+168    	; 0x15d0 <getPacketType+0x1ac>
	if((ip->protocol == IP_ICMP) && ((myip | bcastip) > 0))
		return ICMP;
		
		
	//Check for UDP	 type
	if(ip->protocol == IP_UDP)
    1528:	81 31       	cpi	r24, 0x11	; 17
    152a:	09 f0       	breq	.+2      	; 0x152e <getPacketType+0x10a>
    152c:	46 c0       	rjmp	.+140    	; 0x15ba <getPacketType+0x196>
	{
		u = (UDP_Data)(ns.pbuf + sizeof(ETH_Data_t) + sizeof(IPv4_Data_t));
    152e:	c9 01       	movw	r24, r18
    1530:	82 96       	adiw	r24, 0x22	; 34
    1532:	90 93 5e 03 	sts	0x035E, r25
    1536:	80 93 5d 03 	sts	0x035D, r24
		targetPort = ntohs(u->targetPort);
    153a:	f9 01       	movw	r30, r18
    153c:	84 a1       	lds	r24, 0x44
    153e:	95 a1       	lds	r25, 0x45
    1540:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
    1544:	90 93 55 03 	sts	0x0355, r25
    1548:	80 93 54 03 	sts	0x0354, r24
		
		//If it's DHCP and for our MAC (or bcast), don't check src and dst IP's
		if(targetPort == DHCP_CLIENT_PORT)
    154c:	84 34       	cpi	r24, 0x44	; 68
    154e:	91 05       	cpc	r25, r1
    1550:	d9 f4       	brne	.+54     	; 0x1588 <getPacketType+0x164>
		{
			d = (DHCP_Data)(ns.pbuf + sizeof(ETH_Data_t) + sizeof(IPv4_Data_t) + sizeof(UDP_Data_t));
    1552:	e0 91 4b 03 	lds	r30, 0x034B
    1556:	f0 91 4c 03 	lds	r31, 0x034C
    155a:	cf 01       	movw	r24, r30
    155c:	8a 96       	adiw	r24, 0x2a	; 42
    155e:	90 93 58 03 	sts	0x0358, r25
    1562:	80 93 57 03 	sts	0x0357, r24
			//Discard DHCP packets that don't match our transaction ID
			if(d->XID == ns.MAC[5])
    1566:	80 91 36 03 	lds	r24, 0x0336
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a0 e0       	ldi	r26, 0x00	; 0
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	46 a5       	lds	r20, 0x66
    1572:	57 a5       	lds	r21, 0x67
    1574:	60 a9       	sts	0x40, r22
    1576:	71 a9       	sts	0x41, r23
    1578:	48 17       	cp	r20, r24
    157a:	59 07       	cpc	r21, r25
    157c:	6a 07       	cpc	r22, r26
    157e:	7b 07       	cpc	r23, r27
    1580:	f9 f4       	brne	.+62     	; 0x15c0 <getPacketType+0x19c>
				return DHCP;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	24 c0       	rjmp	.+72     	; 0x15d0 <getPacketType+0x1ac>
			else
				return Unknown;
		}		
		//If it's on the DF port, and has myip or bcast
		if((targetPort == DF_PORT) && ((myip | bcastip) > 0))
    1588:	f3 e5       	ldi	r31, 0x53	; 83
    158a:	89 35       	cpi	r24, 0x59	; 89
    158c:	9f 07       	cpc	r25, r31
    158e:	d9 f4       	brne	.+54     	; 0x15c6 <getPacketType+0x1a2>
    1590:	90 91 5b 03 	lds	r25, 0x035B
    1594:	80 91 53 03 	lds	r24, 0x0353
    1598:	89 2b       	or	r24, r25
    159a:	c1 f4       	brne	.+48     	; 0x15cc <getPacketType+0x1a8>
			return DF;
	}

	//If the packet isn't ICMP or UDP, return Unknown
	return Unknown;	
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	17 c0       	rjmp	.+46     	; 0x15d0 <getPacketType+0x1ac>
	
	{
		uint16_t ptype = ntohs(ed->ptype);
		//Check that the ethernet protocol is either ARP or IPv4
		if((ptype != ETH_IP) && (ptype != ETH_ARP))
			return Unknown;
    15a2:	84 e0       	ldi	r24, 0x04	; 4
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	14 c0       	rjmp	.+40     	; 0x15d0 <getPacketType+0x1ac>
		if(ed->destMAC[i] != ns.MAC[i])
			ourm = 0;
	
	//If it isn't a broadcast and isn't for us then return Unknown
	if((bcastm | ourm)==0)
		return Unknown;
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	11 c0       	rjmp	.+34     	; 0x15d0 <getPacketType+0x1ac>
	
	//Here, we have an ethernet frame that's either bcast or for us
	
	//Check for ARP
	if(ptype == ETH_ARP)
		return ARP;
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <getPacketType+0x1ac>
	//At this point, we have an IP packet that is either bcast or for us
	
	
	//Check for ICMP and our IP
	if((ip->protocol == IP_ICMP) && ((myip | bcastip) > 0))
		return ICMP;
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0b c0       	rjmp	.+22     	; 0x15d0 <getPacketType+0x1ac>
		if((targetPort == DF_PORT) && ((myip | bcastip) > 0))
			return DF;
	}

	//If the packet isn't ICMP or UDP, return Unknown
	return Unknown;	
    15ba:	84 e0       	ldi	r24, 0x04	; 4
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	08 c0       	rjmp	.+16     	; 0x15d0 <getPacketType+0x1ac>
			d = (DHCP_Data)(ns.pbuf + sizeof(ETH_Data_t) + sizeof(IPv4_Data_t) + sizeof(UDP_Data_t));
			//Discard DHCP packets that don't match our transaction ID
			if(d->XID == ns.MAC[5])
				return DHCP;
			else
				return Unknown;
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <getPacketType+0x1ac>
		if((targetPort == DF_PORT) && ((myip | bcastip) > 0))
			return DF;
	}

	//If the packet isn't ICMP or UDP, return Unknown
	return Unknown;	
    15c6:	84 e0       	ldi	r24, 0x04	; 4
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <getPacketType+0x1ac>
			else
				return Unknown;
		}		
		//If it's on the DF port, and has myip or bcast
		if((targetPort == DF_PORT) && ((myip | bcastip) > 0))
			return DF;
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	90 e0       	ldi	r25, 0x00	; 0
	}

	//If the packet isn't ICMP or UDP, return Unknown
	return Unknown;	
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <udp_makeHeader>:
#define UDP_START		sizeof(ETH_Data_t)+sizeof(IPv4_Data_t)


//Documentation in header file
void udp_makeHeader(uint8_t *pbuf, uint16_t senderPort, uint16_t targetPort)
{
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	8a 01       	movw	r16, r20
	UDP_Data d = (UDP_Data)(pbuf + UDP_START);
	
	d->senderPort = htons(senderPort);
    15e4:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
    15e8:	9b a3       	lds	r25, 0x5b
    15ea:	8a a3       	lds	r24, 0x5a
	d->targetPort = htons(targetPort);
    15ec:	c8 01       	movw	r24, r16
    15ee:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
    15f2:	9d a3       	lds	r25, 0x5d
    15f4:	8c a3       	lds	r24, 0x5c
	d->length = 0x0000;//MUST BE UPDATED!
    15f6:	1f a2       	lds	r17, 0x9f
    15f8:	1e a2       	lds	r17, 0x9e
	
	ns.plength += sizeof(UDP_Data_t);
    15fa:	80 91 4f 03 	lds	r24, 0x034F
    15fe:	90 91 50 03 	lds	r25, 0x0350
    1602:	08 96       	adiw	r24, 0x08	; 8
    1604:	90 93 50 03 	sts	0x0350, r25
    1608:	80 93 4f 03 	sts	0x034F, r24
}
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <udp_setDataLength>:

void udp_setDataLength(uint8_t *pbuf, uint16_t dataLength)
{
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	ec 01       	movw	r28, r24
    161c:	cb 01       	movw	r24, r22
	UDP_Data d = (UDP_Data)(pbuf + UDP_START);
	d->length = htons(dataLength + sizeof(UDP_Data_t));//UDP Data length includes header
    161e:	08 96       	adiw	r24, 0x08	; 8
    1620:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
    1624:	9f a3       	lds	r25, 0x5f
    1626:	8e a3       	lds	r24, 0x5e
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <udp_computeChecksum>:

void udp_computeChecksum(uint8_t *pbuf)
{
    162e:	4f 92       	push	r4
    1630:	5f 92       	push	r5
    1632:	6f 92       	push	r6
    1634:	7f 92       	push	r7
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	4c 01       	movw	r8, r24
	UDP_Data udp = (UDP_Data)(pbuf + UDP_START);
	IPv4_Data ip = (IPv4_Data)(pbuf + IP_START);
	uint16_t *p;
	uint16_t i, count, udpLen;
	udpLen = ntohs(udp->length);
    1650:	fc 01       	movw	r30, r24
    1652:	86 a1       	lds	r24, 0x46
    1654:	97 a1       	lds	r25, 0x47
    1656:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
    165a:	2c 01       	movw	r4, r24
	
	//Start with temporary 32-bit checksum at zero
	uint32_t checksum = 0;
	
	//Make sure the checksum in pbuf is zero
	udp->checksum = 0x0000;
    165c:	f4 01       	movw	r30, r8
    165e:	11 a6       	lds	r17, 0xb1
    1660:	10 a6       	lds	r17, 0xb0
	
	//Add IP source and target data
	//p is a pointer to arrays of 16-bit uints starting at the senderIP in the IP packet
	p = (uint16_t*)ip->senderIP;
    1662:	e4 01       	movw	r28, r8
    1664:	6a 96       	adiw	r28, 0x1a	; 26
	uint16_t *p;
	uint16_t i, count, udpLen;
	udpLen = ntohs(udp->length);
	
	//Start with temporary 32-bit checksum at zero
	uint32_t checksum = 0;
    1666:	cc 24       	eor	r12, r12
    1668:	dd 24       	eor	r13, r13
    166a:	76 01       	movw	r14, r12
	udp->checksum = 0x0000;
	
	//Add IP source and target data
	//p is a pointer to arrays of 16-bit uints starting at the senderIP in the IP packet
	p = (uint16_t*)ip->senderIP;
	for(i = 0; i < 4; i++)
    166c:	00 e0       	ldi	r16, 0x00	; 0
    166e:	10 e0       	ldi	r17, 0x00	; 0
		checksum += ntohs(p[i]);
    1670:	89 91       	ld	r24, Y+
    1672:	99 91       	ld	r25, Y+
    1674:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	c8 0e       	add	r12, r24
    167e:	d9 1e       	adc	r13, r25
    1680:	ea 1e       	adc	r14, r26
    1682:	fb 1e       	adc	r15, r27
	udp->checksum = 0x0000;
	
	//Add IP source and target data
	//p is a pointer to arrays of 16-bit uints starting at the senderIP in the IP packet
	p = (uint16_t*)ip->senderIP;
	for(i = 0; i < 4; i++)
    1684:	0f 5f       	subi	r16, 0xFF	; 255
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	04 30       	cpi	r16, 0x04	; 4
    168a:	11 05       	cpc	r17, r1
    168c:	89 f7       	brne	.-30     	; 0x1670 <udp_computeChecksum+0x42>
		checksum += ntohs(p[i]);
		
	//Add Protocol and the length of the packet
	checksum += ip->protocol + ntohs(udp->length);
    168e:	f4 01       	movw	r30, r8
    1690:	c7 89       	ldd	r28, Z+23	; 0x17
    1692:	d0 e0       	ldi	r29, 0x00	; 0
    1694:	86 a1       	lds	r24, 0x46
    1696:	97 a1       	lds	r25, 0x47
    1698:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
    169c:	c8 0f       	add	r28, r24
    169e:	d9 1f       	adc	r29, r25
    16a0:	ce 01       	movw	r24, r28
    16a2:	a0 e0       	ldi	r26, 0x00	; 0
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	c8 0e       	add	r12, r24
    16a8:	d9 1e       	adc	r13, r25
    16aa:	ea 1e       	adc	r14, r26
    16ac:	fb 1e       	adc	r15, r27
	
	//Make a pointer to the udp section
	p = (uint16_t*)(pbuf + UDP_START);
    16ae:	0f 2e       	mov	r0, r31
    16b0:	f2 e2       	ldi	r31, 0x22	; 34
    16b2:	6f 2e       	mov	r6, r31
    16b4:	77 24       	eor	r7, r7
    16b6:	f0 2d       	mov	r31, r0
    16b8:	68 0c       	add	r6, r8
    16ba:	79 1c       	adc	r7, r9
	
	//Sum all data within the udp packet including udp header
	//uint16_t temp;
	//uint16_t *tp;
	count = udpLen/2;
    16bc:	52 01       	movw	r10, r4
    16be:	b6 94       	lsr	r11
    16c0:	a7 94       	ror	r10
	for(i = 0; i < count; i++)
    16c2:	a1 14       	cp	r10, r1
    16c4:	b1 04       	cpc	r11, r1
    16c6:	99 f0       	breq	.+38     	; 0x16ee <udp_computeChecksum+0xc0>
    16c8:	83 01       	movw	r16, r6
    16ca:	c0 e0       	ldi	r28, 0x00	; 0
    16cc:	d0 e0       	ldi	r29, 0x00	; 0
		checksum += ntohs(p[i]);	
    16ce:	f8 01       	movw	r30, r16
    16d0:	81 91       	ld	r24, Z+
    16d2:	91 91       	ld	r25, Z+
    16d4:	8f 01       	movw	r16, r30
    16d6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	c8 0e       	add	r12, r24
    16e0:	d9 1e       	adc	r13, r25
    16e2:	ea 1e       	adc	r14, r26
    16e4:	fb 1e       	adc	r15, r27
	
	//Sum all data within the udp packet including udp header
	//uint16_t temp;
	//uint16_t *tp;
	count = udpLen/2;
	for(i = 0; i < count; i++)
    16e6:	21 96       	adiw	r28, 0x01	; 1
    16e8:	ca 15       	cp	r28, r10
    16ea:	db 05       	cpc	r29, r11
    16ec:	81 f7       	brne	.-32     	; 0x16ce <udp_computeChecksum+0xa0>
		checksum += ntohs(p[i]);	
		
	if(udpLen & 0x0001)
    16ee:	40 fe       	sbrs	r4, 0
    16f0:	11 c0       	rjmp	.+34     	; 0x1714 <udp_computeChecksum+0xe6>
		checksum += (ntohs(p[udpLen/2] & 0x00FF));
    16f2:	c5 01       	movw	r24, r10
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	86 0d       	add	r24, r6
    16fa:	97 1d       	adc	r25, r7
    16fc:	fc 01       	movw	r30, r24
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	90 70       	andi	r25, 0x00	; 0
    1704:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ntohs>
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	c8 0e       	add	r12, r24
    170e:	d9 1e       	adc	r13, r25
    1710:	ea 1e       	adc	r14, r26
    1712:	fb 1e       	adc	r15, r27
		
	//Add carry bits back to checksum
	while(checksum & 0xFFFF0000)//While checksum is larger than 16 bits
    1714:	d7 01       	movw	r26, r14
    1716:	c6 01       	movw	r24, r12
    1718:	80 70       	andi	r24, 0x00	; 0
    171a:	90 70       	andi	r25, 0x00	; 0
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	a1 05       	cpc	r26, r1
    1720:	b1 05       	cpc	r27, r1
    1722:	b9 f0       	breq	.+46     	; 0x1752 <udp_computeChecksum+0x124>
		checksum = (checksum >> 16) + (checksum & 0x0000FFFF);
    1724:	c7 01       	movw	r24, r14
    1726:	aa 27       	eor	r26, r26
    1728:	bb 27       	eor	r27, r27
    172a:	2f ef       	ldi	r18, 0xFF	; 255
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	c2 22       	and	r12, r18
    1734:	d3 22       	and	r13, r19
    1736:	e4 22       	and	r14, r20
    1738:	f5 22       	and	r15, r21
    173a:	c8 0e       	add	r12, r24
    173c:	d9 1e       	adc	r13, r25
    173e:	ea 1e       	adc	r14, r26
    1740:	fb 1e       	adc	r15, r27
		
	if(udpLen & 0x0001)
		checksum += (ntohs(p[udpLen/2] & 0x00FF));
		
	//Add carry bits back to checksum
	while(checksum & 0xFFFF0000)//While checksum is larger than 16 bits
    1742:	d7 01       	movw	r26, r14
    1744:	c6 01       	movw	r24, r12
    1746:	80 70       	andi	r24, 0x00	; 0
    1748:	90 70       	andi	r25, 0x00	; 0
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	a1 05       	cpc	r26, r1
    174e:	b1 05       	cpc	r27, r1
    1750:	49 f7       	brne	.-46     	; 0x1724 <udp_computeChecksum+0xf6>
		checksum = (checksum >> 16) + (checksum & 0x0000FFFF);
		
	//Save 1's complement of the 16-bit checksum	
	udp->checksum = htons(~((uint16_t)checksum));
    1752:	e6 01       	movw	r28, r12
    1754:	c0 95       	com	r28
    1756:	d0 95       	com	r29
    1758:	ce 01       	movw	r24, r28
    175a:	0e 94 4a 09 	call	0x1294	; 0x1294 <htons>
    175e:	f4 01       	movw	r30, r8
    1760:	91 a7       	lds	r25, 0x71
    1762:	80 a7       	lds	r24, 0x70
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	bf 90       	pop	r11
    1776:	af 90       	pop	r10
    1778:	9f 90       	pop	r9
    177a:	8f 90       	pop	r8
    177c:	7f 90       	pop	r7
    177e:	6f 90       	pop	r6
    1780:	5f 90       	pop	r5
    1782:	4f 90       	pop	r4
    1784:	08 95       	ret

00001786 <idlePattern0_ComputeFrame>:
#include "tlc5941.h"
#include <stdlib.h> //for rand()


void idlePattern0_ComputeFrame()
{
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
	int COLORS = 8;
	
	int i = rand() % 64;
    178e:	0e 94 8a 13 	call	0x2714	; 0x2714 <rand>
    1792:	ec 01       	movw	r28, r24
	
	setValue(i,rand() % 3,(rand() % COLORS) * 4096/COLORS);
    1794:	0e 94 8a 13 	call	0x2714	; 0x2714 <rand>
    1798:	8c 01       	movw	r16, r24
    179a:	0e 94 8a 13 	call	0x2714	; 0x2714 <rand>
    179e:	9c 01       	movw	r18, r24

void idlePattern0_ComputeFrame()
{
	int COLORS = 8;
	
	int i = rand() % 64;
    17a0:	ce 01       	movw	r24, r28
    17a2:	60 e4       	ldi	r22, 0x40	; 64
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodhi4>
    17aa:	c8 2f       	mov	r28, r24
	
	setValue(i,rand() % 3,(rand() % COLORS) * 4096/COLORS);
    17ac:	c8 01       	movw	r24, r16
    17ae:	63 e0       	ldi	r22, 0x03	; 3
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodhi4>
    17b6:	fc 01       	movw	r30, r24
    17b8:	c9 01       	movw	r24, r18
    17ba:	68 e0       	ldi	r22, 0x08	; 8
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodhi4>
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	58 2f       	mov	r21, r24
    17c6:	52 95       	swap	r21
    17c8:	50 7f       	andi	r21, 0xF0	; 240
    17ca:	55 23       	and	r21, r21
    17cc:	14 f4       	brge	.+4      	; 0x17d2 <idlePattern0_ComputeFrame+0x4c>
    17ce:	49 5f       	subi	r20, 0xF9	; 249
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
    17d2:	55 95       	asr	r21
    17d4:	47 95       	ror	r20
    17d6:	55 95       	asr	r21
    17d8:	47 95       	ror	r20
    17da:	55 95       	asr	r21
    17dc:	47 95       	ror	r20
    17de:	8c 2f       	mov	r24, r28
    17e0:	bf 01       	movw	r22, r30
    17e2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
	//setValue(i,GREEN,(int)((double)rand() / ((double)RAND_MAX + 1) * 4096) );
	//setValue(i,BLUE,(int)((double)rand() / ((double)RAND_MAX + 1) * 4096) );
	
	//Rand % zero probability
	
	if((rand() % 1000) < 800)
    17e6:	0e 94 8a 13 	call	0x2714	; 0x2714 <rand>
    17ea:	68 ee       	ldi	r22, 0xE8	; 232
    17ec:	73 e0       	ldi	r23, 0x03	; 3
    17ee:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodhi4>
    17f2:	23 e0       	ldi	r18, 0x03	; 3
    17f4:	80 32       	cpi	r24, 0x20	; 32
    17f6:	92 07       	cpc	r25, r18
    17f8:	dc f4       	brge	.+54     	; 0x1830 <idlePattern0_ComputeFrame+0xaa>
	{
		i = rand() % 64;
    17fa:	0e 94 8a 13 	call	0x2714	; 0x2714 <rand>
    17fe:	60 e4       	ldi	r22, 0x40	; 64
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodhi4>
    1806:	c8 2f       	mov	r28, r24
		setValue(i,RED,0);
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
		setValue(i,GREEN,0);
    1814:	8c 2f       	mov	r24, r28
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
		setValue(i,BLUE,0);
    1822:	8c 2f       	mov	r24, r28
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
	}
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	08 95       	ret

0000183a <idlePattern1_ComputeFrame>:

volatile uint8_t p2_j = 0;
enum Color_t color = RED;
void idlePattern1_ComputeFrame()
{
	setValue(p2_j,RED,0);
    183a:	80 91 18 03 	lds	r24, 0x0318
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
	setValue(p2_j,GREEN,0);
    184a:	80 91 18 03 	lds	r24, 0x0318
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
	setValue(p2_j,BLUE,0);
    185a:	80 91 18 03 	lds	r24, 0x0318
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
		
	setValue(p2_j,color,0xFFF);
    186a:	80 91 18 03 	lds	r24, 0x0318
    186e:	60 91 16 03 	lds	r22, 0x0316
    1872:	70 91 17 03 	lds	r23, 0x0317
    1876:	4f ef       	ldi	r20, 0xFF	; 255
    1878:	5f e0       	ldi	r21, 0x0F	; 15
    187a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <setValue>
	
	p2_j++;
    187e:	80 91 18 03 	lds	r24, 0x0318
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	80 93 18 03 	sts	0x0318, r24
	
	if(p2_j > 63)
    1888:	80 91 18 03 	lds	r24, 0x0318
    188c:	80 34       	cpi	r24, 0x40	; 64
    188e:	f0 f0       	brcs	.+60     	; 0x18cc <idlePattern1_ComputeFrame+0x92>
	{
		p2_j = 0;
    1890:	10 92 18 03 	sts	0x0318, r1
		switch(color)
    1894:	80 91 16 03 	lds	r24, 0x0316
    1898:	90 91 17 03 	lds	r25, 0x0317
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	79 f0       	breq	.+30     	; 0x18c0 <idlePattern1_ComputeFrame+0x86>
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	91 05       	cpc	r25, r1
    18a6:	28 f0       	brcs	.+10     	; 0x18b2 <idlePattern1_ComputeFrame+0x78>
				break;
			case GREEN:
				color = BLUE;
				break;
			case BLUE:
				color = RED;
    18a8:	10 92 17 03 	sts	0x0317, r1
    18ac:	10 92 16 03 	sts	0x0316, r1
    18b0:	08 95       	ret
	{
		p2_j = 0;
		switch(color)
		{
			case RED:
				color = GREEN;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	90 93 17 03 	sts	0x0317, r25
    18ba:	80 93 16 03 	sts	0x0316, r24
				break;
    18be:	08 95       	ret
			case GREEN:
				color = BLUE;
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	90 93 17 03 	sts	0x0317, r25
    18c8:	80 93 16 03 	sts	0x0316, r24
    18cc:	08 95       	ret

000018ce <init_timer>:
//uint8_t fractionalCount; //The number of 1/16ms to be added in every 16 counts

void init_timer()
{
	//Clear all
	ms_elapsed = 0;
    18ce:	10 92 60 03 	sts	0x0360, r1
    18d2:	10 92 5f 03 	sts	0x035F, r1
    18d6:	e1 e6       	ldi	r30, 0x61	; 97
    18d8:	f3 e0       	ldi	r31, 0x03	; 3
    18da:	a1 e8       	ldi	r26, 0x81	; 129
    18dc:	b3 e0       	ldi	r27, 0x03	; 3
//The status of the timers
int8_t timer_status[MAX_TIMERS];

//uint8_t fractionalCount; //The number of 1/16ms to be added in every 16 counts

void init_timer()
    18de:	cf 01       	movw	r24, r30
    18e0:	80 96       	adiw	r24, 0x20	; 32
	//Clear all
	ms_elapsed = 0;
	for(int i = 0; i < MAX_TIMERS; i++)
	{
		timer_values[i] = 0;
		timer_status[i] = TIMER_UNUSED;
    18e2:	2f ef       	ldi	r18, 0xFF	; 255
{
	//Clear all
	ms_elapsed = 0;
	for(int i = 0; i < MAX_TIMERS; i++)
	{
		timer_values[i] = 0;
    18e4:	11 92       	st	Z+, r1
    18e6:	11 92       	st	Z+, r1
		timer_status[i] = TIMER_UNUSED;
    18e8:	2d 93       	st	X+, r18

void init_timer()
{
	//Clear all
	ms_elapsed = 0;
	for(int i = 0; i < MAX_TIMERS; i++)
    18ea:	e8 17       	cp	r30, r24
    18ec:	f9 07       	cpc	r31, r25
    18ee:	d1 f7       	brne	.-12     	; 0x18e4 <init_timer+0x16>


	//fractionalCount = 16;
	
	//Use TIMER2 as ms counter system timer
	TCCR2A = 0x02;//No compare match output, CTC mode
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = 0x02;//Enable COMPA interrupt
    18f6:	80 93 70 00 	sts	0x0070, r24
	
	OCR2A = 195; //1ms at F_CPU/64 where F_CPU = 12.5 MHz
    18fa:	83 ec       	ldi	r24, 0xC3	; 195
    18fc:	80 93 b3 00 	sts	0x00B3, r24
	
	TCCR2B = 0x04;//Use F_CPU/64 => 3125/16 ticks/ms (enables timer)
    1900:	84 e0       	ldi	r24, 0x04	; 4
    1902:	80 93 b1 00 	sts	0x00B1, r24
}
    1906:	08 95       	ret

00001908 <timer_get>:

int8_t timer_get()
{
	for(uint8_t i = 0; i < MAX_TIMERS; i++)
		if(timer_status[i] == TIMER_UNUSED)
    1908:	80 91 81 03 	lds	r24, 0x0381
    190c:	8f 3f       	cpi	r24, 0xFF	; 255
    190e:	51 f0       	breq	.+20     	; 0x1924 <timer_get+0x1c>
    1910:	e2 e8       	ldi	r30, 0x82	; 130
    1912:	f3 e0       	ldi	r31, 0x03	; 3
    1914:	21 e0       	ldi	r18, 0x01	; 1
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	82 2f       	mov	r24, r18
    191a:	a9 01       	movw	r20, r18
    191c:	91 91       	ld	r25, Z+
    191e:	9f 3f       	cpi	r25, 0xFF	; 255
    1920:	51 f4       	brne	.+20     	; 0x1936 <timer_get+0x2e>
    1922:	03 c0       	rjmp	.+6      	; 0x192a <timer_get+0x22>
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	50 e0       	ldi	r21, 0x00	; 0
	TCCR2B = 0x04;//Use F_CPU/64 => 3125/16 ticks/ms (enables timer)
}

int8_t timer_get()
{
	for(uint8_t i = 0; i < MAX_TIMERS; i++)
    1928:	80 e0       	ldi	r24, 0x00	; 0
		if(timer_status[i] == TIMER_UNUSED)
		{
			timer_status[i] = TIMER_EXPIRED;
    192a:	4f 57       	subi	r20, 0x7F	; 127
    192c:	5c 4f       	sbci	r21, 0xFC	; 252
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	fa 01       	movw	r30, r20
    1932:	90 83       	st	Z, r25
			return i;
    1934:	08 95       	ret
    1936:	2f 5f       	subi	r18, 0xFF	; 255
    1938:	3f 4f       	sbci	r19, 0xFF	; 255
	TCCR2B = 0x04;//Use F_CPU/64 => 3125/16 ticks/ms (enables timer)
}

int8_t timer_get()
{
	for(uint8_t i = 0; i < MAX_TIMERS; i++)
    193a:	20 31       	cpi	r18, 0x10	; 16
    193c:	31 05       	cpc	r19, r1
    193e:	61 f7       	brne	.-40     	; 0x1918 <timer_get+0x10>
		{
			timer_status[i] = TIMER_EXPIRED;
			return i;
		}
	//If no timers are free
	return -1;
    1940:	8f ef       	ldi	r24, 0xFF	; 255
}
    1942:	08 95       	ret

00001944 <timer_release>:

void timer_release(int8_t timer)
{
	timer_status[timer] = TIMER_UNUSED;
    1944:	e8 2f       	mov	r30, r24
    1946:	ff 27       	eor	r31, r31
    1948:	e7 fd       	sbrc	r30, 7
    194a:	f0 95       	com	r31
    194c:	ef 57       	subi	r30, 0x7F	; 127
    194e:	fc 4f       	sbci	r31, 0xFC	; 252
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	80 83       	st	Z, r24
}
    1954:	08 95       	ret

00001956 <timer_set>:
	return ms_elapsed;
}
*/
void timer_set(uint8_t timer, TIMER_TYPE ms_delay)
{
	timer_status[timer] = TIMER_RUNNING;
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	ef 57       	subi	r30, 0x7F	; 127
    195c:	fc 4f       	sbci	r31, 0xFC	; 252
    195e:	10 82       	st	Z, r1
	timer_values[timer] = ms_elapsed + ms_delay;	
    1960:	fc 01       	movw	r30, r24
    1962:	ee 0f       	add	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	ef 59       	subi	r30, 0x9F	; 159
    1968:	fc 4f       	sbci	r31, 0xFC	; 252
    196a:	80 91 5f 03 	lds	r24, 0x035F
    196e:	90 91 60 03 	lds	r25, 0x0360
    1972:	68 0f       	add	r22, r24
    1974:	79 1f       	adc	r23, r25
    1976:	71 83       	std	Z+1, r23	; 0x01
    1978:	60 83       	st	Z, r22
}
    197a:	08 95       	ret

0000197c <timer_check>:

uint8_t timer_check(uint8_t timer)
{
	
	return timer_status[timer];
    197c:	21 e8       	ldi	r18, 0x81	; 129
    197e:	33 e0       	ldi	r19, 0x03	; 3
    1980:	28 0f       	add	r18, r24
    1982:	31 1d       	adc	r19, r1
}
    1984:	f9 01       	movw	r30, r18
    1986:	80 81       	ld	r24, Z
    1988:	08 95       	ret

0000198a <__vector_7>:


ISR(TIMER2_COMPA_vect)
{
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	11 24       	eor	r1, r1
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
	//{
		
		for(int i = 0; i < MAX_TIMERS; i++)
		{
			if(timer_status[i] == TIMER_RUNNING)
				if(ms_elapsed == timer_values[i])
    19ae:	40 91 5f 03 	lds	r20, 0x035F
    19b2:	50 91 60 03 	lds	r21, 0x0360
    19b6:	e1 e8       	ldi	r30, 0x81	; 129
    19b8:	f3 e0       	ldi	r31, 0x03	; 3
    19ba:	a1 e6       	ldi	r26, 0x61	; 97
    19bc:	b3 e0       	ldi	r27, 0x03	; 3
	
	return timer_status[timer];
}


ISR(TIMER2_COMPA_vect)
    19be:	9f 01       	movw	r18, r30
    19c0:	20 5f       	subi	r18, 0xF0	; 240
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
		
		for(int i = 0; i < MAX_TIMERS; i++)
		{
			if(timer_status[i] == TIMER_RUNNING)
				if(ms_elapsed == timer_values[i])
					timer_status[i] = TIMER_EXPIRED;
    19c4:	61 e0       	ldi	r22, 0x01	; 1
	//else
	//{
		
		for(int i = 0; i < MAX_TIMERS; i++)
		{
			if(timer_status[i] == TIMER_RUNNING)
    19c6:	80 81       	ld	r24, Z
    19c8:	88 23       	and	r24, r24
    19ca:	39 f4       	brne	.+14     	; 0x19da <__vector_7+0x50>
				if(ms_elapsed == timer_values[i])
    19cc:	8d 91       	ld	r24, X+
    19ce:	9c 91       	ld	r25, X
    19d0:	11 97       	sbiw	r26, 0x01	; 1
    19d2:	84 17       	cp	r24, r20
    19d4:	95 07       	cpc	r25, r21
    19d6:	09 f4       	brne	.+2      	; 0x19da <__vector_7+0x50>
					timer_status[i] = TIMER_EXPIRED;
    19d8:	60 83       	st	Z, r22
    19da:	31 96       	adiw	r30, 0x01	; 1
    19dc:	12 96       	adiw	r26, 0x02	; 2
	}
	*/
	//else
	//{
		
		for(int i = 0; i < MAX_TIMERS; i++)
    19de:	e2 17       	cp	r30, r18
    19e0:	f3 07       	cpc	r31, r19
    19e2:	89 f7       	brne	.-30     	; 0x19c6 <__vector_7+0x3c>
				if(ms_elapsed == timer_values[i])
					timer_status[i] = TIMER_EXPIRED;
		}
		

		ms_elapsed++;
    19e4:	80 91 5f 03 	lds	r24, 0x035F
    19e8:	90 91 60 03 	lds	r25, 0x0360
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	90 93 60 03 	sts	0x0360, r25
    19f2:	80 93 5f 03 	sts	0x035F, r24
	//}
}
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	bf 91       	pop	r27
    1a00:	af 91       	pop	r26
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	6f 91       	pop	r22
    1a08:	5f 91       	pop	r21
    1a0a:	4f 91       	pop	r20
    1a0c:	3f 91       	pop	r19
    1a0e:	2f 91       	pop	r18
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <init_temp>:
//ADC CH 6
void init_temp()
{
	
	//AVCC is ref with cap at AREF pin, channel ADC6 selected, right adjusted
	ADMUX = 0b01000110;
    1a1a:	86 e4       	ldi	r24, 0x46	; 70
    1a1c:	80 93 7c 00 	sts	0x007C, r24
	
	//Enable ADC
	//Target freq 100 kHz => prescaler F_CPU / 128 (min freq)
	//Free running mode
	ADCSRA = 0xA7;
    1a20:	ea e7       	ldi	r30, 0x7A	; 122
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	87 ea       	ldi	r24, 0xA7	; 167
    1a26:	80 83       	st	Z, r24
	
	//Free running mode will constantly update the result registers
	
	//Start conversion
	ADCSRA |= 0x40;
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 64       	ori	r24, 0x40	; 64
    1a2c:	80 83       	st	Z, r24
	
}
    1a2e:	08 95       	ret

00001a30 <getTemp>:
uint16_t getTemp()
{
	uint16_t result = 0;
	
	//Get the results from the latest conversion
	result |= ADCL;
    1a30:	60 91 78 00 	lds	r22, 0x0078
	result |= (ADCH << 8);
    1a34:	20 91 79 00 	lds	r18, 0x0079
    1a38:	92 2f       	mov	r25, r18
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
uint16_t getTemp()
{
	uint16_t result = 0;
	
	//Get the results from the latest conversion
	result |= ADCL;
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
	result |= (ADCH << 8);
    1a3e:	86 2b       	or	r24, r22
    1a40:	97 2b       	or	r25, r23
	
	return (result*(32*Vref) - V0c*32768)/(32768*Tc);
    1a42:	bc 01       	movw	r22, r24
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatunsisf>
    1a4c:	23 e3       	ldi	r18, 0x33	; 51
    1a4e:	33 e3       	ldi	r19, 0x33	; 51
    1a50:	43 ed       	ldi	r20, 0xD3	; 211
    1a52:	52 e4       	ldi	r21, 0x42	; 66
    1a54:	0e 94 8c 12 	call	0x2518	; 0x2518 <__mulsf3>
    1a58:	2d ec       	ldi	r18, 0xCD	; 205
    1a5a:	3c ec       	ldi	r19, 0xCC	; 204
    1a5c:	4c e4       	ldi	r20, 0x4C	; 76
    1a5e:	56 e4       	ldi	r21, 0x46	; 70
    1a60:	0e 94 05 11 	call	0x220a	; 0x220a <__subsf3>
    1a64:	27 e7       	ldi	r18, 0x77	; 119
    1a66:	3e eb       	ldi	r19, 0xBE	; 190
    1a68:	4f e1       	ldi	r20, 0x1F	; 31
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__divsf3>
    1a70:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__fixunssfsi>
}
    1a74:	86 2f       	mov	r24, r22
    1a76:	97 2f       	mov	r25, r23
    1a78:	08 95       	ret

00001a7a <getTempRaw>:

uint16_t getTempRaw()
{
	uint16_t result = 0;

	result |= ADCL;
    1a7a:	80 91 78 00 	lds	r24, 0x0078
	result |= (ADCH << 8);
    1a7e:	90 91 79 00 	lds	r25, 0x0079
    1a82:	39 2f       	mov	r19, r25
    1a84:	20 e0       	ldi	r18, 0x00	; 0

uint16_t getTempRaw()
{
	uint16_t result = 0;

	result |= ADCL;
    1a86:	90 e0       	ldi	r25, 0x00	; 0
	result |= (ADCH << 8);
    1a88:	82 2b       	or	r24, r18
    1a8a:	93 2b       	or	r25, r19
	
	return result;
}	
    1a8c:	08 95       	ret

00001a8e <init_GSCLK>:
}


void init_GSCLK()
{
	TCCR0A = 0b00010010;//Toggle OC0B on compare match, CTC mode
    1a8e:	82 e1       	ldi	r24, 0x12	; 18
    1a90:	84 bd       	out	0x24, r24	; 36
	//OCRA is TOP
	TCCR0B = 0b00000000;//CTC mode (contd.), clock disconnected (initially)
    1a92:	15 bc       	out	0x25, r1	; 37
	
	//Target: f_GSCLK = 2MHz
	
	//12.5 MHz / 2 / 3 => 2,083,333 Hz
	
	OCR0A = 3; //GSCLK is a little faster to keep in sync
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	87 bd       	out	0x27, r24	; 39
	GSCLK_PORT &= ~GSCLK_PIN;//Make sure the pin state is low
    1a98:	5d 98       	cbi	0x0b, 5	; 11
	//Init Timer1
	//Enable timer1 to count GSCLK pulses (PD5)
	//Mimics 12-bit counter in TLC5941s
	//On TCNT == 0x0FFF do latch and reset routine
	//CTC mode, OCR1A is TOP,    WGM13-10 = 0b0100
	TCCR1A = 0b00000000;
    1a9a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0b00001111;//Use T1 GSCLK(PD5) pin as external clock, rising edge triggered
    1a9e:	8f e0       	ldi	r24, 0x0F	; 15
    1aa0:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 0b00000010;//Enable compare match interrupt (TCNT1 = OCR1A)
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	80 93 6f 00 	sts	0x006F, r24
	OCR1A = 0x1000;//one more than the 12-bit max in TLC5941
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e1       	ldi	r25, 0x10	; 16
    1aae:	90 93 89 00 	sts	0x0089, r25
    1ab2:	80 93 88 00 	sts	0x0088, r24
	
}
    1ab6:	08 95       	ret

00001ab8 <GSCLK_start>:

void GSCLK_start()
{
	TCCR0B |= 0b00000001; //use CLK/1
    1ab8:	85 b5       	in	r24, 0x25	; 37
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	85 bd       	out	0x25, r24	; 37
}
    1abe:	08 95       	ret

00001ac0 <GSCLK_stop>:

void GSCLK_stop()
{
	TCCR0B &= 0b11111000;//disconnect CLK/1
    1ac0:	85 b5       	in	r24, 0x25	; 37
    1ac2:	88 7f       	andi	r24, 0xF8	; 248
    1ac4:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= 0x40;
    1ac6:	85 b5       	in	r24, 0x25	; 37
    1ac8:	80 64       	ori	r24, 0x40	; 64
    1aca:	85 bd       	out	0x25, r24	; 37
	GSCLK_PORT &= ~GSCLK_PIN;//Make sure the pin state is low
    1acc:	5d 98       	cbi	0x0b, 5	; 11
}
    1ace:	08 95       	ret

00001ad0 <setValue>:
 *		
 *	The offset must be determined by whether the led # is even or odd and the color
 */
void setValue(uint8_t led, enum Color_t color, uint16_t value)
{
	led &= 0x3F;//Force LED <= 63
    1ad0:	8f 73       	andi	r24, 0x3F	; 63
	
	uint16_t index;
			
	if(led & 0x01)//Odd
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	80 ff       	sbrs	r24, 0
    1ad6:	5c c0       	rjmp	.+184    	; 0x1b90 <setValue+0xc0>
	{
		switch(color)
    1ad8:	61 30       	cpi	r22, 0x01	; 1
    1ada:	71 05       	cpc	r23, r1
    1adc:	f1 f0       	breq	.+60     	; 0x1b1a <setValue+0x4a>
    1ade:	61 30       	cpi	r22, 0x01	; 1
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	28 f0       	brcs	.+10     	; 0x1aee <setValue+0x1e>
    1ae4:	62 30       	cpi	r22, 0x02	; 2
    1ae6:	71 05       	cpc	r23, r1
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <setValue+0x1c>
    1aea:	bc c0       	rjmp	.+376    	; 0x1c64 <setValue+0x194>
    1aec:	3b c0       	rjmp	.+118    	; 0x1b64 <setValue+0x94>
		{
			
			case RED:
				index = led*9/2;
    1aee:	fc 01       	movw	r30, r24
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	ee 0f       	add	r30, r30
    1afa:	ff 1f       	adc	r31, r31
    1afc:	8e 0f       	add	r24, r30
    1afe:	9f 1f       	adc	r25, r31
    1b00:	fc 01       	movw	r30, r24
    1b02:	f5 95       	asr	r31
    1b04:	e7 95       	ror	r30
				
				frame[index] = (frame[index] & 0xF0) | (((uint8_t)(value >> 8)) & 0x0F);
    1b06:	e3 55       	subi	r30, 0x53	; 83
    1b08:	fc 4f       	sbci	r31, 0xFC	; 252
    1b0a:	80 81       	ld	r24, Z
    1b0c:	80 7f       	andi	r24, 0xF0	; 240
    1b0e:	95 2f       	mov	r25, r21
    1b10:	9f 70       	andi	r25, 0x0F	; 15
    1b12:	89 2b       	or	r24, r25
    1b14:	80 83       	st	Z, r24
				index++;
				frame[index] = (uint8_t)(value);
    1b16:	41 83       	std	Z+1, r20	; 0x01
							
			break;
    1b18:	08 95       	ret
				
			case GREEN:
				//index = FRAME_SIZE-7-(led >> 2)*9;//Calculate LSB index
				index = led*9/2+2;
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	22 0f       	add	r18, r18
    1b1e:	33 1f       	adc	r19, r19
    1b20:	22 0f       	add	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	22 0f       	add	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	82 0f       	add	r24, r18
    1b2a:	93 1f       	adc	r25, r19
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	35 95       	asr	r19
    1b30:	27 95       	ror	r18
				frame[index] = (uint8_t)(value >> 4);//MSB
    1b32:	6d ea       	ldi	r22, 0xAD	; 173
    1b34:	73 e0       	ldi	r23, 0x03	; 3
    1b36:	fb 01       	movw	r30, r22
    1b38:	e2 0f       	add	r30, r18
    1b3a:	f3 1f       	adc	r31, r19
    1b3c:	ca 01       	movw	r24, r20
    1b3e:	92 95       	swap	r25
    1b40:	82 95       	swap	r24
    1b42:	8f 70       	andi	r24, 0x0F	; 15
    1b44:	89 27       	eor	r24, r25
    1b46:	9f 70       	andi	r25, 0x0F	; 15
    1b48:	89 27       	eor	r24, r25
    1b4a:	82 83       	std	Z+2, r24	; 0x02
				index++;
    1b4c:	2d 5f       	subi	r18, 0xFD	; 253
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
				frame[index] = (frame[index] & 0x0F) | (((uint8_t)(value << 4)) & 0xF0);//LSB
    1b50:	fb 01       	movw	r30, r22
    1b52:	e2 0f       	add	r30, r18
    1b54:	f3 1f       	adc	r31, r19
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 70       	andi	r24, 0x0F	; 15
    1b5a:	42 95       	swap	r20
    1b5c:	40 7f       	andi	r20, 0xF0	; 240
    1b5e:	48 2b       	or	r20, r24
    1b60:	40 83       	st	Z, r20

			break;
    1b62:	08 95       	ret
				
			case BLUE:
				//index = FRAME_SIZE-8-(led >> 2)*9;//Calculate LSB index
				index = led*9/2+3;
    1b64:	fc 01       	movw	r30, r24
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	8e 0f       	add	r24, r30
    1b74:	9f 1f       	adc	r25, r31
    1b76:	fc 01       	movw	r30, r24
    1b78:	f5 95       	asr	r31
    1b7a:	e7 95       	ror	r30
				frame[index] = (frame[index] & 0xF0) | (((uint8_t)(value >> 8)) & 0x0F);
    1b7c:	e0 55       	subi	r30, 0x50	; 80
    1b7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b80:	80 81       	ld	r24, Z
    1b82:	80 7f       	andi	r24, 0xF0	; 240
    1b84:	95 2f       	mov	r25, r21
    1b86:	9f 70       	andi	r25, 0x0F	; 15
    1b88:	89 2b       	or	r24, r25
    1b8a:	80 83       	st	Z, r24
				index++;
				frame[index] = (uint8_t)(value);
    1b8c:	41 83       	std	Z+1, r20	; 0x01
				
			break;
    1b8e:	08 95       	ret
		}
	}			
	else//Even
	{
	
		switch(color)
    1b90:	61 30       	cpi	r22, 0x01	; 1
    1b92:	71 05       	cpc	r23, r1
    1b94:	69 f1       	breq	.+90     	; 0x1bf0 <setValue+0x120>
    1b96:	61 30       	cpi	r22, 0x01	; 1
    1b98:	71 05       	cpc	r23, r1
    1b9a:	28 f0       	brcs	.+10     	; 0x1ba6 <setValue+0xd6>
    1b9c:	62 30       	cpi	r22, 0x02	; 2
    1b9e:	71 05       	cpc	r23, r1
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <setValue+0xd4>
    1ba2:	60 c0       	rjmp	.+192    	; 0x1c64 <setValue+0x194>
    1ba4:	3b c0       	rjmp	.+118    	; 0x1c1c <setValue+0x14c>
		{
			case RED:
				index = led*9/2;
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	22 0f       	add	r18, r18
    1bae:	33 1f       	adc	r19, r19
    1bb0:	22 0f       	add	r18, r18
    1bb2:	33 1f       	adc	r19, r19
    1bb4:	82 0f       	add	r24, r18
    1bb6:	93 1f       	adc	r25, r19
    1bb8:	9c 01       	movw	r18, r24
    1bba:	35 95       	asr	r19
    1bbc:	27 95       	ror	r18
				frame[index] = (uint8_t)(value >> 4);//MSB
    1bbe:	6d ea       	ldi	r22, 0xAD	; 173
    1bc0:	73 e0       	ldi	r23, 0x03	; 3
    1bc2:	fb 01       	movw	r30, r22
    1bc4:	e2 0f       	add	r30, r18
    1bc6:	f3 1f       	adc	r31, r19
    1bc8:	ca 01       	movw	r24, r20
    1bca:	92 95       	swap	r25
    1bcc:	82 95       	swap	r24
    1bce:	8f 70       	andi	r24, 0x0F	; 15
    1bd0:	89 27       	eor	r24, r25
    1bd2:	9f 70       	andi	r25, 0x0F	; 15
    1bd4:	89 27       	eor	r24, r25
    1bd6:	80 83       	st	Z, r24
				index++;
    1bd8:	2f 5f       	subi	r18, 0xFF	; 255
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
				frame[index] = (frame[index] & 0x0F) | (((uint8_t)(value << 4)) & 0xF0);//LSB
    1bdc:	fb 01       	movw	r30, r22
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 70       	andi	r24, 0x0F	; 15
    1be6:	42 95       	swap	r20
    1be8:	40 7f       	andi	r20, 0xF0	; 240
    1bea:	48 2b       	or	r20, r24
    1bec:	40 83       	st	Z, r20
			
			break;
    1bee:	08 95       	ret
				
			case GREEN:

				index = led*9/2+1;
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	ee 0f       	add	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	8e 0f       	add	r24, r30
    1c00:	9f 1f       	adc	r25, r31
    1c02:	fc 01       	movw	r30, r24
    1c04:	f5 95       	asr	r31
    1c06:	e7 95       	ror	r30
				frame[index] = (frame[index] & 0xF0) | (((uint8_t)(value >> 8)) & 0x0F);
    1c08:	e2 55       	subi	r30, 0x52	; 82
    1c0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 7f       	andi	r24, 0xF0	; 240
    1c10:	95 2f       	mov	r25, r21
    1c12:	9f 70       	andi	r25, 0x0F	; 15
    1c14:	89 2b       	or	r24, r25
    1c16:	80 83       	st	Z, r24
				index++;
				frame[index] = (uint8_t)(value);
    1c18:	41 83       	std	Z+1, r20	; 0x01
								
			break;
    1c1a:	08 95       	ret
				
			case BLUE:
				index = led*9/2+3;
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	82 0f       	add	r24, r18
    1c2c:	93 1f       	adc	r25, r19
    1c2e:	9c 01       	movw	r18, r24
    1c30:	35 95       	asr	r19
    1c32:	27 95       	ror	r18
				frame[index] = (uint8_t)(value >> 4);//MSB
    1c34:	6d ea       	ldi	r22, 0xAD	; 173
    1c36:	73 e0       	ldi	r23, 0x03	; 3
    1c38:	fb 01       	movw	r30, r22
    1c3a:	e2 0f       	add	r30, r18
    1c3c:	f3 1f       	adc	r31, r19
    1c3e:	ca 01       	movw	r24, r20
    1c40:	92 95       	swap	r25
    1c42:	82 95       	swap	r24
    1c44:	8f 70       	andi	r24, 0x0F	; 15
    1c46:	89 27       	eor	r24, r25
    1c48:	9f 70       	andi	r25, 0x0F	; 15
    1c4a:	89 27       	eor	r24, r25
    1c4c:	83 83       	std	Z+3, r24	; 0x03
				index++;
    1c4e:	2c 5f       	subi	r18, 0xFC	; 252
    1c50:	3f 4f       	sbci	r19, 0xFF	; 255
				frame[index] = (frame[index] & 0x0F) | (((uint8_t)(value << 4)) & 0xF0);//LSB
    1c52:	fb 01       	movw	r30, r22
    1c54:	e2 0f       	add	r30, r18
    1c56:	f3 1f       	adc	r31, r19
    1c58:	80 81       	ld	r24, Z
    1c5a:	8f 70       	andi	r24, 0x0F	; 15
    1c5c:	42 95       	swap	r20
    1c5e:	40 7f       	andi	r20, 0xF0	; 240
    1c60:	48 2b       	or	r20, r24
    1c62:	40 83       	st	Z, r20
    1c64:	08 95       	ret

00001c66 <send>:
}*/

void send(uint8_t tx)
{
	// Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
    1c66:	e0 ec       	ldi	r30, 0xC0	; 192
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	90 81       	ld	r25, Z
    1c6c:	95 ff       	sbrs	r25, 5
    1c6e:	fd cf       	rjmp	.-6      	; 0x1c6a <send+0x4>
			
	//Send a byte
	UDR0 = tx;
    1c70:	80 93 c6 00 	sts	0x00C6, r24
}
    1c74:	08 95       	ret

00001c76 <sendFrame>:
uint8_t *fptr;
void sendFrame()
{

	//Make sure we are in grayscale mode
	GSDC_PORT &= ~GSDC_PIN;
    1c76:	29 98       	cbi	0x05, 1	; 5
		errorFlag = 1;
	}		
	*/
	
	//Write first quadrant
	for(i = 0; i < 4; i++ )
    1c78:	10 92 94 03 	sts	0x0394, r1
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
	{
		fptr = frame + i*36;
    1c7e:	82 2f       	mov	r24, r18
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	22 0f       	add	r18, r18
    1c8e:	33 1f       	adc	r19, r19
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	82 0f       	add	r24, r18
    1c9a:	93 1f       	adc	r25, r19
    1c9c:	83 55       	subi	r24, 0x53	; 83
    1c9e:	9c 4f       	sbci	r25, 0xFC	; 252
    1ca0:	90 93 92 03 	sts	0x0392, r25
    1ca4:	80 93 91 03 	sts	0x0391, r24
		for(j = 0; j < 18; j++)
    1ca8:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[i*36+j]);
			send(*fptr);
    1cac:	e0 91 91 03 	lds	r30, 0x0391
    1cb0:	f0 91 92 03 	lds	r31, 0x0392
    1cb4:	80 81       	ld	r24, Z
    1cb6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			fptr++;
    1cba:	80 91 91 03 	lds	r24, 0x0391
    1cbe:	90 91 92 03 	lds	r25, 0x0392
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	90 93 92 03 	sts	0x0392, r25
    1cc8:	80 93 91 03 	sts	0x0391, r24
	
	//Write first quadrant
	for(i = 0; i < 4; i++ )
	{
		fptr = frame + i*36;
		for(j = 0; j < 18; j++)
    1ccc:	80 91 93 03 	lds	r24, 0x0393
    1cd0:	8f 5f       	subi	r24, 0xFF	; 255
    1cd2:	80 93 93 03 	sts	0x0393, r24
    1cd6:	82 31       	cpi	r24, 0x12	; 18
    1cd8:	48 f3       	brcs	.-46     	; 0x1cac <sendFrame+0x36>
		errorFlag = 1;
	}		
	*/
	
	//Write first quadrant
	for(i = 0; i < 4; i++ )
    1cda:	20 91 94 03 	lds	r18, 0x0394
    1cde:	2f 5f       	subi	r18, 0xFF	; 255
    1ce0:	20 93 94 03 	sts	0x0394, r18
    1ce4:	24 30       	cpi	r18, 0x04	; 4
    1ce6:	58 f2       	brcs	.-106    	; 0x1c7e <sendFrame+0x8>
			fptr++;
		}
	}
	
	//Write second quadrant
	for(i = 0; i < 4; i++ )
    1ce8:	10 92 94 03 	sts	0x0394, r1
    1cec:	20 e0       	ldi	r18, 0x00	; 0
	{
		fptr = frame + i*36 + 18;
    1cee:	82 2f       	mov	r24, r18
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	9c 01       	movw	r18, r24
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	22 0f       	add	r18, r18
    1d06:	33 1f       	adc	r19, r19
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	81 54       	subi	r24, 0x41	; 65
    1d0e:	9c 4f       	sbci	r25, 0xFC	; 252
    1d10:	90 93 92 03 	sts	0x0392, r25
    1d14:	80 93 91 03 	sts	0x0391, r24
		for(j = 0; j < 18; j++)
    1d18:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[18+i*36+j]);
			send(*fptr);
    1d1c:	e0 91 91 03 	lds	r30, 0x0391
    1d20:	f0 91 92 03 	lds	r31, 0x0392
    1d24:	80 81       	ld	r24, Z
    1d26:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			fptr++;
    1d2a:	80 91 91 03 	lds	r24, 0x0391
    1d2e:	90 91 92 03 	lds	r25, 0x0392
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	90 93 92 03 	sts	0x0392, r25
    1d38:	80 93 91 03 	sts	0x0391, r24
	
	//Write second quadrant
	for(i = 0; i < 4; i++ )
	{
		fptr = frame + i*36 + 18;
		for(j = 0; j < 18; j++)
    1d3c:	80 91 93 03 	lds	r24, 0x0393
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	80 93 93 03 	sts	0x0393, r24
    1d46:	82 31       	cpi	r24, 0x12	; 18
    1d48:	48 f3       	brcs	.-46     	; 0x1d1c <sendFrame+0xa6>
			fptr++;
		}
	}
	
	//Write second quadrant
	for(i = 0; i < 4; i++ )
    1d4a:	20 91 94 03 	lds	r18, 0x0394
    1d4e:	2f 5f       	subi	r18, 0xFF	; 255
    1d50:	20 93 94 03 	sts	0x0394, r18
    1d54:	24 30       	cpi	r18, 0x04	; 4
    1d56:	58 f2       	brcs	.-106    	; 0x1cee <sendFrame+0x78>
			fptr++;
		}
	}
	
	//Write third quadrant
	for(i = 0; i < 4; i++ )
    1d58:	10 92 94 03 	sts	0x0394, r1
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
	{
		fptr = frame + i*36 + 162;
    1d5e:	82 2f       	mov	r24, r18
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	9c 01       	movw	r18, r24
    1d6c:	22 0f       	add	r18, r18
    1d6e:	33 1f       	adc	r19, r19
    1d70:	22 0f       	add	r18, r18
    1d72:	33 1f       	adc	r19, r19
    1d74:	22 0f       	add	r18, r18
    1d76:	33 1f       	adc	r19, r19
    1d78:	82 0f       	add	r24, r18
    1d7a:	93 1f       	adc	r25, r19
    1d7c:	81 5b       	subi	r24, 0xB1	; 177
    1d7e:	9b 4f       	sbci	r25, 0xFB	; 251
    1d80:	90 93 92 03 	sts	0x0392, r25
    1d84:	80 93 91 03 	sts	0x0391, r24
		for(j = 0; j < 18; j++)
    1d88:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[162+i*36+j]);
			send(*fptr);
    1d8c:	e0 91 91 03 	lds	r30, 0x0391
    1d90:	f0 91 92 03 	lds	r31, 0x0392
    1d94:	80 81       	ld	r24, Z
    1d96:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			fptr++;
    1d9a:	80 91 91 03 	lds	r24, 0x0391
    1d9e:	90 91 92 03 	lds	r25, 0x0392
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	90 93 92 03 	sts	0x0392, r25
    1da8:	80 93 91 03 	sts	0x0391, r24
	
	//Write third quadrant
	for(i = 0; i < 4; i++ )
	{
		fptr = frame + i*36 + 162;
		for(j = 0; j < 18; j++)
    1dac:	80 91 93 03 	lds	r24, 0x0393
    1db0:	8f 5f       	subi	r24, 0xFF	; 255
    1db2:	80 93 93 03 	sts	0x0393, r24
    1db6:	82 31       	cpi	r24, 0x12	; 18
    1db8:	48 f3       	brcs	.-46     	; 0x1d8c <sendFrame+0x116>
			fptr++;
		}
	}
	
	//Write third quadrant
	for(i = 0; i < 4; i++ )
    1dba:	20 91 94 03 	lds	r18, 0x0394
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	20 93 94 03 	sts	0x0394, r18
    1dc4:	24 30       	cpi	r18, 0x04	; 4
    1dc6:	58 f2       	brcs	.-106    	; 0x1d5e <sendFrame+0xe8>
			send(*fptr);
			fptr++;
		}
	}
		
	for(i = 0; i < 4; i++ )
    1dc8:	10 92 94 03 	sts	0x0394, r1
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
	{
		fptr = frame + i*36 + 144;
    1dce:	82 2f       	mov	r24, r18
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	9c 01       	movw	r18, r24
    1ddc:	22 0f       	add	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	22 0f       	add	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	82 0f       	add	r24, r18
    1dea:	93 1f       	adc	r25, r19
    1dec:	83 5c       	subi	r24, 0xC3	; 195
    1dee:	9b 4f       	sbci	r25, 0xFB	; 251
    1df0:	90 93 92 03 	sts	0x0392, r25
    1df4:	80 93 91 03 	sts	0x0391, r24
		for(j = 0; j < 18; j++)
    1df8:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[144+i*36+j]);
			send(*fptr);
    1dfc:	e0 91 91 03 	lds	r30, 0x0391
    1e00:	f0 91 92 03 	lds	r31, 0x0392
    1e04:	80 81       	ld	r24, Z
    1e06:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			fptr++;
    1e0a:	80 91 91 03 	lds	r24, 0x0391
    1e0e:	90 91 92 03 	lds	r25, 0x0392
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	90 93 92 03 	sts	0x0392, r25
    1e18:	80 93 91 03 	sts	0x0391, r24
	}
		
	for(i = 0; i < 4; i++ )
	{
		fptr = frame + i*36 + 144;
		for(j = 0; j < 18; j++)
    1e1c:	80 91 93 03 	lds	r24, 0x0393
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	80 93 93 03 	sts	0x0393, r24
    1e26:	82 31       	cpi	r24, 0x12	; 18
    1e28:	48 f3       	brcs	.-46     	; 0x1dfc <sendFrame+0x186>
			send(*fptr);
			fptr++;
		}
	}
		
	for(i = 0; i < 4; i++ )
    1e2a:	20 91 94 03 	lds	r18, 0x0394
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	20 93 94 03 	sts	0x0394, r18
    1e34:	24 30       	cpi	r18, 0x04	; 4
    1e36:	58 f2       	brcs	.-106    	; 0x1dce <sendFrame+0x158>
			fptr++;
		}
	}
	
	// Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
    1e38:	e0 ec       	ldi	r30, 0xC0	; 192
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	85 ff       	sbrs	r24, 5
    1e40:	fd cf       	rjmp	.-6      	; 0x1e3c <sendFrame+0x1c6>
			tlc_num--;
			led_set++;
		}
	}
	*/
}
    1e42:	08 95       	ret

00001e44 <zeroFrame>:
 *
 * This function sets the frame to all zeros
 *
 */
void zeroFrame()
{
    1e44:	ed ea       	ldi	r30, 0xAD	; 173
    1e46:	f3 e0       	ldi	r31, 0x03	; 3
 * zeroFrame()
 *
 * This function sets the frame to all zeros
 *
 */
void zeroFrame()
    1e48:	8d ec       	ldi	r24, 0xCD	; 205
    1e4a:	94 e0       	ldi	r25, 0x04	; 4
{
	uint16_t i;	
	for(i = 0; i < FRAME_SIZE; i++)
	{
		frame[i] = 0x00;
    1e4c:	11 92       	st	Z+, r1
 *
 */
void zeroFrame()
{
	uint16_t i;	
	for(i = 0; i < FRAME_SIZE; i++)
    1e4e:	e8 17       	cp	r30, r24
    1e50:	f9 07       	cpc	r31, r25
    1e52:	e1 f7       	brne	.-8      	; 0x1e4c <zeroFrame+0x8>
	{
		frame[i] = 0x00;
	}
}
    1e54:	08 95       	ret

00001e56 <sendDotCorrect>:

void sendDotCorrect()
{
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
	GSCLK_stop();
    1e5a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <GSCLK_stop>

	delay_ms(1);
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>

	//Make sure we are in Dot Correct mode
	GSDC_PORT |= GSDC_PIN;
    1e6a:	29 9a       	sbi	0x05, 1	; 5
			fptr++;
		}
	}
	*/
	
	delay_ms(1);
    1e6c:	61 e0       	ldi	r22, 0x01	; 1
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
	
	uint8_t *dc_ptr = dc_frame;
		
	//Write first quadrant
	for(i = 0; i < 4; i++ )//For each row in the quadrant
    1e78:	10 92 94 03 	sts	0x0394, r1
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
	{
		dc_ptr = dc_frame + i*18;
    1e7e:	c8 2f       	mov	r28, r24
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	d8 2f       	mov	r29, r24
    1e84:	ce 01       	movw	r24, r28
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	ec 01       	movw	r28, r24
    1e8c:	cc 0f       	add	r28, r28
    1e8e:	dd 1f       	adc	r29, r29
    1e90:	cc 0f       	add	r28, r28
    1e92:	dd 1f       	adc	r29, r29
    1e94:	cc 0f       	add	r28, r28
    1e96:	dd 1f       	adc	r29, r29
    1e98:	c8 0f       	add	r28, r24
    1e9a:	d9 1f       	adc	r29, r25
    1e9c:	c9 5f       	subi	r28, 0xF9	; 249
    1e9e:	df 4f       	sbci	r29, 0xFF	; 255
		for(j = 0; j < 9; j++)
    1ea0:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[i*36+j]);
			send(eeprom_read_byte(dc_ptr));
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eerd_byte_m328p>
    1eaa:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			dc_ptr++;
    1eae:	21 96       	adiw	r28, 0x01	; 1
		
	//Write first quadrant
	for(i = 0; i < 4; i++ )//For each row in the quadrant
	{
		dc_ptr = dc_frame + i*18;
		for(j = 0; j < 9; j++)
    1eb0:	80 91 93 03 	lds	r24, 0x0393
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	80 93 93 03 	sts	0x0393, r24
    1eba:	89 30       	cpi	r24, 0x09	; 9
    1ebc:	98 f3       	brcs	.-26     	; 0x1ea4 <sendDotCorrect+0x4e>
	delay_ms(1);
	
	uint8_t *dc_ptr = dc_frame;
		
	//Write first quadrant
	for(i = 0; i < 4; i++ )//For each row in the quadrant
    1ebe:	80 91 94 03 	lds	r24, 0x0394
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	80 93 94 03 	sts	0x0394, r24
    1ec8:	84 30       	cpi	r24, 0x04	; 4
    1eca:	c8 f2       	brcs	.-78     	; 0x1e7e <sendDotCorrect+0x28>
			dc_ptr++;
		}
	}
	
	//Write second quadrant
	for(i = 0; i < 4; i++ )
    1ecc:	10 92 94 03 	sts	0x0394, r1
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
	{
		dc_ptr = dc_frame + i*18 + 9;
    1ed2:	c8 2f       	mov	r28, r24
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	d8 2f       	mov	r29, r24
    1ed8:	ce 01       	movw	r24, r28
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	ec 01       	movw	r28, r24
    1ee0:	cc 0f       	add	r28, r28
    1ee2:	dd 1f       	adc	r29, r29
    1ee4:	cc 0f       	add	r28, r28
    1ee6:	dd 1f       	adc	r29, r29
    1ee8:	cc 0f       	add	r28, r28
    1eea:	dd 1f       	adc	r29, r29
    1eec:	c8 0f       	add	r28, r24
    1eee:	d9 1f       	adc	r29, r25
    1ef0:	c0 5f       	subi	r28, 0xF0	; 240
    1ef2:	df 4f       	sbci	r29, 0xFF	; 255
		for(j = 0; j < 9; j++)
    1ef4:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[18+i*36+j]);
			send(eeprom_read_byte(dc_ptr));
    1ef8:	ce 01       	movw	r24, r28
    1efa:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eerd_byte_m328p>
    1efe:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			dc_ptr++;
    1f02:	21 96       	adiw	r28, 0x01	; 1
	
	//Write second quadrant
	for(i = 0; i < 4; i++ )
	{
		dc_ptr = dc_frame + i*18 + 9;
		for(j = 0; j < 9; j++)
    1f04:	80 91 93 03 	lds	r24, 0x0393
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 93 03 	sts	0x0393, r24
    1f0e:	89 30       	cpi	r24, 0x09	; 9
    1f10:	98 f3       	brcs	.-26     	; 0x1ef8 <sendDotCorrect+0xa2>
			dc_ptr++;
		}
	}
	
	//Write second quadrant
	for(i = 0; i < 4; i++ )
    1f12:	80 91 94 03 	lds	r24, 0x0394
    1f16:	8f 5f       	subi	r24, 0xFF	; 255
    1f18:	80 93 94 03 	sts	0x0394, r24
    1f1c:	84 30       	cpi	r24, 0x04	; 4
    1f1e:	c8 f2       	brcs	.-78     	; 0x1ed2 <sendDotCorrect+0x7c>
			dc_ptr++;
		}
	}
	
	//Write third quadrant
	for(i = 0; i < 4; i++ )
    1f20:	10 92 94 03 	sts	0x0394, r1
    1f24:	80 e0       	ldi	r24, 0x00	; 0
	{
		dc_ptr = dc_frame + i*18 + 81;
    1f26:	c8 2f       	mov	r28, r24
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	d8 2f       	mov	r29, r24
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	ec 01       	movw	r28, r24
    1f34:	cc 0f       	add	r28, r28
    1f36:	dd 1f       	adc	r29, r29
    1f38:	cc 0f       	add	r28, r28
    1f3a:	dd 1f       	adc	r29, r29
    1f3c:	cc 0f       	add	r28, r28
    1f3e:	dd 1f       	adc	r29, r29
    1f40:	c8 0f       	add	r28, r24
    1f42:	d9 1f       	adc	r29, r25
    1f44:	c8 5a       	subi	r28, 0xA8	; 168
    1f46:	df 4f       	sbci	r29, 0xFF	; 255
		for(j = 0; j < 9; j++)
    1f48:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[162+i*36+j]);
			send(eeprom_read_byte(dc_ptr));
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eerd_byte_m328p>
    1f52:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			dc_ptr++;
    1f56:	21 96       	adiw	r28, 0x01	; 1
	
	//Write third quadrant
	for(i = 0; i < 4; i++ )
	{
		dc_ptr = dc_frame + i*18 + 81;
		for(j = 0; j < 9; j++)
    1f58:	80 91 93 03 	lds	r24, 0x0393
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	80 93 93 03 	sts	0x0393, r24
    1f62:	89 30       	cpi	r24, 0x09	; 9
    1f64:	98 f3       	brcs	.-26     	; 0x1f4c <sendDotCorrect+0xf6>
			dc_ptr++;
		}
	}
	
	//Write third quadrant
	for(i = 0; i < 4; i++ )
    1f66:	80 91 94 03 	lds	r24, 0x0394
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	80 93 94 03 	sts	0x0394, r24
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	c8 f2       	brcs	.-78     	; 0x1f26 <sendDotCorrect+0xd0>
			send(eeprom_read_byte(dc_ptr));
			dc_ptr++;
		}
	}
		
	for(i = 0; i < 4; i++ )
    1f74:	10 92 94 03 	sts	0x0394, r1
    1f78:	80 e0       	ldi	r24, 0x00	; 0
	{
		dc_ptr = dc_frame + i*18 + 72;
    1f7a:	c8 2f       	mov	r28, r24
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	d8 2f       	mov	r29, r24
    1f80:	ce 01       	movw	r24, r28
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	ec 01       	movw	r28, r24
    1f88:	cc 0f       	add	r28, r28
    1f8a:	dd 1f       	adc	r29, r29
    1f8c:	cc 0f       	add	r28, r28
    1f8e:	dd 1f       	adc	r29, r29
    1f90:	cc 0f       	add	r28, r28
    1f92:	dd 1f       	adc	r29, r29
    1f94:	c8 0f       	add	r28, r24
    1f96:	d9 1f       	adc	r29, r25
    1f98:	c1 5b       	subi	r28, 0xB1	; 177
    1f9a:	df 4f       	sbci	r29, 0xFF	; 255
		for(j = 0; j < 9; j++)
    1f9c:	10 92 93 03 	sts	0x0393, r1
		{
			//sendRecv(frame[144+i*36+j]);
			send(eeprom_read_byte(dc_ptr));
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	0e 94 aa 13 	call	0x2754	; 0x2754 <__eerd_byte_m328p>
    1fa6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <send>
			dc_ptr++;
    1faa:	21 96       	adiw	r28, 0x01	; 1
	}
		
	for(i = 0; i < 4; i++ )
	{
		dc_ptr = dc_frame + i*18 + 72;
		for(j = 0; j < 9; j++)
    1fac:	80 91 93 03 	lds	r24, 0x0393
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	80 93 93 03 	sts	0x0393, r24
    1fb6:	89 30       	cpi	r24, 0x09	; 9
    1fb8:	98 f3       	brcs	.-26     	; 0x1fa0 <sendDotCorrect+0x14a>
			send(eeprom_read_byte(dc_ptr));
			dc_ptr++;
		}
	}
		
	for(i = 0; i < 4; i++ )
    1fba:	80 91 94 03 	lds	r24, 0x0394
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	80 93 94 03 	sts	0x0394, r24
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	c8 f2       	brcs	.-78     	; 0x1f7a <sendDotCorrect+0x124>
		}
	}
	
	
	// Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
    1fc8:	e0 ec       	ldi	r30, 0xC0	; 192
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	85 ff       	sbrs	r24, 5
    1fd0:	fd cf       	rjmp	.-6      	; 0x1fcc <sendDotCorrect+0x176>
	
	
	delay_ms(1);
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
	
	
	
	
	//Set XLAT High (pulse duration >= 20 ns, 10 MHz => 100 ns per clock cycle)
	XLAT_PORT |= XLAT_PIN;
    1fde:	28 9a       	sbi	0x05, 0	; 5
		
	//delay_us(100);
	delay_ms(1);
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
		
	//Set XLAT Low
	XLAT_PORT &= ~XLAT_PIN;
    1fec:	28 98       	cbi	0x05, 0	; 5
	
	//delay_us(100);
	delay_ms(1);
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 22 01 	call	0x244	; 0x244 <delay_ms>
	
	//Switch back to grayscale mode
	GSDC_PORT &= ~(GSDC_PIN);
    1ffa:	29 98       	cbi	0x05, 1	; 5
	
	GSCLK_start();
    1ffc:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GSCLK_start>

}
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	08 95       	ret

00002006 <init_tlc5941>:

void init_tlc5941()
{
	//Set pin DDRs
	//Outputs
	SCLK_DDR |= SCLK_PIN;
    2006:	54 9a       	sbi	0x0a, 4	; 10
	GSCLK_DDR |= GSCLK_PIN;
    2008:	55 9a       	sbi	0x0a, 5	; 10
	BLANK_DDR |= BLANK_PIN;
    200a:	57 9a       	sbi	0x0a, 7	; 10
	GSDC_DDR |= GSDC_PIN;
    200c:	21 9a       	sbi	0x04, 1	; 4
	XLAT_DDR |= XLAT_PIN;
    200e:	20 9a       	sbi	0x04, 0	; 4
	MOSI_DDR |= MOSI_PIN;
    2010:	51 9a       	sbi	0x0a, 1	; 10
	
	//Inputs
	MISO_DDR &= ~MISO_PIN;
    2012:	50 98       	cbi	0x0a, 0	; 10
	XERR_DDR &= ~XERR_PIN;
    2014:	52 98       	cbi	0x0a, 2	; 10
		
	//Enable XERR pull-up
	XERR_PORT |= XERR_PIN;
    2016:	5a 9a       	sbi	0x0b, 2	; 11
	
	
	//Enable USART SPI Mode (TLC5941's)
	//Enable master SPI mode, MSB first, sample on rising edge, setup on falling
	UCSR0C = 0b11000000;//Data output just before rising edge
    2018:	80 ec       	ldi	r24, 0xC0	; 192
    201a:	80 93 c2 00 	sts	0x00C2, r24
	//Enable the TX and RX
	UCSR0B = 0b00011000;
    201e:	88 e1       	ldi	r24, 0x18	; 24
    2020:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0B = 0b00001000;//Just TX
	
	//Set clock to as fast as possible
	UBRR0H = 0;
    2024:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0;
    2028:	10 92 c4 00 	sts	0x00C4, r1
	
	//zeroFrame();
	
	sendDotCorrect();
    202c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sendDotCorrect>
	
	init_GSCLK();
    2030:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <init_GSCLK>
	GSCLK_start();
    2034:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GSCLK_start>
}
    2038:	08 95       	ret

0000203a <setDotCorrect>:
 * |D |D |D |D |	6-bit DC Values
 *
 *
 */
void setDotCorrect(uint8_t *buf)
{
    203a:	ff 92       	push	r15
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	00 d0       	rcall	.+0      	; 0x2046 <setDotCorrect+0xc>
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
 * |B  |B  |B  |	Bytes
 * |D |D |D |D |	6-bit DC Values
 *
 *
 */
void setDotCorrect(uint8_t *buf)
    204c:	8c 01       	movw	r16, r24
    204e:	0d 5f       	subi	r16, 0xFD	; 253
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Each block of 3 bytes holds 4 6-bit DC values
	uint8_t temp[3];
	
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
    2052:	ff 24       	eor	r15, r15
 * |B  |B  |B  |	Bytes
 * |D |D |D |D |	6-bit DC Values
 *
 *
 */
void setDotCorrect(uint8_t *buf)
    2054:	f8 01       	movw	r30, r16
    2056:	32 97       	sbiw	r30, 0x02	; 2
	
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
	{
		temp[0] = buf[ledChannel] << 2;

		temp[0] |= (buf[ledChannel+1] & 0x3F) >> 4;
    2058:	40 81       	ld	r20, Z
    205a:	24 2f       	mov	r18, r20
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	2f 73       	andi	r18, 0x3F	; 63
    2060:	30 70       	andi	r19, 0x00	; 0
    2062:	35 95       	asr	r19
    2064:	27 95       	ror	r18
    2066:	35 95       	asr	r19
    2068:	27 95       	ror	r18
    206a:	35 95       	asr	r19
    206c:	27 95       	ror	r18
    206e:	35 95       	asr	r19
    2070:	27 95       	ror	r18
 * |B  |B  |B  |	Bytes
 * |D |D |D |D |	6-bit DC Values
 *
 *
 */
void setDotCorrect(uint8_t *buf)
    2072:	f8 01       	movw	r30, r16
    2074:	33 97       	sbiw	r30, 0x03	; 3
	//Each block of 3 bytes holds 4 6-bit DC values
	uint8_t temp[3];
	
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
	{
		temp[0] = buf[ledChannel] << 2;
    2076:	80 81       	ld	r24, Z
    2078:	88 0f       	add	r24, r24
    207a:	88 0f       	add	r24, r24

		temp[0] |= (buf[ledChannel+1] & 0x3F) >> 4;
    207c:	28 2b       	or	r18, r24
    207e:	29 83       	std	Y+1, r18	; 0x01
 * |B  |B  |B  |	Bytes
 * |D |D |D |D |	6-bit DC Values
 *
 *
 */
void setDotCorrect(uint8_t *buf)
    2080:	f8 01       	movw	r30, r16
    2082:	31 97       	sbiw	r30, 0x01	; 1
		temp[0] = buf[ledChannel] << 2;

		temp[0] |= (buf[ledChannel+1] & 0x3F) >> 4;
		temp[1] = buf[ledChannel+1] << 4;

		temp[1] |= (buf[ledChannel+2] & 0x3F) >> 2;
    2084:	20 81       	ld	r18, Z
    2086:	82 2f       	mov	r24, r18
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	8f 73       	andi	r24, 0x3F	; 63
    208c:	90 70       	andi	r25, 0x00	; 0
    208e:	95 95       	asr	r25
    2090:	87 95       	ror	r24
    2092:	95 95       	asr	r25
    2094:	87 95       	ror	r24
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
	{
		temp[0] = buf[ledChannel] << 2;

		temp[0] |= (buf[ledChannel+1] & 0x3F) >> 4;
		temp[1] = buf[ledChannel+1] << 4;
    2096:	42 95       	swap	r20
    2098:	40 7f       	andi	r20, 0xF0	; 240

		temp[1] |= (buf[ledChannel+2] & 0x3F) >> 2;
    209a:	84 2b       	or	r24, r20
    209c:	8a 83       	std	Y+2, r24	; 0x02
		temp[2] = buf[ledChannel+2] << 6;
    209e:	22 95       	swap	r18
    20a0:	22 0f       	add	r18, r18
    20a2:	22 0f       	add	r18, r18
    20a4:	20 7c       	andi	r18, 0xC0	; 192

		temp[2] |= buf[ledChannel+3] & 0x3F;
    20a6:	f8 01       	movw	r30, r16
    20a8:	80 81       	ld	r24, Z
    20aa:	8f 73       	andi	r24, 0x3F	; 63
    20ac:	28 2b       	or	r18, r24
    20ae:	2b 83       	std	Y+3, r18	; 0x03

		eeprom_write_block(temp, dc_frame+((ledChannel/4)*3), 3);
    20b0:	8f 2d       	mov	r24, r15
    20b2:	86 95       	lsr	r24
    20b4:	86 95       	lsr	r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	bc 01       	movw	r22, r24
    20ba:	66 0f       	add	r22, r22
    20bc:	77 1f       	adc	r23, r23
    20be:	68 0f       	add	r22, r24
    20c0:	79 1f       	adc	r23, r25
    20c2:	69 5f       	subi	r22, 0xF9	; 249
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	43 e0       	ldi	r20, 0x03	; 3
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	0e 94 b2 13 	call	0x2764	; 0x2764 <__eewr_block_m328p>
void setDotCorrect(uint8_t *buf)
{
	//Each block of 3 bytes holds 4 6-bit DC values
	uint8_t temp[3];
	
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
    20d2:	f4 e0       	ldi	r31, 0x04	; 4
    20d4:	ff 0e       	add	r15, r31
    20d6:	0c 5f       	subi	r16, 0xFC	; 252
    20d8:	1f 4f       	sbci	r17, 0xFF	; 255
    20da:	80 ec       	ldi	r24, 0xC0	; 192
    20dc:	f8 16       	cp	r15, r24
    20de:	09 f0       	breq	.+2      	; 0x20e2 <setDotCorrect+0xa8>
    20e0:	b9 cf       	rjmp	.-142    	; 0x2054 <setDotCorrect+0x1a>
		temp[2] |= buf[ledChannel+3] & 0x3F;

		eeprom_write_block(temp, dc_frame+((ledChannel/4)*3), 3);
	}
	
	sendDotCorrect();
    20e2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sendDotCorrect>
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	08 95       	ret

000020f8 <getDotCorrect>:
 * This function gets DC_FRAME_SIZE  bytes of dot correct values from EEPROM and puts them in buf
 *	NEEDS TO CONVERT 6-BIT TO 8 BIT BYTES
 */

void getDotCorrect(uint8_t *buf)
{
    20f8:	ff 92       	push	r15
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	00 d0       	rcall	.+0      	; 0x2104 <getDotCorrect+0xc>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
 *
 * This function gets DC_FRAME_SIZE  bytes of dot correct values from EEPROM and puts them in buf
 *	NEEDS TO CONVERT 6-BIT TO 8 BIT BYTES
 */

void getDotCorrect(uint8_t *buf)
    210a:	8c 01       	movw	r16, r24
    210c:	0d 5f       	subi	r16, 0xFD	; 253
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Each block of 3 bytes holds 4 6-bit DC values
	uint8_t temp[3];
	
	//Read DC values from EEPROM
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
    2110:	ff 24       	eor	r15, r15
	{
		//Read the block containing the next 4 ledChannel DC values
		eeprom_read_block(temp, dc_frame+ledChannel/4, 3);
    2112:	6f 2d       	mov	r22, r15
    2114:	66 95       	lsr	r22
    2116:	66 95       	lsr	r22
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	69 5f       	subi	r22, 0xF9	; 249
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	43 e0       	ldi	r20, 0x03	; 3
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	0e 94 9a 13 	call	0x2734	; 0x2734 <__eerd_block_m328p>
		
		buf[ledChannel]   = temp[0] >> 2;
    212a:	29 81       	ldd	r18, Y+1	; 0x01
 *
 * This function gets DC_FRAME_SIZE  bytes of dot correct values from EEPROM and puts them in buf
 *	NEEDS TO CONVERT 6-BIT TO 8 BIT BYTES
 */

void getDotCorrect(uint8_t *buf)
    212c:	f8 01       	movw	r30, r16
    212e:	33 97       	sbiw	r30, 0x03	; 3
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
	{
		//Read the block containing the next 4 ledChannel DC values
		eeprom_read_block(temp, dc_frame+ledChannel/4, 3);
		
		buf[ledChannel]   = temp[0] >> 2;
    2130:	82 2f       	mov	r24, r18
    2132:	86 95       	lsr	r24
    2134:	86 95       	lsr	r24
    2136:	80 83       	st	Z, r24
		buf[ledChannel+1] = ((temp[0] & 0x03) << 4) | (temp[1] >> 4);
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
 *
 * This function gets DC_FRAME_SIZE  bytes of dot correct values from EEPROM and puts them in buf
 *	NEEDS TO CONVERT 6-BIT TO 8 BIT BYTES
 */

void getDotCorrect(uint8_t *buf)
    213a:	f8 01       	movw	r30, r16
    213c:	32 97       	sbiw	r30, 0x02	; 2
	{
		//Read the block containing the next 4 ledChannel DC values
		eeprom_read_block(temp, dc_frame+ledChannel/4, 3);
		
		buf[ledChannel]   = temp[0] >> 2;
		buf[ledChannel+1] = ((temp[0] & 0x03) << 4) | (temp[1] >> 4);
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	23 70       	andi	r18, 0x03	; 3
    2142:	30 70       	andi	r19, 0x00	; 0
    2144:	22 95       	swap	r18
    2146:	32 95       	swap	r19
    2148:	30 7f       	andi	r19, 0xF0	; 240
    214a:	32 27       	eor	r19, r18
    214c:	20 7f       	andi	r18, 0xF0	; 240
    214e:	32 27       	eor	r19, r18
    2150:	98 2f       	mov	r25, r24
    2152:	92 95       	swap	r25
    2154:	9f 70       	andi	r25, 0x0F	; 15
    2156:	29 2b       	or	r18, r25
    2158:	20 83       	st	Z, r18
		buf[ledChannel+2] = ((temp[1] & 0x0F) << 2) | (temp[2] >> 6);
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
 *
 * This function gets DC_FRAME_SIZE  bytes of dot correct values from EEPROM and puts them in buf
 *	NEEDS TO CONVERT 6-BIT TO 8 BIT BYTES
 */

void getDotCorrect(uint8_t *buf)
    215c:	f8 01       	movw	r30, r16
    215e:	31 97       	sbiw	r30, 0x01	; 1
		//Read the block containing the next 4 ledChannel DC values
		eeprom_read_block(temp, dc_frame+ledChannel/4, 3);
		
		buf[ledChannel]   = temp[0] >> 2;
		buf[ledChannel+1] = ((temp[0] & 0x03) << 4) | (temp[1] >> 4);
		buf[ledChannel+2] = ((temp[1] & 0x0F) << 2) | (temp[2] >> 6);
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	8f 70       	andi	r24, 0x0F	; 15
    2164:	90 70       	andi	r25, 0x00	; 0
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	92 2f       	mov	r25, r18
    2170:	92 95       	swap	r25
    2172:	96 95       	lsr	r25
    2174:	96 95       	lsr	r25
    2176:	93 70       	andi	r25, 0x03	; 3
    2178:	89 2b       	or	r24, r25
    217a:	80 83       	st	Z, r24
		buf[ledChannel+3] = temp[2] & 0x3F;
    217c:	2f 73       	andi	r18, 0x3F	; 63
    217e:	f8 01       	movw	r30, r16
    2180:	20 83       	st	Z, r18
{
	//Each block of 3 bytes holds 4 6-bit DC values
	uint8_t temp[3];
	
	//Read DC values from EEPROM
	for(uint8_t ledChannel = 0; ledChannel < NUM_TLC5941*16; ledChannel+=4)
    2182:	f4 e0       	ldi	r31, 0x04	; 4
    2184:	ff 0e       	add	r15, r31
    2186:	0c 5f       	subi	r16, 0xFC	; 252
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	80 ec       	ldi	r24, 0xC0	; 192
    218c:	f8 16       	cp	r15, r24
    218e:	09 f6       	brne	.-126    	; 0x2112 <getDotCorrect+0x1a>
		buf[ledChannel]   = temp[0] >> 2;
		buf[ledChannel+1] = ((temp[0] & 0x03) << 4) | (temp[1] >> 4);
		buf[ledChannel+2] = ((temp[1] & 0x0F) << 2) | (temp[2] >> 6);
		buf[ledChannel+3] = temp[2] & 0x3F;
	}		
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	08 95       	ret

000021a2 <__vector_11>:
 *	The signal to latch is determined by the update flag. A latch will occur if update == 1.
 *
 *  ISR for Timer1 compare match (TLC5941 timer MAX reached)
 */
ISR(TIMER1_COMPA_vect)
{
    21a2:	1f 92       	push	r1
    21a4:	0f 92       	push	r0
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	0f 92       	push	r0
    21aa:	11 24       	eor	r1, r1
    21ac:	2f 93       	push	r18
    21ae:	3f 93       	push	r19
    21b0:	4f 93       	push	r20
    21b2:	5f 93       	push	r21
    21b4:	6f 93       	push	r22
    21b6:	7f 93       	push	r23
    21b8:	8f 93       	push	r24
    21ba:	9f 93       	push	r25
    21bc:	af 93       	push	r26
    21be:	bf 93       	push	r27
    21c0:	ef 93       	push	r30
    21c2:	ff 93       	push	r31
	//Stop GSCLK
	GSCLK_stop();
    21c4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <GSCLK_stop>
	
	//Set BLANK High, clears TLC's GS counter
	BLANK_PORT |= BLANK_PIN;
    21c8:	5f 9a       	sbi	0x0b, 7	; 11
	
	//clear TCNT1, the timer that keeps track of the TLC's GS counter
	TCNT1 = 0x0000;
    21ca:	10 92 85 00 	sts	0x0085, r1
    21ce:	10 92 84 00 	sts	0x0084, r1
	
	//Update if needed
	if(latchNextCycle)
    21d2:	80 91 19 03 	lds	r24, 0x0319
    21d6:	88 23       	and	r24, r24
    21d8:	21 f0       	breq	.+8      	; 0x21e2 <__vector_11+0x40>
	{
		//Frame should be previously written, latch data
		//Set XLAT High (pulse duration >= 20 ns, 10 MHz => 100 ns per clock cycle)
		XLAT_PORT |= XLAT_PIN;
    21da:	28 9a       	sbi	0x05, 0	; 5

		//Set XLAT Low
		XLAT_PORT &= ~XLAT_PIN;
    21dc:	28 98       	cbi	0x05, 0	; 5
		
		//Clear update flag
		latchNextCycle = 0;
    21de:	10 92 19 03 	sts	0x0319, r1
	}
		
	//Set BLANK Low
	BLANK_PORT &= ~BLANK_PIN;
    21e2:	5f 98       	cbi	0x0b, 7	; 11
	
	//Start GSCLK
	GSCLK_start();
    21e4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <GSCLK_start>
}
    21e8:	ff 91       	pop	r31
    21ea:	ef 91       	pop	r30
    21ec:	bf 91       	pop	r27
    21ee:	af 91       	pop	r26
    21f0:	9f 91       	pop	r25
    21f2:	8f 91       	pop	r24
    21f4:	7f 91       	pop	r23
    21f6:	6f 91       	pop	r22
    21f8:	5f 91       	pop	r21
    21fa:	4f 91       	pop	r20
    21fc:	3f 91       	pop	r19
    21fe:	2f 91       	pop	r18
    2200:	0f 90       	pop	r0
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	0f 90       	pop	r0
    2206:	1f 90       	pop	r1
    2208:	18 95       	reti

0000220a <__subsf3>:
    220a:	50 58       	subi	r21, 0x80	; 128

0000220c <__addsf3>:
    220c:	bb 27       	eor	r27, r27
    220e:	aa 27       	eor	r26, r26
    2210:	0e d0       	rcall	.+28     	; 0x222e <__addsf3x>
    2212:	48 c1       	rjmp	.+656    	; 0x24a4 <__fp_round>
    2214:	39 d1       	rcall	.+626    	; 0x2488 <__fp_pscA>
    2216:	30 f0       	brcs	.+12     	; 0x2224 <__addsf3+0x18>
    2218:	3e d1       	rcall	.+636    	; 0x2496 <__fp_pscB>
    221a:	20 f0       	brcs	.+8      	; 0x2224 <__addsf3+0x18>
    221c:	31 f4       	brne	.+12     	; 0x222a <__addsf3+0x1e>
    221e:	9f 3f       	cpi	r25, 0xFF	; 255
    2220:	11 f4       	brne	.+4      	; 0x2226 <__addsf3+0x1a>
    2222:	1e f4       	brtc	.+6      	; 0x222a <__addsf3+0x1e>
    2224:	2e c1       	rjmp	.+604    	; 0x2482 <__fp_nan>
    2226:	0e f4       	brtc	.+2      	; 0x222a <__addsf3+0x1e>
    2228:	e0 95       	com	r30
    222a:	e7 fb       	bst	r30, 7
    222c:	24 c1       	rjmp	.+584    	; 0x2476 <__fp_inf>

0000222e <__addsf3x>:
    222e:	e9 2f       	mov	r30, r25
    2230:	4a d1       	rcall	.+660    	; 0x24c6 <__fp_split3>
    2232:	80 f3       	brcs	.-32     	; 0x2214 <__addsf3+0x8>
    2234:	ba 17       	cp	r27, r26
    2236:	62 07       	cpc	r22, r18
    2238:	73 07       	cpc	r23, r19
    223a:	84 07       	cpc	r24, r20
    223c:	95 07       	cpc	r25, r21
    223e:	18 f0       	brcs	.+6      	; 0x2246 <__addsf3x+0x18>
    2240:	71 f4       	brne	.+28     	; 0x225e <__addsf3x+0x30>
    2242:	9e f5       	brtc	.+102    	; 0x22aa <__addsf3x+0x7c>
    2244:	62 c1       	rjmp	.+708    	; 0x250a <__fp_zero>
    2246:	0e f4       	brtc	.+2      	; 0x224a <__addsf3x+0x1c>
    2248:	e0 95       	com	r30
    224a:	0b 2e       	mov	r0, r27
    224c:	ba 2f       	mov	r27, r26
    224e:	a0 2d       	mov	r26, r0
    2250:	0b 01       	movw	r0, r22
    2252:	b9 01       	movw	r22, r18
    2254:	90 01       	movw	r18, r0
    2256:	0c 01       	movw	r0, r24
    2258:	ca 01       	movw	r24, r20
    225a:	a0 01       	movw	r20, r0
    225c:	11 24       	eor	r1, r1
    225e:	ff 27       	eor	r31, r31
    2260:	59 1b       	sub	r21, r25
    2262:	99 f0       	breq	.+38     	; 0x228a <__addsf3x+0x5c>
    2264:	59 3f       	cpi	r21, 0xF9	; 249
    2266:	50 f4       	brcc	.+20     	; 0x227c <__addsf3x+0x4e>
    2268:	50 3e       	cpi	r21, 0xE0	; 224
    226a:	68 f1       	brcs	.+90     	; 0x22c6 <__addsf3x+0x98>
    226c:	1a 16       	cp	r1, r26
    226e:	f0 40       	sbci	r31, 0x00	; 0
    2270:	a2 2f       	mov	r26, r18
    2272:	23 2f       	mov	r18, r19
    2274:	34 2f       	mov	r19, r20
    2276:	44 27       	eor	r20, r20
    2278:	58 5f       	subi	r21, 0xF8	; 248
    227a:	f3 cf       	rjmp	.-26     	; 0x2262 <__addsf3x+0x34>
    227c:	46 95       	lsr	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	a7 95       	ror	r26
    2284:	f0 40       	sbci	r31, 0x00	; 0
    2286:	53 95       	inc	r21
    2288:	c9 f7       	brne	.-14     	; 0x227c <__addsf3x+0x4e>
    228a:	7e f4       	brtc	.+30     	; 0x22aa <__addsf3x+0x7c>
    228c:	1f 16       	cp	r1, r31
    228e:	ba 0b       	sbc	r27, r26
    2290:	62 0b       	sbc	r22, r18
    2292:	73 0b       	sbc	r23, r19
    2294:	84 0b       	sbc	r24, r20
    2296:	ba f0       	brmi	.+46     	; 0x22c6 <__addsf3x+0x98>
    2298:	91 50       	subi	r25, 0x01	; 1
    229a:	a1 f0       	breq	.+40     	; 0x22c4 <__addsf3x+0x96>
    229c:	ff 0f       	add	r31, r31
    229e:	bb 1f       	adc	r27, r27
    22a0:	66 1f       	adc	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	c2 f7       	brpl	.-16     	; 0x2298 <__addsf3x+0x6a>
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <__addsf3x+0x98>
    22aa:	ba 0f       	add	r27, r26
    22ac:	62 1f       	adc	r22, r18
    22ae:	73 1f       	adc	r23, r19
    22b0:	84 1f       	adc	r24, r20
    22b2:	48 f4       	brcc	.+18     	; 0x22c6 <__addsf3x+0x98>
    22b4:	87 95       	ror	r24
    22b6:	77 95       	ror	r23
    22b8:	67 95       	ror	r22
    22ba:	b7 95       	ror	r27
    22bc:	f7 95       	ror	r31
    22be:	9e 3f       	cpi	r25, 0xFE	; 254
    22c0:	08 f0       	brcs	.+2      	; 0x22c4 <__addsf3x+0x96>
    22c2:	b3 cf       	rjmp	.-154    	; 0x222a <__addsf3+0x1e>
    22c4:	93 95       	inc	r25
    22c6:	88 0f       	add	r24, r24
    22c8:	08 f0       	brcs	.+2      	; 0x22cc <__addsf3x+0x9e>
    22ca:	99 27       	eor	r25, r25
    22cc:	ee 0f       	add	r30, r30
    22ce:	97 95       	ror	r25
    22d0:	87 95       	ror	r24
    22d2:	08 95       	ret

000022d4 <__divsf3>:
    22d4:	0c d0       	rcall	.+24     	; 0x22ee <__divsf3x>
    22d6:	e6 c0       	rjmp	.+460    	; 0x24a4 <__fp_round>
    22d8:	de d0       	rcall	.+444    	; 0x2496 <__fp_pscB>
    22da:	40 f0       	brcs	.+16     	; 0x22ec <__divsf3+0x18>
    22dc:	d5 d0       	rcall	.+426    	; 0x2488 <__fp_pscA>
    22de:	30 f0       	brcs	.+12     	; 0x22ec <__divsf3+0x18>
    22e0:	21 f4       	brne	.+8      	; 0x22ea <__divsf3+0x16>
    22e2:	5f 3f       	cpi	r21, 0xFF	; 255
    22e4:	19 f0       	breq	.+6      	; 0x22ec <__divsf3+0x18>
    22e6:	c7 c0       	rjmp	.+398    	; 0x2476 <__fp_inf>
    22e8:	51 11       	cpse	r21, r1
    22ea:	10 c1       	rjmp	.+544    	; 0x250c <__fp_szero>
    22ec:	ca c0       	rjmp	.+404    	; 0x2482 <__fp_nan>

000022ee <__divsf3x>:
    22ee:	eb d0       	rcall	.+470    	; 0x24c6 <__fp_split3>
    22f0:	98 f3       	brcs	.-26     	; 0x22d8 <__divsf3+0x4>

000022f2 <__divsf3_pse>:
    22f2:	99 23       	and	r25, r25
    22f4:	c9 f3       	breq	.-14     	; 0x22e8 <__divsf3+0x14>
    22f6:	55 23       	and	r21, r21
    22f8:	b1 f3       	breq	.-20     	; 0x22e6 <__divsf3+0x12>
    22fa:	95 1b       	sub	r25, r21
    22fc:	55 0b       	sbc	r21, r21
    22fe:	bb 27       	eor	r27, r27
    2300:	aa 27       	eor	r26, r26
    2302:	62 17       	cp	r22, r18
    2304:	73 07       	cpc	r23, r19
    2306:	84 07       	cpc	r24, r20
    2308:	38 f0       	brcs	.+14     	; 0x2318 <__divsf3_pse+0x26>
    230a:	9f 5f       	subi	r25, 0xFF	; 255
    230c:	5f 4f       	sbci	r21, 0xFF	; 255
    230e:	22 0f       	add	r18, r18
    2310:	33 1f       	adc	r19, r19
    2312:	44 1f       	adc	r20, r20
    2314:	aa 1f       	adc	r26, r26
    2316:	a9 f3       	breq	.-22     	; 0x2302 <__divsf3_pse+0x10>
    2318:	33 d0       	rcall	.+102    	; 0x2380 <__divsf3_pse+0x8e>
    231a:	0e 2e       	mov	r0, r30
    231c:	3a f0       	brmi	.+14     	; 0x232c <__divsf3_pse+0x3a>
    231e:	e0 e8       	ldi	r30, 0x80	; 128
    2320:	30 d0       	rcall	.+96     	; 0x2382 <__divsf3_pse+0x90>
    2322:	91 50       	subi	r25, 0x01	; 1
    2324:	50 40       	sbci	r21, 0x00	; 0
    2326:	e6 95       	lsr	r30
    2328:	00 1c       	adc	r0, r0
    232a:	ca f7       	brpl	.-14     	; 0x231e <__divsf3_pse+0x2c>
    232c:	29 d0       	rcall	.+82     	; 0x2380 <__divsf3_pse+0x8e>
    232e:	fe 2f       	mov	r31, r30
    2330:	27 d0       	rcall	.+78     	; 0x2380 <__divsf3_pse+0x8e>
    2332:	66 0f       	add	r22, r22
    2334:	77 1f       	adc	r23, r23
    2336:	88 1f       	adc	r24, r24
    2338:	bb 1f       	adc	r27, r27
    233a:	26 17       	cp	r18, r22
    233c:	37 07       	cpc	r19, r23
    233e:	48 07       	cpc	r20, r24
    2340:	ab 07       	cpc	r26, r27
    2342:	b0 e8       	ldi	r27, 0x80	; 128
    2344:	09 f0       	breq	.+2      	; 0x2348 <__divsf3_pse+0x56>
    2346:	bb 0b       	sbc	r27, r27
    2348:	80 2d       	mov	r24, r0
    234a:	bf 01       	movw	r22, r30
    234c:	ff 27       	eor	r31, r31
    234e:	93 58       	subi	r25, 0x83	; 131
    2350:	5f 4f       	sbci	r21, 0xFF	; 255
    2352:	2a f0       	brmi	.+10     	; 0x235e <__divsf3_pse+0x6c>
    2354:	9e 3f       	cpi	r25, 0xFE	; 254
    2356:	51 05       	cpc	r21, r1
    2358:	68 f0       	brcs	.+26     	; 0x2374 <__divsf3_pse+0x82>
    235a:	8d c0       	rjmp	.+282    	; 0x2476 <__fp_inf>
    235c:	d7 c0       	rjmp	.+430    	; 0x250c <__fp_szero>
    235e:	5f 3f       	cpi	r21, 0xFF	; 255
    2360:	ec f3       	brlt	.-6      	; 0x235c <__divsf3_pse+0x6a>
    2362:	98 3e       	cpi	r25, 0xE8	; 232
    2364:	dc f3       	brlt	.-10     	; 0x235c <__divsf3_pse+0x6a>
    2366:	86 95       	lsr	r24
    2368:	77 95       	ror	r23
    236a:	67 95       	ror	r22
    236c:	b7 95       	ror	r27
    236e:	f7 95       	ror	r31
    2370:	9f 5f       	subi	r25, 0xFF	; 255
    2372:	c9 f7       	brne	.-14     	; 0x2366 <__divsf3_pse+0x74>
    2374:	88 0f       	add	r24, r24
    2376:	91 1d       	adc	r25, r1
    2378:	96 95       	lsr	r25
    237a:	87 95       	ror	r24
    237c:	97 f9       	bld	r25, 7
    237e:	08 95       	ret
    2380:	e1 e0       	ldi	r30, 0x01	; 1
    2382:	66 0f       	add	r22, r22
    2384:	77 1f       	adc	r23, r23
    2386:	88 1f       	adc	r24, r24
    2388:	bb 1f       	adc	r27, r27
    238a:	62 17       	cp	r22, r18
    238c:	73 07       	cpc	r23, r19
    238e:	84 07       	cpc	r24, r20
    2390:	ba 07       	cpc	r27, r26
    2392:	20 f0       	brcs	.+8      	; 0x239c <__divsf3_pse+0xaa>
    2394:	62 1b       	sub	r22, r18
    2396:	73 0b       	sbc	r23, r19
    2398:	84 0b       	sbc	r24, r20
    239a:	ba 0b       	sbc	r27, r26
    239c:	ee 1f       	adc	r30, r30
    239e:	88 f7       	brcc	.-30     	; 0x2382 <__divsf3_pse+0x90>
    23a0:	e0 95       	com	r30
    23a2:	08 95       	ret

000023a4 <__fixunssfsi>:
    23a4:	98 d0       	rcall	.+304    	; 0x24d6 <__fp_splitA>
    23a6:	88 f0       	brcs	.+34     	; 0x23ca <__fixunssfsi+0x26>
    23a8:	9f 57       	subi	r25, 0x7F	; 127
    23aa:	90 f0       	brcs	.+36     	; 0x23d0 <__fixunssfsi+0x2c>
    23ac:	b9 2f       	mov	r27, r25
    23ae:	99 27       	eor	r25, r25
    23b0:	b7 51       	subi	r27, 0x17	; 23
    23b2:	a0 f0       	brcs	.+40     	; 0x23dc <__fixunssfsi+0x38>
    23b4:	d1 f0       	breq	.+52     	; 0x23ea <__fixunssfsi+0x46>
    23b6:	66 0f       	add	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	88 1f       	adc	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	1a f0       	brmi	.+6      	; 0x23c6 <__fixunssfsi+0x22>
    23c0:	ba 95       	dec	r27
    23c2:	c9 f7       	brne	.-14     	; 0x23b6 <__fixunssfsi+0x12>
    23c4:	12 c0       	rjmp	.+36     	; 0x23ea <__fixunssfsi+0x46>
    23c6:	b1 30       	cpi	r27, 0x01	; 1
    23c8:	81 f0       	breq	.+32     	; 0x23ea <__fixunssfsi+0x46>
    23ca:	9f d0       	rcall	.+318    	; 0x250a <__fp_zero>
    23cc:	b1 e0       	ldi	r27, 0x01	; 1
    23ce:	08 95       	ret
    23d0:	9c c0       	rjmp	.+312    	; 0x250a <__fp_zero>
    23d2:	67 2f       	mov	r22, r23
    23d4:	78 2f       	mov	r23, r24
    23d6:	88 27       	eor	r24, r24
    23d8:	b8 5f       	subi	r27, 0xF8	; 248
    23da:	39 f0       	breq	.+14     	; 0x23ea <__fixunssfsi+0x46>
    23dc:	b9 3f       	cpi	r27, 0xF9	; 249
    23de:	cc f3       	brlt	.-14     	; 0x23d2 <__fixunssfsi+0x2e>
    23e0:	86 95       	lsr	r24
    23e2:	77 95       	ror	r23
    23e4:	67 95       	ror	r22
    23e6:	b3 95       	inc	r27
    23e8:	d9 f7       	brne	.-10     	; 0x23e0 <__fixunssfsi+0x3c>
    23ea:	3e f4       	brtc	.+14     	; 0x23fa <__fixunssfsi+0x56>
    23ec:	90 95       	com	r25
    23ee:	80 95       	com	r24
    23f0:	70 95       	com	r23
    23f2:	61 95       	neg	r22
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	8f 4f       	sbci	r24, 0xFF	; 255
    23f8:	9f 4f       	sbci	r25, 0xFF	; 255
    23fa:	08 95       	ret

000023fc <__floatunsisf>:
    23fc:	e8 94       	clt
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <__floatsisf+0x12>

00002400 <__floatsisf>:
    2400:	97 fb       	bst	r25, 7
    2402:	3e f4       	brtc	.+14     	; 0x2412 <__floatsisf+0x12>
    2404:	90 95       	com	r25
    2406:	80 95       	com	r24
    2408:	70 95       	com	r23
    240a:	61 95       	neg	r22
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	8f 4f       	sbci	r24, 0xFF	; 255
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	99 23       	and	r25, r25
    2414:	a9 f0       	breq	.+42     	; 0x2440 <__floatsisf+0x40>
    2416:	f9 2f       	mov	r31, r25
    2418:	96 e9       	ldi	r25, 0x96	; 150
    241a:	bb 27       	eor	r27, r27
    241c:	93 95       	inc	r25
    241e:	f6 95       	lsr	r31
    2420:	87 95       	ror	r24
    2422:	77 95       	ror	r23
    2424:	67 95       	ror	r22
    2426:	b7 95       	ror	r27
    2428:	f1 11       	cpse	r31, r1
    242a:	f8 cf       	rjmp	.-16     	; 0x241c <__floatsisf+0x1c>
    242c:	fa f4       	brpl	.+62     	; 0x246c <__floatsisf+0x6c>
    242e:	bb 0f       	add	r27, r27
    2430:	11 f4       	brne	.+4      	; 0x2436 <__floatsisf+0x36>
    2432:	60 ff       	sbrs	r22, 0
    2434:	1b c0       	rjmp	.+54     	; 0x246c <__floatsisf+0x6c>
    2436:	6f 5f       	subi	r22, 0xFF	; 255
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	8f 4f       	sbci	r24, 0xFF	; 255
    243c:	9f 4f       	sbci	r25, 0xFF	; 255
    243e:	16 c0       	rjmp	.+44     	; 0x246c <__floatsisf+0x6c>
    2440:	88 23       	and	r24, r24
    2442:	11 f0       	breq	.+4      	; 0x2448 <__floatsisf+0x48>
    2444:	96 e9       	ldi	r25, 0x96	; 150
    2446:	11 c0       	rjmp	.+34     	; 0x246a <__floatsisf+0x6a>
    2448:	77 23       	and	r23, r23
    244a:	21 f0       	breq	.+8      	; 0x2454 <__floatsisf+0x54>
    244c:	9e e8       	ldi	r25, 0x8E	; 142
    244e:	87 2f       	mov	r24, r23
    2450:	76 2f       	mov	r23, r22
    2452:	05 c0       	rjmp	.+10     	; 0x245e <__floatsisf+0x5e>
    2454:	66 23       	and	r22, r22
    2456:	71 f0       	breq	.+28     	; 0x2474 <__floatsisf+0x74>
    2458:	96 e8       	ldi	r25, 0x86	; 134
    245a:	86 2f       	mov	r24, r22
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	2a f0       	brmi	.+10     	; 0x246c <__floatsisf+0x6c>
    2462:	9a 95       	dec	r25
    2464:	66 0f       	add	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	da f7       	brpl	.-10     	; 0x2462 <__floatsisf+0x62>
    246c:	88 0f       	add	r24, r24
    246e:	96 95       	lsr	r25
    2470:	87 95       	ror	r24
    2472:	97 f9       	bld	r25, 7
    2474:	08 95       	ret

00002476 <__fp_inf>:
    2476:	97 f9       	bld	r25, 7
    2478:	9f 67       	ori	r25, 0x7F	; 127
    247a:	80 e8       	ldi	r24, 0x80	; 128
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	08 95       	ret

00002482 <__fp_nan>:
    2482:	9f ef       	ldi	r25, 0xFF	; 255
    2484:	80 ec       	ldi	r24, 0xC0	; 192
    2486:	08 95       	ret

00002488 <__fp_pscA>:
    2488:	00 24       	eor	r0, r0
    248a:	0a 94       	dec	r0
    248c:	16 16       	cp	r1, r22
    248e:	17 06       	cpc	r1, r23
    2490:	18 06       	cpc	r1, r24
    2492:	09 06       	cpc	r0, r25
    2494:	08 95       	ret

00002496 <__fp_pscB>:
    2496:	00 24       	eor	r0, r0
    2498:	0a 94       	dec	r0
    249a:	12 16       	cp	r1, r18
    249c:	13 06       	cpc	r1, r19
    249e:	14 06       	cpc	r1, r20
    24a0:	05 06       	cpc	r0, r21
    24a2:	08 95       	ret

000024a4 <__fp_round>:
    24a4:	09 2e       	mov	r0, r25
    24a6:	03 94       	inc	r0
    24a8:	00 0c       	add	r0, r0
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <__fp_round+0xc>
    24ac:	88 23       	and	r24, r24
    24ae:	52 f0       	brmi	.+20     	; 0x24c4 <__fp_round+0x20>
    24b0:	bb 0f       	add	r27, r27
    24b2:	40 f4       	brcc	.+16     	; 0x24c4 <__fp_round+0x20>
    24b4:	bf 2b       	or	r27, r31
    24b6:	11 f4       	brne	.+4      	; 0x24bc <__fp_round+0x18>
    24b8:	60 ff       	sbrs	r22, 0
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <__fp_round+0x20>
    24bc:	6f 5f       	subi	r22, 0xFF	; 255
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	8f 4f       	sbci	r24, 0xFF	; 255
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	08 95       	ret

000024c6 <__fp_split3>:
    24c6:	57 fd       	sbrc	r21, 7
    24c8:	90 58       	subi	r25, 0x80	; 128
    24ca:	44 0f       	add	r20, r20
    24cc:	55 1f       	adc	r21, r21
    24ce:	59 f0       	breq	.+22     	; 0x24e6 <__fp_splitA+0x10>
    24d0:	5f 3f       	cpi	r21, 0xFF	; 255
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <__fp_splitA+0x1a>
    24d4:	47 95       	ror	r20

000024d6 <__fp_splitA>:
    24d6:	88 0f       	add	r24, r24
    24d8:	97 fb       	bst	r25, 7
    24da:	99 1f       	adc	r25, r25
    24dc:	61 f0       	breq	.+24     	; 0x24f6 <__fp_splitA+0x20>
    24de:	9f 3f       	cpi	r25, 0xFF	; 255
    24e0:	79 f0       	breq	.+30     	; 0x2500 <__fp_splitA+0x2a>
    24e2:	87 95       	ror	r24
    24e4:	08 95       	ret
    24e6:	12 16       	cp	r1, r18
    24e8:	13 06       	cpc	r1, r19
    24ea:	14 06       	cpc	r1, r20
    24ec:	55 1f       	adc	r21, r21
    24ee:	f2 cf       	rjmp	.-28     	; 0x24d4 <__fp_split3+0xe>
    24f0:	46 95       	lsr	r20
    24f2:	f1 df       	rcall	.-30     	; 0x24d6 <__fp_splitA>
    24f4:	08 c0       	rjmp	.+16     	; 0x2506 <__fp_splitA+0x30>
    24f6:	16 16       	cp	r1, r22
    24f8:	17 06       	cpc	r1, r23
    24fa:	18 06       	cpc	r1, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	f1 cf       	rjmp	.-30     	; 0x24e2 <__fp_splitA+0xc>
    2500:	86 95       	lsr	r24
    2502:	71 05       	cpc	r23, r1
    2504:	61 05       	cpc	r22, r1
    2506:	08 94       	sec
    2508:	08 95       	ret

0000250a <__fp_zero>:
    250a:	e8 94       	clt

0000250c <__fp_szero>:
    250c:	bb 27       	eor	r27, r27
    250e:	66 27       	eor	r22, r22
    2510:	77 27       	eor	r23, r23
    2512:	cb 01       	movw	r24, r22
    2514:	97 f9       	bld	r25, 7
    2516:	08 95       	ret

00002518 <__mulsf3>:
    2518:	0b d0       	rcall	.+22     	; 0x2530 <__mulsf3x>
    251a:	c4 cf       	rjmp	.-120    	; 0x24a4 <__fp_round>
    251c:	b5 df       	rcall	.-150    	; 0x2488 <__fp_pscA>
    251e:	28 f0       	brcs	.+10     	; 0x252a <__mulsf3+0x12>
    2520:	ba df       	rcall	.-140    	; 0x2496 <__fp_pscB>
    2522:	18 f0       	brcs	.+6      	; 0x252a <__mulsf3+0x12>
    2524:	95 23       	and	r25, r21
    2526:	09 f0       	breq	.+2      	; 0x252a <__mulsf3+0x12>
    2528:	a6 cf       	rjmp	.-180    	; 0x2476 <__fp_inf>
    252a:	ab cf       	rjmp	.-170    	; 0x2482 <__fp_nan>
    252c:	11 24       	eor	r1, r1
    252e:	ee cf       	rjmp	.-36     	; 0x250c <__fp_szero>

00002530 <__mulsf3x>:
    2530:	ca df       	rcall	.-108    	; 0x24c6 <__fp_split3>
    2532:	a0 f3       	brcs	.-24     	; 0x251c <__mulsf3+0x4>

00002534 <__mulsf3_pse>:
    2534:	95 9f       	mul	r25, r21
    2536:	d1 f3       	breq	.-12     	; 0x252c <__mulsf3+0x14>
    2538:	95 0f       	add	r25, r21
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	55 1f       	adc	r21, r21
    253e:	62 9f       	mul	r22, r18
    2540:	f0 01       	movw	r30, r0
    2542:	72 9f       	mul	r23, r18
    2544:	bb 27       	eor	r27, r27
    2546:	f0 0d       	add	r31, r0
    2548:	b1 1d       	adc	r27, r1
    254a:	63 9f       	mul	r22, r19
    254c:	aa 27       	eor	r26, r26
    254e:	f0 0d       	add	r31, r0
    2550:	b1 1d       	adc	r27, r1
    2552:	aa 1f       	adc	r26, r26
    2554:	64 9f       	mul	r22, r20
    2556:	66 27       	eor	r22, r22
    2558:	b0 0d       	add	r27, r0
    255a:	a1 1d       	adc	r26, r1
    255c:	66 1f       	adc	r22, r22
    255e:	82 9f       	mul	r24, r18
    2560:	22 27       	eor	r18, r18
    2562:	b0 0d       	add	r27, r0
    2564:	a1 1d       	adc	r26, r1
    2566:	62 1f       	adc	r22, r18
    2568:	73 9f       	mul	r23, r19
    256a:	b0 0d       	add	r27, r0
    256c:	a1 1d       	adc	r26, r1
    256e:	62 1f       	adc	r22, r18
    2570:	83 9f       	mul	r24, r19
    2572:	a0 0d       	add	r26, r0
    2574:	61 1d       	adc	r22, r1
    2576:	22 1f       	adc	r18, r18
    2578:	74 9f       	mul	r23, r20
    257a:	33 27       	eor	r19, r19
    257c:	a0 0d       	add	r26, r0
    257e:	61 1d       	adc	r22, r1
    2580:	23 1f       	adc	r18, r19
    2582:	84 9f       	mul	r24, r20
    2584:	60 0d       	add	r22, r0
    2586:	21 1d       	adc	r18, r1
    2588:	82 2f       	mov	r24, r18
    258a:	76 2f       	mov	r23, r22
    258c:	6a 2f       	mov	r22, r26
    258e:	11 24       	eor	r1, r1
    2590:	9f 57       	subi	r25, 0x7F	; 127
    2592:	50 40       	sbci	r21, 0x00	; 0
    2594:	8a f0       	brmi	.+34     	; 0x25b8 <__mulsf3_pse+0x84>
    2596:	e1 f0       	breq	.+56     	; 0x25d0 <__mulsf3_pse+0x9c>
    2598:	88 23       	and	r24, r24
    259a:	4a f0       	brmi	.+18     	; 0x25ae <__mulsf3_pse+0x7a>
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	bb 1f       	adc	r27, r27
    25a2:	66 1f       	adc	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	88 1f       	adc	r24, r24
    25a8:	91 50       	subi	r25, 0x01	; 1
    25aa:	50 40       	sbci	r21, 0x00	; 0
    25ac:	a9 f7       	brne	.-22     	; 0x2598 <__mulsf3_pse+0x64>
    25ae:	9e 3f       	cpi	r25, 0xFE	; 254
    25b0:	51 05       	cpc	r21, r1
    25b2:	70 f0       	brcs	.+28     	; 0x25d0 <__mulsf3_pse+0x9c>
    25b4:	60 cf       	rjmp	.-320    	; 0x2476 <__fp_inf>
    25b6:	aa cf       	rjmp	.-172    	; 0x250c <__fp_szero>
    25b8:	5f 3f       	cpi	r21, 0xFF	; 255
    25ba:	ec f3       	brlt	.-6      	; 0x25b6 <__mulsf3_pse+0x82>
    25bc:	98 3e       	cpi	r25, 0xE8	; 232
    25be:	dc f3       	brlt	.-10     	; 0x25b6 <__mulsf3_pse+0x82>
    25c0:	86 95       	lsr	r24
    25c2:	77 95       	ror	r23
    25c4:	67 95       	ror	r22
    25c6:	b7 95       	ror	r27
    25c8:	f7 95       	ror	r31
    25ca:	e7 95       	ror	r30
    25cc:	9f 5f       	subi	r25, 0xFF	; 255
    25ce:	c1 f7       	brne	.-16     	; 0x25c0 <__mulsf3_pse+0x8c>
    25d0:	fe 2b       	or	r31, r30
    25d2:	88 0f       	add	r24, r24
    25d4:	91 1d       	adc	r25, r1
    25d6:	96 95       	lsr	r25
    25d8:	87 95       	ror	r24
    25da:	97 f9       	bld	r25, 7
    25dc:	08 95       	ret

000025de <__mulsi3>:
    25de:	62 9f       	mul	r22, r18
    25e0:	d0 01       	movw	r26, r0
    25e2:	73 9f       	mul	r23, r19
    25e4:	f0 01       	movw	r30, r0
    25e6:	82 9f       	mul	r24, r18
    25e8:	e0 0d       	add	r30, r0
    25ea:	f1 1d       	adc	r31, r1
    25ec:	64 9f       	mul	r22, r20
    25ee:	e0 0d       	add	r30, r0
    25f0:	f1 1d       	adc	r31, r1
    25f2:	92 9f       	mul	r25, r18
    25f4:	f0 0d       	add	r31, r0
    25f6:	83 9f       	mul	r24, r19
    25f8:	f0 0d       	add	r31, r0
    25fa:	74 9f       	mul	r23, r20
    25fc:	f0 0d       	add	r31, r0
    25fe:	65 9f       	mul	r22, r21
    2600:	f0 0d       	add	r31, r0
    2602:	99 27       	eor	r25, r25
    2604:	72 9f       	mul	r23, r18
    2606:	b0 0d       	add	r27, r0
    2608:	e1 1d       	adc	r30, r1
    260a:	f9 1f       	adc	r31, r25
    260c:	63 9f       	mul	r22, r19
    260e:	b0 0d       	add	r27, r0
    2610:	e1 1d       	adc	r30, r1
    2612:	f9 1f       	adc	r31, r25
    2614:	bd 01       	movw	r22, r26
    2616:	cf 01       	movw	r24, r30
    2618:	11 24       	eor	r1, r1
    261a:	08 95       	ret

0000261c <__divmodhi4>:
    261c:	97 fb       	bst	r25, 7
    261e:	09 2e       	mov	r0, r25
    2620:	07 26       	eor	r0, r23
    2622:	0a d0       	rcall	.+20     	; 0x2638 <__divmodhi4_neg1>
    2624:	77 fd       	sbrc	r23, 7
    2626:	04 d0       	rcall	.+8      	; 0x2630 <__divmodhi4_neg2>
    2628:	0c d0       	rcall	.+24     	; 0x2642 <__udivmodhi4>
    262a:	06 d0       	rcall	.+12     	; 0x2638 <__divmodhi4_neg1>
    262c:	00 20       	and	r0, r0
    262e:	1a f4       	brpl	.+6      	; 0x2636 <__divmodhi4_exit>

00002630 <__divmodhi4_neg2>:
    2630:	70 95       	com	r23
    2632:	61 95       	neg	r22
    2634:	7f 4f       	sbci	r23, 0xFF	; 255

00002636 <__divmodhi4_exit>:
    2636:	08 95       	ret

00002638 <__divmodhi4_neg1>:
    2638:	f6 f7       	brtc	.-4      	; 0x2636 <__divmodhi4_exit>
    263a:	90 95       	com	r25
    263c:	81 95       	neg	r24
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	08 95       	ret

00002642 <__udivmodhi4>:
    2642:	aa 1b       	sub	r26, r26
    2644:	bb 1b       	sub	r27, r27
    2646:	51 e1       	ldi	r21, 0x11	; 17
    2648:	07 c0       	rjmp	.+14     	; 0x2658 <__udivmodhi4_ep>

0000264a <__udivmodhi4_loop>:
    264a:	aa 1f       	adc	r26, r26
    264c:	bb 1f       	adc	r27, r27
    264e:	a6 17       	cp	r26, r22
    2650:	b7 07       	cpc	r27, r23
    2652:	10 f0       	brcs	.+4      	; 0x2658 <__udivmodhi4_ep>
    2654:	a6 1b       	sub	r26, r22
    2656:	b7 0b       	sbc	r27, r23

00002658 <__udivmodhi4_ep>:
    2658:	88 1f       	adc	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	5a 95       	dec	r21
    265e:	a9 f7       	brne	.-22     	; 0x264a <__udivmodhi4_loop>
    2660:	80 95       	com	r24
    2662:	90 95       	com	r25
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	08 95       	ret

0000266a <do_rand>:
    266a:	8f 92       	push	r8
    266c:	9f 92       	push	r9
    266e:	af 92       	push	r10
    2670:	bf 92       	push	r11
    2672:	cf 92       	push	r12
    2674:	df 92       	push	r13
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	ec 01       	movw	r28, r24
    2680:	88 81       	ld	r24, Y
    2682:	99 81       	ldd	r25, Y+1	; 0x01
    2684:	aa 81       	ldd	r26, Y+2	; 0x02
    2686:	bb 81       	ldd	r27, Y+3	; 0x03
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	a1 05       	cpc	r26, r1
    268c:	b1 05       	cpc	r27, r1
    268e:	21 f4       	brne	.+8      	; 0x2698 <do_rand+0x2e>
    2690:	84 e2       	ldi	r24, 0x24	; 36
    2692:	99 ed       	ldi	r25, 0xD9	; 217
    2694:	ab e5       	ldi	r26, 0x5B	; 91
    2696:	b7 e0       	ldi	r27, 0x07	; 7
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	2d e1       	ldi	r18, 0x1D	; 29
    269e:	33 ef       	ldi	r19, 0xF3	; 243
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	0e 94 ca 13 	call	0x2794	; 0x2794 <__divmodsi4>
    26a8:	49 01       	movw	r8, r18
    26aa:	5a 01       	movw	r10, r20
    26ac:	27 ea       	ldi	r18, 0xA7	; 167
    26ae:	31 e4       	ldi	r19, 0x41	; 65
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	0e 94 ef 12 	call	0x25de	; 0x25de <__mulsi3>
    26b8:	6b 01       	movw	r12, r22
    26ba:	7c 01       	movw	r14, r24
    26bc:	c5 01       	movw	r24, r10
    26be:	b4 01       	movw	r22, r8
    26c0:	2c ee       	ldi	r18, 0xEC	; 236
    26c2:	34 ef       	ldi	r19, 0xF4	; 244
    26c4:	4f ef       	ldi	r20, 0xFF	; 255
    26c6:	5f ef       	ldi	r21, 0xFF	; 255
    26c8:	0e 94 ef 12 	call	0x25de	; 0x25de <__mulsi3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	c8 0e       	add	r12, r24
    26d2:	d9 1e       	adc	r13, r25
    26d4:	ea 1e       	adc	r14, r26
    26d6:	fb 1e       	adc	r15, r27
    26d8:	f7 fe       	sbrs	r15, 7
    26da:	08 c0       	rjmp	.+16     	; 0x26ec <do_rand+0x82>
    26dc:	8f ef       	ldi	r24, 0xFF	; 255
    26de:	9f ef       	ldi	r25, 0xFF	; 255
    26e0:	af ef       	ldi	r26, 0xFF	; 255
    26e2:	bf e7       	ldi	r27, 0x7F	; 127
    26e4:	c8 0e       	add	r12, r24
    26e6:	d9 1e       	adc	r13, r25
    26e8:	ea 1e       	adc	r14, r26
    26ea:	fb 1e       	adc	r15, r27
    26ec:	c8 82       	st	Y, r12
    26ee:	d9 82       	std	Y+1, r13	; 0x01
    26f0:	ea 82       	std	Y+2, r14	; 0x02
    26f2:	fb 82       	std	Y+3, r15	; 0x03
    26f4:	c6 01       	movw	r24, r12
    26f6:	9f 77       	andi	r25, 0x7F	; 127
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	8f 90       	pop	r8
    270c:	08 95       	ret

0000270e <rand_r>:
    270e:	0e 94 35 13 	call	0x266a	; 0x266a <do_rand>
    2712:	08 95       	ret

00002714 <rand>:
    2714:	86 e1       	ldi	r24, 0x16	; 22
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	0e 94 35 13 	call	0x266a	; 0x266a <do_rand>
    271c:	08 95       	ret

0000271e <srand>:
    271e:	a0 e0       	ldi	r26, 0x00	; 0
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	80 93 16 01 	sts	0x0116, r24
    2726:	90 93 17 01 	sts	0x0117, r25
    272a:	a0 93 18 01 	sts	0x0118, r26
    272e:	b0 93 19 01 	sts	0x0119, r27
    2732:	08 95       	ret

00002734 <__eerd_block_m328p>:
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22

00002738 <__eerd_blraw_m328p>:
    2738:	fc 01       	movw	r30, r24
    273a:	f9 99       	sbic	0x1f, 1	; 31
    273c:	fe cf       	rjmp	.-4      	; 0x273a <__eerd_blraw_m328p+0x2>
    273e:	06 c0       	rjmp	.+12     	; 0x274c <__eerd_blraw_m328p+0x14>
    2740:	f2 bd       	out	0x22, r31	; 34
    2742:	e1 bd       	out	0x21, r30	; 33
    2744:	f8 9a       	sbi	0x1f, 0	; 31
    2746:	31 96       	adiw	r30, 0x01	; 1
    2748:	00 b4       	in	r0, 0x20	; 32
    274a:	0d 92       	st	X+, r0
    274c:	41 50       	subi	r20, 0x01	; 1
    274e:	50 40       	sbci	r21, 0x00	; 0
    2750:	b8 f7       	brcc	.-18     	; 0x2740 <__eerd_blraw_m328p+0x8>
    2752:	08 95       	ret

00002754 <__eerd_byte_m328p>:
    2754:	f9 99       	sbic	0x1f, 1	; 31
    2756:	fe cf       	rjmp	.-4      	; 0x2754 <__eerd_byte_m328p>
    2758:	92 bd       	out	0x22, r25	; 34
    275a:	81 bd       	out	0x21, r24	; 33
    275c:	f8 9a       	sbi	0x1f, 0	; 31
    275e:	99 27       	eor	r25, r25
    2760:	80 b5       	in	r24, 0x20	; 32
    2762:	08 95       	ret

00002764 <__eewr_block_m328p>:
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	03 c0       	rjmp	.+6      	; 0x2770 <__eewr_block_m328p+0xc>
    276a:	2d 91       	ld	r18, X+
    276c:	0e 94 bd 13 	call	0x277a	; 0x277a <__eewr_r18_m328p>
    2770:	41 50       	subi	r20, 0x01	; 1
    2772:	50 40       	sbci	r21, 0x00	; 0
    2774:	d0 f7       	brcc	.-12     	; 0x276a <__eewr_block_m328p+0x6>
    2776:	08 95       	ret

00002778 <__eewr_byte_m328p>:
    2778:	26 2f       	mov	r18, r22

0000277a <__eewr_r18_m328p>:
    277a:	f9 99       	sbic	0x1f, 1	; 31
    277c:	fe cf       	rjmp	.-4      	; 0x277a <__eewr_r18_m328p>
    277e:	1f ba       	out	0x1f, r1	; 31
    2780:	92 bd       	out	0x22, r25	; 34
    2782:	81 bd       	out	0x21, r24	; 33
    2784:	20 bd       	out	0x20, r18	; 32
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	fa 9a       	sbi	0x1f, 2	; 31
    278c:	f9 9a       	sbi	0x1f, 1	; 31
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	08 95       	ret

00002794 <__divmodsi4>:
    2794:	97 fb       	bst	r25, 7
    2796:	09 2e       	mov	r0, r25
    2798:	05 26       	eor	r0, r21
    279a:	0e d0       	rcall	.+28     	; 0x27b8 <__divmodsi4_neg1>
    279c:	57 fd       	sbrc	r21, 7
    279e:	04 d0       	rcall	.+8      	; 0x27a8 <__divmodsi4_neg2>
    27a0:	14 d0       	rcall	.+40     	; 0x27ca <__udivmodsi4>
    27a2:	0a d0       	rcall	.+20     	; 0x27b8 <__divmodsi4_neg1>
    27a4:	00 1c       	adc	r0, r0
    27a6:	38 f4       	brcc	.+14     	; 0x27b6 <__divmodsi4_exit>

000027a8 <__divmodsi4_neg2>:
    27a8:	50 95       	com	r21
    27aa:	40 95       	com	r20
    27ac:	30 95       	com	r19
    27ae:	21 95       	neg	r18
    27b0:	3f 4f       	sbci	r19, 0xFF	; 255
    27b2:	4f 4f       	sbci	r20, 0xFF	; 255
    27b4:	5f 4f       	sbci	r21, 0xFF	; 255

000027b6 <__divmodsi4_exit>:
    27b6:	08 95       	ret

000027b8 <__divmodsi4_neg1>:
    27b8:	f6 f7       	brtc	.-4      	; 0x27b6 <__divmodsi4_exit>
    27ba:	90 95       	com	r25
    27bc:	80 95       	com	r24
    27be:	70 95       	com	r23
    27c0:	61 95       	neg	r22
    27c2:	7f 4f       	sbci	r23, 0xFF	; 255
    27c4:	8f 4f       	sbci	r24, 0xFF	; 255
    27c6:	9f 4f       	sbci	r25, 0xFF	; 255
    27c8:	08 95       	ret

000027ca <__udivmodsi4>:
    27ca:	a1 e2       	ldi	r26, 0x21	; 33
    27cc:	1a 2e       	mov	r1, r26
    27ce:	aa 1b       	sub	r26, r26
    27d0:	bb 1b       	sub	r27, r27
    27d2:	fd 01       	movw	r30, r26
    27d4:	0d c0       	rjmp	.+26     	; 0x27f0 <__udivmodsi4_ep>

000027d6 <__udivmodsi4_loop>:
    27d6:	aa 1f       	adc	r26, r26
    27d8:	bb 1f       	adc	r27, r27
    27da:	ee 1f       	adc	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	a2 17       	cp	r26, r18
    27e0:	b3 07       	cpc	r27, r19
    27e2:	e4 07       	cpc	r30, r20
    27e4:	f5 07       	cpc	r31, r21
    27e6:	20 f0       	brcs	.+8      	; 0x27f0 <__udivmodsi4_ep>
    27e8:	a2 1b       	sub	r26, r18
    27ea:	b3 0b       	sbc	r27, r19
    27ec:	e4 0b       	sbc	r30, r20
    27ee:	f5 0b       	sbc	r31, r21

000027f0 <__udivmodsi4_ep>:
    27f0:	66 1f       	adc	r22, r22
    27f2:	77 1f       	adc	r23, r23
    27f4:	88 1f       	adc	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	1a 94       	dec	r1
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <__udivmodsi4_loop>
    27fc:	60 95       	com	r22
    27fe:	70 95       	com	r23
    2800:	80 95       	com	r24
    2802:	90 95       	com	r25
    2804:	9b 01       	movw	r18, r22
    2806:	ac 01       	movw	r20, r24
    2808:	bd 01       	movw	r22, r26
    280a:	cf 01       	movw	r24, r30
    280c:	08 95       	ret

0000280e <_exit>:
    280e:	f8 94       	cli

00002810 <__stop_program>:
    2810:	ff cf       	rjmp	.-2      	; 0x2810 <__stop_program>
